{"ast":null,"code":"import { getRelativeLocation, getGridLocation, orthogonal } from '../gridview/gridview';\nimport { directionToPosition, Droptarget } from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable, Disposable } from '../lifecycle';\nimport { Event, Emitter, addDisposableListener } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { DockviewUnhandledDragOverEvent, isGroupOptionsWithGroup, isGroupOptionsWithPanel, isPanelOptionsWithGroup, isPanelOptionsWithPanel } from './options';\nimport { BaseGrid, toTarget } from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation } from '../splitview/splitview';\nimport { DockviewDidDropEvent, DockviewWillDropEvent } from './dockviewGroupPanelModel';\nimport { WillShowOverlayLocationEvent } from './events';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Overlay } from '../overlay/overlay';\nimport { addTestId, Classnames, getDockviewTheme, onDidWindowResizeEnd, onDidWindowMoveEnd, toggleClass, watchElementResize } from '../dom';\nimport { DockviewFloatingGroupPanel } from './dockviewFloatingGroupPanel';\nimport { DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE, DEFAULT_FLOATING_GROUP_POSITION } from '../constants';\nimport { OverlayRenderContainer } from '../overlay/overlayRenderContainer';\nimport { PopoutWindow } from '../popoutWindow';\nimport { StrictEventsSequencing } from './strictEventsSequencing';\nimport { PopupService } from './components/popupService';\nimport { DropTargetAnchorContainer } from '../dnd/dropTargetAnchorContainer';\nimport { themeAbyss } from './theme';\nconst DEFAULT_ROOT_OVERLAY_MODEL = {\n  activationSize: {\n    type: 'pixels',\n    value: 10\n  },\n  size: {\n    type: 'pixels',\n    value: 20\n  }\n};\nfunction moveGroupWithoutDestroying(options) {\n  const activePanel = options.from.activePanel;\n  const panels = [...options.from.panels].map(panel => {\n    const removedPanel = options.from.model.removePanel(panel);\n    options.from.model.renderContainer.detatch(panel);\n    return removedPanel;\n  });\n  panels.forEach(panel => {\n    options.to.model.openPanel(panel, {\n      skipSetActive: activePanel !== panel,\n      skipSetGroupActive: true\n    });\n  });\n}\nexport class DockviewComponent extends BaseGrid {\n  get orientation() {\n    return this.gridview.orientation;\n  }\n  get totalPanels() {\n    return this.panels.length;\n  }\n  get panels() {\n    return this.groups.flatMap(group => group.panels);\n  }\n  get options() {\n    return this._options;\n  }\n  get activePanel() {\n    const activeGroup = this.activeGroup;\n    if (!activeGroup) {\n      return undefined;\n    }\n    return activeGroup.activePanel;\n  }\n  get renderer() {\n    var _a;\n    return (_a = this.options.defaultRenderer) !== null && _a !== void 0 ? _a : 'onlyWhenVisible';\n  }\n  get api() {\n    return this._api;\n  }\n  get floatingGroups() {\n    return this._floatingGroups;\n  }\n  constructor(container, options) {\n    var _a, _b, _c;\n    super(container, {\n      proportionalLayout: true,\n      orientation: Orientation.HORIZONTAL,\n      styles: options.hideBorders ? {\n        separatorBorder: 'transparent'\n      } : undefined,\n      disableAutoResizing: options.disableAutoResizing,\n      locked: options.locked,\n      margin: (_b = (_a = options.theme) === null || _a === void 0 ? void 0 : _a.gap) !== null && _b !== void 0 ? _b : 0,\n      className: options.className\n    });\n    this.nextGroupId = sequentialNumberGenerator();\n    this._deserializer = new DefaultDockviewDeserialzier(this);\n    this._watermark = null;\n    this._onWillDragPanel = new Emitter();\n    this.onWillDragPanel = this._onWillDragPanel.event;\n    this._onWillDragGroup = new Emitter();\n    this.onWillDragGroup = this._onWillDragGroup.event;\n    this._onDidDrop = new Emitter();\n    this.onDidDrop = this._onDidDrop.event;\n    this._onWillDrop = new Emitter();\n    this.onWillDrop = this._onWillDrop.event;\n    this._onWillShowOverlay = new Emitter();\n    this.onWillShowOverlay = this._onWillShowOverlay.event;\n    this._onUnhandledDragOverEvent = new Emitter();\n    this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;\n    this._onDidRemovePanel = new Emitter();\n    this.onDidRemovePanel = this._onDidRemovePanel.event;\n    this._onDidAddPanel = new Emitter();\n    this.onDidAddPanel = this._onDidAddPanel.event;\n    this._onDidPopoutGroupSizeChange = new Emitter();\n    this.onDidPopoutGroupSizeChange = this._onDidPopoutGroupSizeChange.event;\n    this._onDidPopoutGroupPositionChange = new Emitter();\n    this.onDidPopoutGroupPositionChange = this._onDidPopoutGroupPositionChange.event;\n    this._onDidOpenPopoutWindowFail = new Emitter();\n    this.onDidOpenPopoutWindowFail = this._onDidOpenPopoutWindowFail.event;\n    this._onDidLayoutFromJSON = new Emitter();\n    this.onDidLayoutFromJSON = this._onDidLayoutFromJSON.event;\n    this._onDidActivePanelChange = new Emitter({\n      replay: true\n    });\n    this.onDidActivePanelChange = this._onDidActivePanelChange.event;\n    this._onDidMovePanel = new Emitter();\n    this.onDidMovePanel = this._onDidMovePanel.event;\n    this._onDidMaximizedGroupChange = new Emitter();\n    this.onDidMaximizedGroupChange = this._onDidMaximizedGroupChange.event;\n    this._floatingGroups = [];\n    this._popoutGroups = [];\n    this._onDidRemoveGroup = new Emitter();\n    this.onDidRemoveGroup = this._onDidRemoveGroup.event;\n    this._onDidAddGroup = new Emitter();\n    this.onDidAddGroup = this._onDidAddGroup.event;\n    this._onDidOptionsChange = new Emitter();\n    this.onDidOptionsChange = this._onDidOptionsChange.event;\n    this._onDidActiveGroupChange = new Emitter();\n    this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n    this._moving = false;\n    this._options = options;\n    this.popupService = new PopupService(this.element);\n    this._themeClassnames = new Classnames(this.element);\n    this._api = new DockviewApi(this);\n    this.rootDropTargetContainer = new DropTargetAnchorContainer(this.element, {\n      disabled: true\n    });\n    this.overlayRenderContainer = new OverlayRenderContainer(this.gridview.element, this);\n    this._rootDropTarget = new Droptarget(this.element, {\n      className: 'dv-drop-target-edge',\n      canDisplayOverlay: (event, position) => {\n        const data = getPanelData();\n        if (data) {\n          if (data.viewId !== this.id) {\n            return false;\n          }\n          if (position === 'center') {\n            // center drop target is only allowed if there are no panels in the grid\n            // floating panels are allowed\n            return this.gridview.length === 0;\n          }\n          return true;\n        }\n        if (position === 'center' && this.gridview.length !== 0) {\n          /**\n           * for external events only show the four-corner drag overlays, disable\n           * the center position so that external drag events can fall through to the group\n           * and panel drop target handlers\n           */\n          return false;\n        }\n        const firedEvent = new DockviewUnhandledDragOverEvent(event, 'edge', position, getPanelData);\n        this._onUnhandledDragOverEvent.fire(firedEvent);\n        return firedEvent.isAccepted;\n      },\n      acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n      overlayModel: (_c = options.rootOverlayModel) !== null && _c !== void 0 ? _c : DEFAULT_ROOT_OVERLAY_MODEL,\n      getOverrideTarget: () => {\n        var _a;\n        return (_a = this.rootDropTargetContainer) === null || _a === void 0 ? void 0 : _a.model;\n      }\n    });\n    this.updateDropTargetModel(options);\n    toggleClass(this.gridview.element, 'dv-dockview', true);\n    toggleClass(this.element, 'dv-debug', !!options.debug);\n    this.updateTheme();\n    this.updateWatermark();\n    if (options.debug) {\n      this.addDisposables(new StrictEventsSequencing(this));\n    }\n    this.addDisposables(this.rootDropTargetContainer, this.overlayRenderContainer, this._onWillDragPanel, this._onWillDragGroup, this._onWillShowOverlay, this._onDidActivePanelChange, this._onDidAddPanel, this._onDidRemovePanel, this._onDidLayoutFromJSON, this._onDidDrop, this._onWillDrop, this._onDidMovePanel, this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this._onUnhandledDragOverEvent, this._onDidMaximizedGroupChange, this._onDidOptionsChange, this._onDidPopoutGroupSizeChange, this._onDidPopoutGroupPositionChange, this._onDidOpenPopoutWindowFail, this.onDidViewVisibilityChangeMicroTaskQueue(() => {\n      this.updateWatermark();\n    }), this.onDidAdd(event => {\n      if (!this._moving) {\n        this._onDidAddGroup.fire(event);\n      }\n    }), this.onDidRemove(event => {\n      if (!this._moving) {\n        this._onDidRemoveGroup.fire(event);\n      }\n    }), this.onDidActiveChange(event => {\n      if (!this._moving) {\n        this._onDidActiveGroupChange.fire(event);\n      }\n    }), this.onDidMaximizedChange(event => {\n      this._onDidMaximizedGroupChange.fire({\n        group: event.panel,\n        isMaximized: event.isMaximized\n      });\n    }), Event.any(this.onDidAdd, this.onDidRemove)(() => {\n      this.updateWatermark();\n    }), Event.any(this.onDidAddPanel, this.onDidRemovePanel, this.onDidAddGroup, this.onDidRemove, this.onDidMovePanel, this.onDidActivePanelChange, this.onDidPopoutGroupPositionChange, this.onDidPopoutGroupSizeChange)(() => {\n      this._bufferOnDidLayoutChange.fire();\n    }), Disposable.from(() => {\n      // iterate over a copy of the array since .dispose() mutates the original array\n      for (const group of [...this._floatingGroups]) {\n        group.dispose();\n      }\n      // iterate over a copy of the array since .dispose() mutates the original array\n      for (const group of [...this._popoutGroups]) {\n        group.disposable.dispose();\n      }\n    }), this._rootDropTarget, this._rootDropTarget.onWillShowOverlay(event => {\n      if (this.gridview.length > 0 && event.position === 'center') {\n        // option only available when no panels in primary grid\n        return;\n      }\n      this._onWillShowOverlay.fire(new WillShowOverlayLocationEvent(event, {\n        kind: 'edge',\n        panel: undefined,\n        api: this._api,\n        group: undefined,\n        getData: getPanelData\n      }));\n    }), this._rootDropTarget.onDrop(event => {\n      var _a;\n      const willDropEvent = new DockviewWillDropEvent({\n        nativeEvent: event.nativeEvent,\n        position: event.position,\n        panel: undefined,\n        api: this._api,\n        group: undefined,\n        getData: getPanelData,\n        kind: 'edge'\n      });\n      this._onWillDrop.fire(willDropEvent);\n      if (willDropEvent.defaultPrevented) {\n        return;\n      }\n      const data = getPanelData();\n      if (data) {\n        this.moveGroupOrPanel({\n          from: {\n            groupId: data.groupId,\n            panelId: (_a = data.panelId) !== null && _a !== void 0 ? _a : undefined\n          },\n          to: {\n            group: this.orthogonalize(event.position),\n            position: 'center'\n          }\n        });\n      } else {\n        this._onDidDrop.fire(new DockviewDidDropEvent({\n          nativeEvent: event.nativeEvent,\n          position: event.position,\n          panel: undefined,\n          api: this._api,\n          group: undefined,\n          getData: getPanelData\n        }));\n      }\n    }), this._rootDropTarget);\n  }\n  setVisible(panel, visible) {\n    switch (panel.api.location.type) {\n      case 'grid':\n        super.setVisible(panel, visible);\n        break;\n      case 'floating':\n        {\n          const item = this.floatingGroups.find(floatingGroup => floatingGroup.group === panel);\n          if (item) {\n            item.overlay.setVisible(visible);\n            panel.api._onDidVisibilityChange.fire({\n              isVisible: visible\n            });\n          }\n          break;\n        }\n      case 'popout':\n        console.warn('dockview: You cannot hide a group that is in a popout window');\n        break;\n    }\n  }\n  addPopoutGroup(itemToPopout, options) {\n    var _a, _b, _c, _d, _e;\n    if (itemToPopout instanceof DockviewPanel && itemToPopout.group.size === 1) {\n      return this.addPopoutGroup(itemToPopout.group, options);\n    }\n    const theme = getDockviewTheme(this.gridview.element);\n    const element = this.element;\n    function getBox() {\n      if (options === null || options === void 0 ? void 0 : options.position) {\n        return options.position;\n      }\n      if (itemToPopout instanceof DockviewGroupPanel) {\n        return itemToPopout.element.getBoundingClientRect();\n      }\n      if (itemToPopout.group) {\n        return itemToPopout.group.element.getBoundingClientRect();\n      }\n      return element.getBoundingClientRect();\n    }\n    const box = getBox();\n    const groupId = (_b = (_a = options === null || options === void 0 ? void 0 : options.overridePopoutGroup) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : this.getNextGroupId();\n    const _window = new PopoutWindow(`${this.id}-${groupId}`,\n    // unique id\n    theme !== null && theme !== void 0 ? theme : '', {\n      url: (_e = (_c = options === null || options === void 0 ? void 0 : options.popoutUrl) !== null && _c !== void 0 ? _c : (_d = this.options) === null || _d === void 0 ? void 0 : _d.popoutUrl) !== null && _e !== void 0 ? _e : '/popout.html',\n      left: window.screenX + box.left,\n      top: window.screenY + box.top,\n      width: box.width,\n      height: box.height,\n      onDidOpen: options === null || options === void 0 ? void 0 : options.onDidOpen,\n      onWillClose: options === null || options === void 0 ? void 0 : options.onWillClose\n    });\n    const popoutWindowDisposable = new CompositeDisposable(_window, _window.onDidClose(() => {\n      popoutWindowDisposable.dispose();\n    }));\n    return _window.open().then(popoutContainer => {\n      var _a;\n      if (_window.isDisposed) {\n        return false;\n      }\n      const referenceGroup = (options === null || options === void 0 ? void 0 : options.referenceGroup) ? options.referenceGroup : itemToPopout instanceof DockviewPanel ? itemToPopout.group : itemToPopout;\n      const referenceLocation = itemToPopout.api.location.type;\n      /**\n       * The group that is being added doesn't already exist within the DOM, the most likely occurrence\n       * of this case is when being called from the `fromJSON(...)` method\n       */\n      const isGroupAddedToDom = referenceGroup.element.parentElement !== null;\n      let group;\n      if (!isGroupAddedToDom) {\n        group = referenceGroup;\n      } else if (options === null || options === void 0 ? void 0 : options.overridePopoutGroup) {\n        group = options.overridePopoutGroup;\n      } else {\n        group = this.createGroup({\n          id: groupId\n        });\n        if (popoutContainer) {\n          this._onDidAddGroup.fire(group);\n        }\n      }\n      if (popoutContainer === null) {\n        console.error('dockview: failed to create popout. perhaps you need to allow pop-ups for this website');\n        popoutWindowDisposable.dispose();\n        this._onDidOpenPopoutWindowFail.fire();\n        // if the popout window was blocked, we need to move the group back to the reference group\n        // and set it to visible\n        this.movingLock(() => moveGroupWithoutDestroying({\n          from: group,\n          to: referenceGroup\n        }));\n        if (!referenceGroup.api.isVisible) {\n          referenceGroup.api.setVisible(true);\n        }\n        return false;\n      }\n      const gready = document.createElement('div');\n      gready.className = 'dv-overlay-render-container';\n      const overlayRenderContainer = new OverlayRenderContainer(gready, this);\n      group.model.renderContainer = overlayRenderContainer;\n      group.layout(_window.window.innerWidth, _window.window.innerHeight);\n      let floatingBox;\n      if (!(options === null || options === void 0 ? void 0 : options.overridePopoutGroup) && isGroupAddedToDom) {\n        if (itemToPopout instanceof DockviewPanel) {\n          this.movingLock(() => {\n            const panel = referenceGroup.model.removePanel(itemToPopout);\n            group.model.openPanel(panel);\n          });\n        } else {\n          this.movingLock(() => moveGroupWithoutDestroying({\n            from: referenceGroup,\n            to: group\n          }));\n          switch (referenceLocation) {\n            case 'grid':\n              referenceGroup.api.setVisible(false);\n              break;\n            case 'floating':\n            case 'popout':\n              floatingBox = (_a = this._floatingGroups.find(value => value.group.api.id === itemToPopout.api.id)) === null || _a === void 0 ? void 0 : _a.overlay.toJSON();\n              this.removeGroup(referenceGroup);\n              break;\n          }\n        }\n      }\n      popoutContainer.classList.add('dv-dockview');\n      popoutContainer.style.overflow = 'hidden';\n      popoutContainer.appendChild(gready);\n      popoutContainer.appendChild(group.element);\n      const anchor = document.createElement('div');\n      const dropTargetContainer = new DropTargetAnchorContainer(anchor, {\n        disabled: this.rootDropTargetContainer.disabled\n      });\n      popoutContainer.appendChild(anchor);\n      group.model.dropTargetContainer = dropTargetContainer;\n      group.model.location = {\n        type: 'popout',\n        getWindow: () => _window.window,\n        popoutUrl: options === null || options === void 0 ? void 0 : options.popoutUrl\n      };\n      if (isGroupAddedToDom && itemToPopout.api.location.type === 'grid') {\n        itemToPopout.api.setVisible(false);\n      }\n      this.doSetGroupAndPanelActive(group);\n      popoutWindowDisposable.addDisposables(group.api.onDidActiveChange(event => {\n        var _a;\n        if (event.isActive) {\n          (_a = _window.window) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n      }), group.api.onWillFocus(() => {\n        var _a;\n        (_a = _window.window) === null || _a === void 0 ? void 0 : _a.focus();\n      }));\n      let returnedGroup;\n      const isValidReferenceGroup = isGroupAddedToDom && referenceGroup && this.getPanel(referenceGroup.id);\n      const value = {\n        window: _window,\n        popoutGroup: group,\n        referenceGroup: isValidReferenceGroup ? referenceGroup.id : undefined,\n        disposable: {\n          dispose: () => {\n            popoutWindowDisposable.dispose();\n            return returnedGroup;\n          }\n        }\n      };\n      const _onDidWindowPositionChange = onDidWindowMoveEnd(_window.window);\n      popoutWindowDisposable.addDisposables(_onDidWindowPositionChange, onDidWindowResizeEnd(_window.window, () => {\n        this._onDidPopoutGroupSizeChange.fire({\n          width: _window.window.innerWidth,\n          height: _window.window.innerHeight,\n          group\n        });\n      }), _onDidWindowPositionChange.event(() => {\n        this._onDidPopoutGroupPositionChange.fire({\n          screenX: _window.window.screenX,\n          screenY: _window.window.screenX,\n          group\n        });\n      }),\n      /**\n       * ResizeObserver seems slow here, I do not know why but we don't need it\n       * since we can reply on the window resize event as we will occupy the full\n       * window dimensions\n       */\n      addDisposableListener(_window.window, 'resize', () => {\n        group.layout(_window.window.innerWidth, _window.window.innerHeight);\n      }), overlayRenderContainer, Disposable.from(() => {\n        if (this.isDisposed) {\n          return; // cleanup may run after instance is disposed\n        }\n        if (isGroupAddedToDom && this.getPanel(referenceGroup.id)) {\n          this.movingLock(() => moveGroupWithoutDestroying({\n            from: group,\n            to: referenceGroup\n          }));\n          if (!referenceGroup.api.isVisible) {\n            referenceGroup.api.setVisible(true);\n          }\n          if (this.getPanel(group.id)) {\n            this.doRemoveGroup(group, {\n              skipPopoutAssociated: true\n            });\n          }\n        } else if (this.getPanel(group.id)) {\n          group.model.renderContainer = this.overlayRenderContainer;\n          group.model.dropTargetContainer = this.rootDropTargetContainer;\n          returnedGroup = group;\n          const alreadyRemoved = !this._popoutGroups.find(p => p.popoutGroup === group);\n          if (alreadyRemoved) {\n            /**\n             * If this popout group was explicitly removed then we shouldn't run the additional\n             * steps. To tell if the running of this disposable is the result of this popout group\n             * being explicitly removed we can check if this popout group is still referenced in\n             * the `this._popoutGroups` list.\n             */\n            return;\n          }\n          if (floatingBox) {\n            this.addFloatingGroup(group, {\n              height: floatingBox.height,\n              width: floatingBox.width,\n              position: floatingBox\n            });\n          } else {\n            this.doRemoveGroup(group, {\n              skipDispose: true,\n              skipActive: true,\n              skipPopoutReturn: true\n            });\n            group.model.location = {\n              type: 'grid'\n            };\n            this.movingLock(() => {\n              // suppress group add events since the group already exists\n              this.doAddGroup(group, [0]);\n            });\n          }\n          this.doSetGroupAndPanelActive(group);\n        }\n      }));\n      this._popoutGroups.push(value);\n      this.updateWatermark();\n      return true;\n    }).catch(err => {\n      console.error('dockview: failed to create popout.', err);\n      return false;\n    });\n  }\n  addFloatingGroup(item, options) {\n    var _a, _b, _c, _d, _e;\n    let group;\n    if (item instanceof DockviewPanel) {\n      group = this.createGroup();\n      this._onDidAddGroup.fire(group);\n      this.movingLock(() => this.removePanel(item, {\n        removeEmptyGroup: true,\n        skipDispose: true,\n        skipSetActiveGroup: true\n      }));\n      this.movingLock(() => group.model.openPanel(item, {\n        skipSetGroupActive: true\n      }));\n    } else {\n      group = item;\n      const popoutReferenceGroupId = (_a = this._popoutGroups.find(_ => _.popoutGroup === group)) === null || _a === void 0 ? void 0 : _a.referenceGroup;\n      const popoutReferenceGroup = popoutReferenceGroupId ? this.getPanel(popoutReferenceGroupId) : undefined;\n      const skip = typeof (options === null || options === void 0 ? void 0 : options.skipRemoveGroup) === 'boolean' && options.skipRemoveGroup;\n      if (!skip) {\n        if (popoutReferenceGroup) {\n          this.movingLock(() => moveGroupWithoutDestroying({\n            from: item,\n            to: popoutReferenceGroup\n          }));\n          this.doRemoveGroup(item, {\n            skipPopoutReturn: true,\n            skipPopoutAssociated: true\n          });\n          this.doRemoveGroup(popoutReferenceGroup, {\n            skipDispose: true\n          });\n          group = popoutReferenceGroup;\n        } else {\n          this.doRemoveGroup(item, {\n            skipDispose: true,\n            skipPopoutReturn: true,\n            skipPopoutAssociated: false\n          });\n        }\n      }\n    }\n    function getAnchoredBox() {\n      if (options === null || options === void 0 ? void 0 : options.position) {\n        const result = {};\n        if ('left' in options.position) {\n          result.left = Math.max(options.position.left, 0);\n        } else if ('right' in options.position) {\n          result.right = Math.max(options.position.right, 0);\n        } else {\n          result.left = DEFAULT_FLOATING_GROUP_POSITION.left;\n        }\n        if ('top' in options.position) {\n          result.top = Math.max(options.position.top, 0);\n        } else if ('bottom' in options.position) {\n          result.bottom = Math.max(options.position.bottom, 0);\n        } else {\n          result.top = DEFAULT_FLOATING_GROUP_POSITION.top;\n        }\n        if (typeof options.width === 'number') {\n          result.width = Math.max(options.width, 0);\n        } else {\n          result.width = DEFAULT_FLOATING_GROUP_POSITION.width;\n        }\n        if (typeof options.height === 'number') {\n          result.height = Math.max(options.height, 0);\n        } else {\n          result.height = DEFAULT_FLOATING_GROUP_POSITION.height;\n        }\n        return result;\n      }\n      return {\n        left: typeof (options === null || options === void 0 ? void 0 : options.x) === 'number' ? Math.max(options.x, 0) : DEFAULT_FLOATING_GROUP_POSITION.left,\n        top: typeof (options === null || options === void 0 ? void 0 : options.y) === 'number' ? Math.max(options.y, 0) : DEFAULT_FLOATING_GROUP_POSITION.top,\n        width: typeof (options === null || options === void 0 ? void 0 : options.width) === 'number' ? Math.max(options.width, 0) : DEFAULT_FLOATING_GROUP_POSITION.width,\n        height: typeof (options === null || options === void 0 ? void 0 : options.height) === 'number' ? Math.max(options.height, 0) : DEFAULT_FLOATING_GROUP_POSITION.height\n      };\n    }\n    const anchoredBox = getAnchoredBox();\n    const overlay = new Overlay(Object.assign(Object.assign({\n      container: this.gridview.element,\n      content: group.element\n    }, anchoredBox), {\n      minimumInViewportWidth: this.options.floatingGroupBounds === 'boundedWithinViewport' ? undefined : (_c = (_b = this.options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport) !== null && _c !== void 0 ? _c : DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n      minimumInViewportHeight: this.options.floatingGroupBounds === 'boundedWithinViewport' ? undefined : (_e = (_d = this.options.floatingGroupBounds) === null || _d === void 0 ? void 0 : _d.minimumHeightWithinViewport) !== null && _e !== void 0 ? _e : DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE\n    }));\n    const el = group.element.querySelector('.dv-void-container');\n    if (!el) {\n      throw new Error('failed to find drag handle');\n    }\n    overlay.setupDrag(el, {\n      inDragMode: typeof (options === null || options === void 0 ? void 0 : options.inDragMode) === 'boolean' ? options.inDragMode : false\n    });\n    const floatingGroupPanel = new DockviewFloatingGroupPanel(group, overlay);\n    const disposable = new CompositeDisposable(group.api.onDidActiveChange(event => {\n      if (event.isActive) {\n        overlay.bringToFront();\n      }\n    }), watchElementResize(group.element, entry => {\n      const {\n        width,\n        height\n      } = entry.contentRect;\n      group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n    }));\n    floatingGroupPanel.addDisposables(overlay.onDidChange(() => {\n      // this is either a resize or a move\n      // to inform the panels .layout(...) the group with it's current size\n      // don't care about resize since the above watcher handles that\n      group.layout(group.width, group.height);\n    }), overlay.onDidChangeEnd(() => {\n      this._bufferOnDidLayoutChange.fire();\n    }), group.onDidChange(event => {\n      overlay.setBounds({\n        height: event === null || event === void 0 ? void 0 : event.height,\n        width: event === null || event === void 0 ? void 0 : event.width\n      });\n    }), {\n      dispose: () => {\n        disposable.dispose();\n        remove(this._floatingGroups, floatingGroupPanel);\n        group.model.location = {\n          type: 'grid'\n        };\n        this.updateWatermark();\n      }\n    });\n    this._floatingGroups.push(floatingGroupPanel);\n    group.model.location = {\n      type: 'floating'\n    };\n    if (!(options === null || options === void 0 ? void 0 : options.skipActiveGroup)) {\n      this.doSetGroupAndPanelActive(group);\n    }\n    this.updateWatermark();\n  }\n  orthogonalize(position, options) {\n    switch (position) {\n      case 'top':\n      case 'bottom':\n        if (this.gridview.orientation === Orientation.HORIZONTAL) {\n          // we need to add to a vertical splitview but the current root is a horizontal splitview.\n          // insert a vertical splitview at the root level and add the existing view as a child\n          this.gridview.insertOrthogonalSplitviewAtRoot();\n        }\n        break;\n      case 'left':\n      case 'right':\n        if (this.gridview.orientation === Orientation.VERTICAL) {\n          // we need to add to a horizontal splitview but the current root is a vertical splitview.\n          // insert a horiziontal splitview at the root level and add the existing view as a child\n          this.gridview.insertOrthogonalSplitviewAtRoot();\n        }\n        break;\n      default:\n        break;\n    }\n    switch (position) {\n      case 'top':\n      case 'left':\n      case 'center':\n        return this.createGroupAtLocation([0], undefined, options);\n      // insert into first position\n      case 'bottom':\n      case 'right':\n        return this.createGroupAtLocation([this.gridview.length], undefined, options);\n      // insert into last position\n      default:\n        throw new Error(`unsupported position ${position}`);\n    }\n  }\n  updateOptions(options) {\n    var _a, _b;\n    super.updateOptions(options);\n    if ('floatingGroupBounds' in options) {\n      for (const group of this._floatingGroups) {\n        switch (options.floatingGroupBounds) {\n          case 'boundedWithinViewport':\n            group.overlay.minimumInViewportHeight = undefined;\n            group.overlay.minimumInViewportWidth = undefined;\n            break;\n          case undefined:\n            group.overlay.minimumInViewportHeight = DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n            group.overlay.minimumInViewportWidth = DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n            break;\n          default:\n            group.overlay.minimumInViewportHeight = (_a = options.floatingGroupBounds) === null || _a === void 0 ? void 0 : _a.minimumHeightWithinViewport;\n            group.overlay.minimumInViewportWidth = (_b = options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport;\n        }\n        group.overlay.setBounds();\n      }\n    }\n    this.updateDropTargetModel(options);\n    const oldDisableDnd = this.options.disableDnd;\n    this._options = Object.assign(Object.assign({}, this.options), options);\n    const newDisableDnd = this.options.disableDnd;\n    if (oldDisableDnd !== newDisableDnd) {\n      this.updateDragAndDropState();\n    }\n    if ('theme' in options) {\n      this.updateTheme();\n    }\n    this.layout(this.gridview.width, this.gridview.height, true);\n  }\n  layout(width, height, forceResize) {\n    super.layout(width, height, forceResize);\n    if (this._floatingGroups) {\n      for (const floating of this._floatingGroups) {\n        // ensure floting groups stay within visible boundaries\n        floating.overlay.setBounds();\n      }\n    }\n  }\n  updateDragAndDropState() {\n    // Update draggable state for all tabs and void containers\n    for (const group of this.groups) {\n      group.model.updateDragAndDropState();\n    }\n  }\n  focus() {\n    var _a;\n    (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.focus();\n  }\n  getGroupPanel(id) {\n    return this.panels.find(panel => panel.id === id);\n  }\n  setActivePanel(panel) {\n    panel.group.model.openPanel(panel);\n    this.doSetGroupAndPanelActive(panel.group);\n  }\n  moveToNext(options = {}) {\n    var _a;\n    if (!options.group) {\n      if (!this.activeGroup) {\n        return;\n      }\n      options.group = this.activeGroup;\n    }\n    if (options.includePanel && options.group) {\n      if (options.group.activePanel !== options.group.panels[options.group.panels.length - 1]) {\n        options.group.model.moveToNext({\n          suppressRoll: true\n        });\n        return;\n      }\n    }\n    const location = getGridLocation(options.group.element);\n    const next = (_a = this.gridview.next(location)) === null || _a === void 0 ? void 0 : _a.view;\n    this.doSetGroupAndPanelActive(next);\n  }\n  moveToPrevious(options = {}) {\n    var _a;\n    if (!options.group) {\n      if (!this.activeGroup) {\n        return;\n      }\n      options.group = this.activeGroup;\n    }\n    if (options.includePanel && options.group) {\n      if (options.group.activePanel !== options.group.panels[0]) {\n        options.group.model.moveToPrevious({\n          suppressRoll: true\n        });\n        return;\n      }\n    }\n    const location = getGridLocation(options.group.element);\n    const next = (_a = this.gridview.previous(location)) === null || _a === void 0 ? void 0 : _a.view;\n    if (next) {\n      this.doSetGroupAndPanelActive(next);\n    }\n  }\n  /**\n   * Serialize the current state of the layout\n   *\n   * @returns A JSON respresentation of the layout\n   */\n  toJSON() {\n    var _a;\n    const data = this.gridview.serialize();\n    const panels = this.panels.reduce((collection, panel) => {\n      collection[panel.id] = panel.toJSON();\n      return collection;\n    }, {});\n    const floats = this._floatingGroups.map(group => {\n      return {\n        data: group.group.toJSON(),\n        position: group.overlay.toJSON()\n      };\n    });\n    const popoutGroups = this._popoutGroups.map(group => {\n      return {\n        data: group.popoutGroup.toJSON(),\n        gridReferenceGroup: group.referenceGroup,\n        position: group.window.dimensions(),\n        url: group.popoutGroup.api.location.type === 'popout' ? group.popoutGroup.api.location.popoutUrl : undefined\n      };\n    });\n    const result = {\n      grid: data,\n      panels,\n      activeGroup: (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.id\n    };\n    if (floats.length > 0) {\n      result.floatingGroups = floats;\n    }\n    if (popoutGroups.length > 0) {\n      result.popoutGroups = popoutGroups;\n    }\n    return result;\n  }\n  fromJSON(data) {\n    var _a, _b;\n    this.clear();\n    if (typeof data !== 'object' || data === null) {\n      throw new Error('serialized layout must be a non-null object');\n    }\n    const {\n      grid,\n      panels,\n      activeGroup\n    } = data;\n    if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n      throw new Error('root must be of type branch');\n    }\n    try {\n      // take note of the existing dimensions\n      const width = this.width;\n      const height = this.height;\n      const createGroupFromSerializedState = data => {\n        const {\n          id,\n          locked,\n          hideHeader,\n          views,\n          activeView\n        } = data;\n        if (typeof id !== 'string') {\n          throw new Error('group id must be of type string');\n        }\n        const group = this.createGroup({\n          id,\n          locked: !!locked,\n          hideHeader: !!hideHeader\n        });\n        this._onDidAddGroup.fire(group);\n        const createdPanels = [];\n        for (const child of views) {\n          /**\n           * Run the deserializer step seperately since this may fail to due corrupted external state.\n           * In running this section first we avoid firing lots of 'add' events in the event of a failure\n           * due to a corruption of input data.\n           */\n          const panel = this._deserializer.fromJSON(panels[child], group);\n          createdPanels.push(panel);\n        }\n        for (let i = 0; i < views.length; i++) {\n          const panel = createdPanels[i];\n          const isActive = typeof activeView === 'string' && activeView === panel.id;\n          group.model.openPanel(panel, {\n            skipSetActive: !isActive,\n            skipSetGroupActive: true\n          });\n        }\n        if (!group.activePanel && group.panels.length > 0) {\n          group.model.openPanel(group.panels[group.panels.length - 1], {\n            skipSetGroupActive: true\n          });\n        }\n        return group;\n      };\n      this.gridview.deserialize(grid, {\n        fromJSON: node => {\n          return createGroupFromSerializedState(node.data);\n        }\n      });\n      this.layout(width, height, true);\n      const serializedFloatingGroups = (_a = data.floatingGroups) !== null && _a !== void 0 ? _a : [];\n      for (const serializedFloatingGroup of serializedFloatingGroups) {\n        const {\n          data,\n          position\n        } = serializedFloatingGroup;\n        const group = createGroupFromSerializedState(data);\n        this.addFloatingGroup(group, {\n          position: position,\n          width: position.width,\n          height: position.height,\n          skipRemoveGroup: true,\n          inDragMode: false\n        });\n      }\n      const serializedPopoutGroups = (_b = data.popoutGroups) !== null && _b !== void 0 ? _b : [];\n      for (const serializedPopoutGroup of serializedPopoutGroups) {\n        const {\n          data,\n          position,\n          gridReferenceGroup,\n          url\n        } = serializedPopoutGroup;\n        const group = createGroupFromSerializedState(data);\n        this.addPopoutGroup(group, {\n          position: position !== null && position !== void 0 ? position : undefined,\n          overridePopoutGroup: gridReferenceGroup ? group : undefined,\n          referenceGroup: gridReferenceGroup ? this.getPanel(gridReferenceGroup) : undefined,\n          popoutUrl: url\n        });\n      }\n      for (const floatingGroup of this._floatingGroups) {\n        floatingGroup.overlay.setBounds();\n      }\n      if (typeof activeGroup === 'string') {\n        const panel = this.getPanel(activeGroup);\n        if (panel) {\n          this.doSetGroupAndPanelActive(panel);\n        }\n      }\n    } catch (err) {\n      console.error('dockview: failed to deserialize layout. Reverting changes', err);\n      /**\n       * Takes all the successfully created groups and remove all of their panels.\n       */\n      for (const group of this.groups) {\n        for (const panel of group.panels) {\n          this.removePanel(panel, {\n            removeEmptyGroup: false,\n            skipDispose: false\n          });\n        }\n      }\n      /**\n       * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n       * the underlying HTMLElement existing in the Gridview.\n       */\n      for (const group of this.groups) {\n        group.dispose();\n        this._groups.delete(group.id);\n        this._onDidRemoveGroup.fire(group);\n      }\n      // iterate over a reassigned array since original array will be modified\n      for (const floatingGroup of [...this._floatingGroups]) {\n        floatingGroup.dispose();\n      }\n      // fires clean-up events and clears the underlying HTML gridview.\n      this.clear();\n      /**\n       * even though we have cleaned-up we still want to inform the caller of their error\n       * and we'll do this through re-throwing the original error since afterall you would\n       * expect trying to load a corrupted layout to result in an error and not silently fail...\n       */\n      throw err;\n    }\n    this.updateWatermark();\n    this._onDidLayoutFromJSON.fire();\n  }\n  clear() {\n    const groups = Array.from(this._groups.values()).map(_ => _.value);\n    const hasActiveGroup = !!this.activeGroup;\n    for (const group of groups) {\n      // remove the group will automatically remove the panels\n      this.removeGroup(group, {\n        skipActive: true\n      });\n    }\n    if (hasActiveGroup) {\n      this.doSetGroupAndPanelActive(undefined);\n    }\n    this.gridview.clear();\n  }\n  closeAllGroups() {\n    for (const entry of this._groups.entries()) {\n      const [_, group] = entry;\n      group.value.model.closeAllPanels();\n    }\n  }\n  addPanel(options) {\n    var _a, _b;\n    if (this.panels.find(_ => _.id === options.id)) {\n      throw new Error(`panel with id ${options.id} already exists`);\n    }\n    let referenceGroup;\n    if (options.position && options.floating) {\n      throw new Error('you can only provide one of: position, floating as arguments to .addPanel(...)');\n    }\n    const initial = {\n      width: options.initialWidth,\n      height: options.initialHeight\n    };\n    let index;\n    if (options.position) {\n      if (isPanelOptionsWithPanel(options.position)) {\n        const referencePanel = typeof options.position.referencePanel === 'string' ? this.getGroupPanel(options.position.referencePanel) : options.position.referencePanel;\n        index = options.position.index;\n        if (!referencePanel) {\n          throw new Error(`referencePanel '${options.position.referencePanel}' does not exist`);\n        }\n        referenceGroup = this.findGroup(referencePanel);\n      } else if (isPanelOptionsWithGroup(options.position)) {\n        referenceGroup = typeof options.position.referenceGroup === 'string' ? (_a = this._groups.get(options.position.referenceGroup)) === null || _a === void 0 ? void 0 : _a.value : options.position.referenceGroup;\n        index = options.position.index;\n        if (!referenceGroup) {\n          throw new Error(`referenceGroup '${options.position.referenceGroup}' does not exist`);\n        }\n      } else {\n        const group = this.orthogonalize(directionToPosition(options.position.direction));\n        const panel = this.createPanel(options, group);\n        group.model.openPanel(panel, {\n          skipSetActive: options.inactive,\n          skipSetGroupActive: options.inactive,\n          index\n        });\n        if (!options.inactive) {\n          this.doSetGroupAndPanelActive(group);\n        }\n        group.api.setSize({\n          height: initial === null || initial === void 0 ? void 0 : initial.height,\n          width: initial === null || initial === void 0 ? void 0 : initial.width\n        });\n        return panel;\n      }\n    } else {\n      referenceGroup = this.activeGroup;\n    }\n    let panel;\n    if (referenceGroup) {\n      const target = toTarget(((_b = options.position) === null || _b === void 0 ? void 0 : _b.direction) || 'within');\n      if (options.floating) {\n        const group = this.createGroup();\n        this._onDidAddGroup.fire(group);\n        const floatingGroupOptions = typeof options.floating === 'object' && options.floating !== null ? options.floating : {};\n        this.addFloatingGroup(group, Object.assign(Object.assign({}, floatingGroupOptions), {\n          inDragMode: false,\n          skipRemoveGroup: true,\n          skipActiveGroup: true\n        }));\n        panel = this.createPanel(options, group);\n        group.model.openPanel(panel, {\n          skipSetActive: options.inactive,\n          skipSetGroupActive: options.inactive,\n          index\n        });\n      } else if (referenceGroup.api.location.type === 'floating' || target === 'center') {\n        panel = this.createPanel(options, referenceGroup);\n        referenceGroup.model.openPanel(panel, {\n          skipSetActive: options.inactive,\n          skipSetGroupActive: options.inactive,\n          index\n        });\n        referenceGroup.api.setSize({\n          width: initial === null || initial === void 0 ? void 0 : initial.width,\n          height: initial === null || initial === void 0 ? void 0 : initial.height\n        });\n        if (!options.inactive) {\n          this.doSetGroupAndPanelActive(referenceGroup);\n        }\n      } else {\n        const location = getGridLocation(referenceGroup.element);\n        const relativeLocation = getRelativeLocation(this.gridview.orientation, location, target);\n        const group = this.createGroupAtLocation(relativeLocation, this.orientationAtLocation(relativeLocation) === Orientation.VERTICAL ? initial === null || initial === void 0 ? void 0 : initial.height : initial === null || initial === void 0 ? void 0 : initial.width);\n        panel = this.createPanel(options, group);\n        group.model.openPanel(panel, {\n          skipSetActive: options.inactive,\n          skipSetGroupActive: options.inactive,\n          index\n        });\n        if (!options.inactive) {\n          this.doSetGroupAndPanelActive(group);\n        }\n      }\n    } else if (options.floating) {\n      const group = this.createGroup();\n      this._onDidAddGroup.fire(group);\n      const coordinates = typeof options.floating === 'object' && options.floating !== null ? options.floating : {};\n      this.addFloatingGroup(group, Object.assign(Object.assign({}, coordinates), {\n        inDragMode: false,\n        skipRemoveGroup: true,\n        skipActiveGroup: true\n      }));\n      panel = this.createPanel(options, group);\n      group.model.openPanel(panel, {\n        skipSetActive: options.inactive,\n        skipSetGroupActive: options.inactive,\n        index\n      });\n    } else {\n      const group = this.createGroupAtLocation([0], this.gridview.orientation === Orientation.VERTICAL ? initial === null || initial === void 0 ? void 0 : initial.height : initial === null || initial === void 0 ? void 0 : initial.width);\n      panel = this.createPanel(options, group);\n      group.model.openPanel(panel, {\n        skipSetActive: options.inactive,\n        skipSetGroupActive: options.inactive,\n        index\n      });\n      if (!options.inactive) {\n        this.doSetGroupAndPanelActive(group);\n      }\n    }\n    return panel;\n  }\n  removePanel(panel, options = {\n    removeEmptyGroup: true\n  }) {\n    const group = panel.group;\n    if (!group) {\n      throw new Error(`cannot remove panel ${panel.id}. it's missing a group.`);\n    }\n    group.model.removePanel(panel, {\n      skipSetActiveGroup: options.skipSetActiveGroup\n    });\n    if (!options.skipDispose) {\n      panel.group.model.renderContainer.detatch(panel);\n      panel.dispose();\n    }\n    if (group.size === 0 && options.removeEmptyGroup) {\n      this.removeGroup(group, {\n        skipActive: options.skipSetActiveGroup\n      });\n    }\n  }\n  createWatermarkComponent() {\n    if (this.options.createWatermarkComponent) {\n      return this.options.createWatermarkComponent();\n    }\n    return new Watermark();\n  }\n  updateWatermark() {\n    var _a, _b;\n    if (this.groups.filter(x => x.api.location.type === 'grid' && x.api.isVisible).length === 0) {\n      if (!this._watermark) {\n        this._watermark = this.createWatermarkComponent();\n        this._watermark.init({\n          containerApi: new DockviewApi(this)\n        });\n        const watermarkContainer = document.createElement('div');\n        watermarkContainer.className = 'dv-watermark-container';\n        addTestId(watermarkContainer, 'watermark-component');\n        watermarkContainer.appendChild(this._watermark.element);\n        this.gridview.element.appendChild(watermarkContainer);\n      }\n    } else if (this._watermark) {\n      this._watermark.element.parentElement.remove();\n      (_b = (_a = this._watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);\n      this._watermark = null;\n    }\n  }\n  addGroup(options) {\n    var _a;\n    if (options) {\n      let referenceGroup;\n      if (isGroupOptionsWithPanel(options)) {\n        const referencePanel = typeof options.referencePanel === 'string' ? this.panels.find(panel => panel.id === options.referencePanel) : options.referencePanel;\n        if (!referencePanel) {\n          throw new Error(`reference panel ${options.referencePanel} does not exist`);\n        }\n        referenceGroup = this.findGroup(referencePanel);\n        if (!referenceGroup) {\n          throw new Error(`reference group for reference panel ${options.referencePanel} does not exist`);\n        }\n      } else if (isGroupOptionsWithGroup(options)) {\n        referenceGroup = typeof options.referenceGroup === 'string' ? (_a = this._groups.get(options.referenceGroup)) === null || _a === void 0 ? void 0 : _a.value : options.referenceGroup;\n        if (!referenceGroup) {\n          throw new Error(`reference group ${options.referenceGroup} does not exist`);\n        }\n      } else {\n        const group = this.orthogonalize(directionToPosition(options.direction), options);\n        if (!options.skipSetActive) {\n          this.doSetGroupAndPanelActive(group);\n        }\n        return group;\n      }\n      const target = toTarget(options.direction || 'within');\n      const location = getGridLocation(referenceGroup.element);\n      const relativeLocation = getRelativeLocation(this.gridview.orientation, location, target);\n      const group = this.createGroup(options);\n      const size = this.getLocationOrientation(relativeLocation) === Orientation.VERTICAL ? options.initialHeight : options.initialWidth;\n      this.doAddGroup(group, relativeLocation, size);\n      if (!options.skipSetActive) {\n        this.doSetGroupAndPanelActive(group);\n      }\n      return group;\n    } else {\n      const group = this.createGroup(options);\n      this.doAddGroup(group);\n      this.doSetGroupAndPanelActive(group);\n      return group;\n    }\n  }\n  getLocationOrientation(location) {\n    return location.length % 2 == 0 && this.gridview.orientation === Orientation.HORIZONTAL ? Orientation.HORIZONTAL : Orientation.VERTICAL;\n  }\n  removeGroup(group, options) {\n    this.doRemoveGroup(group, options);\n  }\n  doRemoveGroup(group, options) {\n    var _a;\n    const panels = [...group.panels]; // reassign since group panels will mutate\n    if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {\n      for (const panel of panels) {\n        this.removePanel(panel, {\n          removeEmptyGroup: false,\n          skipDispose: (_a = options === null || options === void 0 ? void 0 : options.skipDispose) !== null && _a !== void 0 ? _a : false\n        });\n      }\n    }\n    const activePanel = this.activePanel;\n    if (group.api.location.type === 'floating') {\n      const floatingGroup = this._floatingGroups.find(_ => _.group === group);\n      if (floatingGroup) {\n        if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {\n          floatingGroup.group.dispose();\n          this._groups.delete(group.id);\n          this._onDidRemoveGroup.fire(group);\n        }\n        remove(this._floatingGroups, floatingGroup);\n        floatingGroup.dispose();\n        if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {\n          const groups = Array.from(this._groups.values());\n          this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : undefined);\n        }\n        return floatingGroup.group;\n      }\n      throw new Error('failed to find floating group');\n    }\n    if (group.api.location.type === 'popout') {\n      const selectedGroup = this._popoutGroups.find(_ => _.popoutGroup === group);\n      if (selectedGroup) {\n        if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {\n          if (!(options === null || options === void 0 ? void 0 : options.skipPopoutAssociated)) {\n            const refGroup = selectedGroup.referenceGroup ? this.getPanel(selectedGroup.referenceGroup) : undefined;\n            if (refGroup && refGroup.panels.length === 0) {\n              this.removeGroup(refGroup);\n            }\n          }\n          selectedGroup.popoutGroup.dispose();\n          this._groups.delete(group.id);\n          this._onDidRemoveGroup.fire(group);\n        }\n        remove(this._popoutGroups, selectedGroup);\n        const removedGroup = selectedGroup.disposable.dispose();\n        if (!(options === null || options === void 0 ? void 0 : options.skipPopoutReturn) && removedGroup) {\n          this.doAddGroup(removedGroup, [0]);\n          this.doSetGroupAndPanelActive(removedGroup);\n        }\n        if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {\n          const groups = Array.from(this._groups.values());\n          this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : undefined);\n        }\n        this.updateWatermark();\n        return selectedGroup.popoutGroup;\n      }\n      throw new Error('failed to find popout group');\n    }\n    const re = super.doRemoveGroup(group, options);\n    if (!(options === null || options === void 0 ? void 0 : options.skipActive)) {\n      if (this.activePanel !== activePanel) {\n        this._onDidActivePanelChange.fire(this.activePanel);\n      }\n    }\n    return re;\n  }\n  movingLock(func) {\n    const isMoving = this._moving;\n    try {\n      this._moving = true;\n      return func();\n    } finally {\n      this._moving = isMoving;\n    }\n  }\n  moveGroupOrPanel(options) {\n    var _a;\n    const destinationGroup = options.to.group;\n    const sourceGroupId = options.from.groupId;\n    const sourceItemId = options.from.panelId;\n    const destinationTarget = options.to.position;\n    const destinationIndex = options.to.index;\n    const sourceGroup = sourceGroupId ? (_a = this._groups.get(sourceGroupId)) === null || _a === void 0 ? void 0 : _a.value : undefined;\n    if (!sourceGroup) {\n      throw new Error(`Failed to find group id ${sourceGroupId}`);\n    }\n    if (sourceItemId === undefined) {\n      /**\n       * Moving an entire group into another group\n       */\n      this.moveGroup({\n        from: {\n          group: sourceGroup\n        },\n        to: {\n          group: destinationGroup,\n          position: destinationTarget\n        },\n        skipSetActive: options.skipSetActive\n      });\n      return;\n    }\n    if (!destinationTarget || destinationTarget === 'center') {\n      /**\n       * Dropping a panel within another group\n       */\n      const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {\n        skipSetActive: false,\n        skipSetActiveGroup: true\n      }));\n      if (!removedPanel) {\n        throw new Error(`No panel with id ${sourceItemId}`);\n      }\n      if (sourceGroup.model.size === 0) {\n        // remove the group and do not set a new group as active\n        this.doRemoveGroup(sourceGroup, {\n          skipActive: true\n        });\n      }\n      this.movingLock(() => {\n        var _a;\n        return destinationGroup.model.openPanel(removedPanel, {\n          index: destinationIndex,\n          skipSetActive: (_a = options.skipSetActive) !== null && _a !== void 0 ? _a : false,\n          skipSetGroupActive: true\n        });\n      });\n      if (!options.skipSetActive) {\n        this.doSetGroupAndPanelActive(destinationGroup);\n      }\n      this._onDidMovePanel.fire({\n        panel: removedPanel,\n        from: sourceGroup\n      });\n    } else {\n      /**\n       * Dropping a panel to the extremities of a group which will place that panel\n       * into an adjacent group\n       */\n      const referenceLocation = getGridLocation(destinationGroup.element);\n      const targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, destinationTarget);\n      if (sourceGroup.size < 2) {\n        /**\n         * If we are moving from a group which only has one panel left we will consider\n         * moving the group itself rather than moving the panel into a newly created group\n         */\n        const [targetParentLocation, to] = tail(targetLocation);\n        if (sourceGroup.api.location.type === 'grid') {\n          const sourceLocation = getGridLocation(sourceGroup.element);\n          const [sourceParentLocation, from] = tail(sourceLocation);\n          if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n            this._onDidMovePanel.fire({\n              panel: this.getGroupPanel(sourceItemId),\n              from: sourceGroup\n            });\n            return;\n          }\n        }\n        if (sourceGroup.api.location.type === 'popout') {\n          /**\n           * the source group is a popout group with a single panel\n           *\n           * 1. remove the panel from the group without triggering any events\n           * 2. remove the popout group\n           * 3. create a new group at the requested location and add that panel\n           */\n          const popoutGroup = this._popoutGroups.find(group => group.popoutGroup === sourceGroup);\n          const removedPanel = this.movingLock(() => popoutGroup.popoutGroup.model.removePanel(popoutGroup.popoutGroup.panels[0], {\n            skipSetActive: true,\n            skipSetActiveGroup: true\n          }));\n          this.doRemoveGroup(sourceGroup, {\n            skipActive: true\n          });\n          const newGroup = this.createGroupAtLocation(targetLocation);\n          this.movingLock(() => newGroup.model.openPanel(removedPanel));\n          this.doSetGroupAndPanelActive(newGroup);\n          this._onDidMovePanel.fire({\n            panel: this.getGroupPanel(sourceItemId),\n            from: sourceGroup\n          });\n          return;\n        }\n        // source group will become empty so delete the group\n        const targetGroup = this.movingLock(() => this.doRemoveGroup(sourceGroup, {\n          skipActive: true,\n          skipDispose: true\n        }));\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(destinationGroup.element);\n        const location = getRelativeLocation(this.gridview.orientation, updatedReferenceLocation, destinationTarget);\n        this.movingLock(() => this.doAddGroup(targetGroup, location));\n        this.doSetGroupAndPanelActive(targetGroup);\n        this._onDidMovePanel.fire({\n          panel: this.getGroupPanel(sourceItemId),\n          from: sourceGroup\n        });\n      } else {\n        /**\n         * The group we are removing from has many panels, we need to remove the panels we are moving,\n         * create a new group, add the panels to that new group and add the new group in an appropiate position\n         */\n        const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {\n          skipSetActive: false,\n          skipSetActiveGroup: true\n        }));\n        if (!removedPanel) {\n          throw new Error(`No panel with id ${sourceItemId}`);\n        }\n        const dropLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, destinationTarget);\n        const group = this.createGroupAtLocation(dropLocation);\n        this.movingLock(() => group.model.openPanel(removedPanel, {\n          skipSetGroupActive: true\n        }));\n        this.doSetGroupAndPanelActive(group);\n        this._onDidMovePanel.fire({\n          panel: removedPanel,\n          from: sourceGroup\n        });\n      }\n    }\n  }\n  moveGroup(options) {\n    const from = options.from.group;\n    const to = options.to.group;\n    const target = options.to.position;\n    if (target === 'center') {\n      const activePanel = from.activePanel;\n      const targetActivePanel = to.activePanel;\n      const panels = this.movingLock(() => [...from.panels].map(p => from.model.removePanel(p.id, {\n        skipSetActive: true\n      })));\n      if ((from === null || from === void 0 ? void 0 : from.model.size) === 0) {\n        this.doRemoveGroup(from, {\n          skipActive: true\n        });\n      }\n      this.movingLock(() => {\n        for (const panel of panels) {\n          to.model.openPanel(panel, {\n            skipSetActive: true,\n            // Always skip setting panels active during move\n            skipSetGroupActive: true\n          });\n        }\n      });\n      if (!options.skipSetActive) {\n        // Make the moved panel (from the source group) active\n        if (activePanel) {\n          this.doSetGroupAndPanelActive(to);\n        }\n      } else if (targetActivePanel) {\n        // Ensure the target group's original active panel remains active\n        to.model.openPanel(targetActivePanel, {\n          skipSetGroupActive: true\n        });\n      }\n    } else {\n      switch (from.api.location.type) {\n        case 'grid':\n          this.gridview.removeView(getGridLocation(from.element));\n          break;\n        case 'floating':\n          {\n            const selectedFloatingGroup = this._floatingGroups.find(x => x.group === from);\n            if (!selectedFloatingGroup) {\n              throw new Error('failed to find floating group');\n            }\n            selectedFloatingGroup.dispose();\n            break;\n          }\n        case 'popout':\n          {\n            const selectedPopoutGroup = this._popoutGroups.find(x => x.popoutGroup === from);\n            if (!selectedPopoutGroup) {\n              throw new Error('failed to find popout group');\n            }\n            // Remove from popout groups list to prevent automatic restoration\n            const index = this._popoutGroups.indexOf(selectedPopoutGroup);\n            if (index >= 0) {\n              this._popoutGroups.splice(index, 1);\n            }\n            // Clean up the reference group (ghost) if it exists and is hidden\n            if (selectedPopoutGroup.referenceGroup) {\n              const referenceGroup = this.getPanel(selectedPopoutGroup.referenceGroup);\n              if (referenceGroup && !referenceGroup.api.isVisible) {\n                this.doRemoveGroup(referenceGroup, {\n                  skipActive: true\n                });\n              }\n            }\n            // Manually dispose the window without triggering restoration\n            selectedPopoutGroup.window.dispose();\n            // Update group's location and containers for target\n            if (to.api.location.type === 'grid') {\n              from.model.renderContainer = this.overlayRenderContainer;\n              from.model.dropTargetContainer = this.rootDropTargetContainer;\n              from.model.location = {\n                type: 'grid'\n              };\n            } else if (to.api.location.type === 'floating') {\n              from.model.renderContainer = this.overlayRenderContainer;\n              from.model.dropTargetContainer = this.rootDropTargetContainer;\n              from.model.location = {\n                type: 'floating'\n              };\n            }\n            break;\n          }\n      }\n      // For moves to grid locations\n      if (to.api.location.type === 'grid') {\n        const referenceLocation = getGridLocation(to.element);\n        const dropLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, target);\n        // Add to grid for all moves targeting grid location\n        let size;\n        switch (this.gridview.orientation) {\n          case Orientation.VERTICAL:\n            size = referenceLocation.length % 2 == 0 ? from.api.width : from.api.height;\n            break;\n          case Orientation.HORIZONTAL:\n            size = referenceLocation.length % 2 == 0 ? from.api.height : from.api.width;\n            break;\n        }\n        this.gridview.addView(from, size, dropLocation);\n      } else if (to.api.location.type === 'floating') {\n        // For moves to floating locations, add as floating group\n        // Get the position/size from the target floating group\n        const targetFloatingGroup = this._floatingGroups.find(x => x.group === to);\n        if (targetFloatingGroup) {\n          const box = targetFloatingGroup.overlay.toJSON();\n          // Calculate position based on available properties\n          let left, top;\n          if ('left' in box) {\n            left = box.left + 50;\n          } else if ('right' in box) {\n            left = Math.max(0, box.right - box.width - 50);\n          } else {\n            left = 50; // Default fallback\n          }\n          if ('top' in box) {\n            top = box.top + 50;\n          } else if ('bottom' in box) {\n            top = Math.max(0, box.bottom - box.height - 50);\n          } else {\n            top = 50; // Default fallback\n          }\n          this.addFloatingGroup(from, {\n            height: box.height,\n            width: box.width,\n            position: {\n              left,\n              top\n            }\n          });\n        }\n      }\n    }\n    from.panels.forEach(panel => {\n      this._onDidMovePanel.fire({\n        panel,\n        from\n      });\n    });\n    if (!options.skipSetActive) {\n      this.doSetGroupAndPanelActive(from);\n    }\n  }\n  doSetGroupActive(group) {\n    super.doSetGroupActive(group);\n    const activePanel = this.activePanel;\n    if (!this._moving && activePanel !== this._onDidActivePanelChange.value) {\n      this._onDidActivePanelChange.fire(activePanel);\n    }\n  }\n  doSetGroupAndPanelActive(group) {\n    super.doSetGroupActive(group);\n    const activePanel = this.activePanel;\n    if (group && this.hasMaximizedGroup() && !this.isMaximizedGroup(group)) {\n      this.exitMaximizedGroup();\n    }\n    if (!this._moving && activePanel !== this._onDidActivePanelChange.value) {\n      this._onDidActivePanelChange.fire(activePanel);\n    }\n  }\n  getNextGroupId() {\n    let id = this.nextGroupId.next();\n    while (this._groups.has(id)) {\n      id = this.nextGroupId.next();\n    }\n    return id;\n  }\n  createGroup(options) {\n    if (!options) {\n      options = {};\n    }\n    let id = options === null || options === void 0 ? void 0 : options.id;\n    if (id && this._groups.has(options.id)) {\n      console.warn(`dockview: Duplicate group id ${options === null || options === void 0 ? void 0 : options.id}. reassigning group id to avoid errors`);\n      id = undefined;\n    }\n    if (!id) {\n      id = this.nextGroupId.next();\n      while (this._groups.has(id)) {\n        id = this.nextGroupId.next();\n      }\n    }\n    const view = new DockviewGroupPanel(this, id, options);\n    view.init({\n      params: {},\n      accessor: this\n    });\n    if (!this._groups.has(view.id)) {\n      const disposable = new CompositeDisposable(view.model.onTabDragStart(event => {\n        this._onWillDragPanel.fire(event);\n      }), view.model.onGroupDragStart(event => {\n        this._onWillDragGroup.fire(event);\n      }), view.model.onMove(event => {\n        const {\n          groupId,\n          itemId,\n          target,\n          index\n        } = event;\n        this.moveGroupOrPanel({\n          from: {\n            groupId: groupId,\n            panelId: itemId\n          },\n          to: {\n            group: view,\n            position: target,\n            index\n          }\n        });\n      }), view.model.onDidDrop(event => {\n        this._onDidDrop.fire(event);\n      }), view.model.onWillDrop(event => {\n        this._onWillDrop.fire(event);\n      }), view.model.onWillShowOverlay(event => {\n        if (this.options.disableDnd) {\n          event.preventDefault();\n          return;\n        }\n        this._onWillShowOverlay.fire(event);\n      }), view.model.onUnhandledDragOverEvent(event => {\n        this._onUnhandledDragOverEvent.fire(event);\n      }), view.model.onDidAddPanel(event => {\n        if (this._moving) {\n          return;\n        }\n        this._onDidAddPanel.fire(event.panel);\n      }), view.model.onDidRemovePanel(event => {\n        if (this._moving) {\n          return;\n        }\n        this._onDidRemovePanel.fire(event.panel);\n      }), view.model.onDidActivePanelChange(event => {\n        if (this._moving) {\n          return;\n        }\n        if (event.panel !== this.activePanel) {\n          return;\n        }\n        if (this._onDidActivePanelChange.value !== event.panel) {\n          this._onDidActivePanelChange.fire(event.panel);\n        }\n      }), Event.any(view.model.onDidPanelTitleChange, view.model.onDidPanelParametersChange)(() => {\n        this._bufferOnDidLayoutChange.fire();\n      }));\n      this._groups.set(view.id, {\n        value: view,\n        disposable\n      });\n    }\n    // TODO: must be called after the above listeners have been setup, not an ideal pattern\n    view.initialize();\n    return view;\n  }\n  createPanel(options, group) {\n    var _a, _b, _c;\n    const contentComponent = options.component;\n    const tabComponent = (_a = options.tabComponent) !== null && _a !== void 0 ? _a : this.options.defaultTabComponent;\n    const view = new DockviewPanelModel(this, options.id, contentComponent, tabComponent);\n    const panel = new DockviewPanel(options.id, contentComponent, tabComponent, this, this._api, group, view, {\n      renderer: options.renderer,\n      minimumWidth: options.minimumWidth,\n      minimumHeight: options.minimumHeight,\n      maximumWidth: options.maximumWidth,\n      maximumHeight: options.maximumHeight\n    });\n    panel.init({\n      title: (_b = options.title) !== null && _b !== void 0 ? _b : options.id,\n      params: (_c = options === null || options === void 0 ? void 0 : options.params) !== null && _c !== void 0 ? _c : {}\n    });\n    return panel;\n  }\n  createGroupAtLocation(location, size, options) {\n    const group = this.createGroup(options);\n    this.doAddGroup(group, location, size);\n    return group;\n  }\n  findGroup(panel) {\n    var _a;\n    return (_a = Array.from(this._groups.values()).find(group => group.value.model.containsPanel(panel))) === null || _a === void 0 ? void 0 : _a.value;\n  }\n  orientationAtLocation(location) {\n    const rootOrientation = this.gridview.orientation;\n    return location.length % 2 == 1 ? rootOrientation : orthogonal(rootOrientation);\n  }\n  updateDropTargetModel(options) {\n    if ('dndEdges' in options) {\n      this._rootDropTarget.disabled = typeof options.dndEdges === 'boolean' && options.dndEdges === false;\n      if (typeof options.dndEdges === 'object' && options.dndEdges !== null) {\n        this._rootDropTarget.setOverlayModel(options.dndEdges);\n      } else {\n        this._rootDropTarget.setOverlayModel(DEFAULT_ROOT_OVERLAY_MODEL);\n      }\n    }\n    if ('rootOverlayModel' in options) {\n      this.updateDropTargetModel({\n        dndEdges: options.dndEdges\n      });\n    }\n  }\n  updateTheme() {\n    var _a, _b;\n    const theme = (_a = this._options.theme) !== null && _a !== void 0 ? _a : themeAbyss;\n    this._themeClassnames.setClassNames(theme.className);\n    this.gridview.margin = (_b = theme.gap) !== null && _b !== void 0 ? _b : 0;\n    switch (theme.dndOverlayMounting) {\n      case 'absolute':\n        this.rootDropTargetContainer.disabled = false;\n        break;\n      case 'relative':\n      default:\n        this.rootDropTargetContainer.disabled = true;\n        break;\n    }\n  }\n}","map":{"version":3,"names":["getRelativeLocation","getGridLocation","orthogonal","directionToPosition","Droptarget","tail","sequenceEquals","remove","DockviewPanel","CompositeDisposable","Disposable","Event","Emitter","addDisposableListener","Watermark","sequentialNumberGenerator","DefaultDockviewDeserialzier","DockviewUnhandledDragOverEvent","isGroupOptionsWithGroup","isGroupOptionsWithPanel","isPanelOptionsWithGroup","isPanelOptionsWithPanel","BaseGrid","toTarget","DockviewApi","Orientation","DockviewDidDropEvent","DockviewWillDropEvent","WillShowOverlayLocationEvent","DockviewGroupPanel","DockviewPanelModel","getPanelData","Overlay","addTestId","Classnames","getDockviewTheme","onDidWindowResizeEnd","onDidWindowMoveEnd","toggleClass","watchElementResize","DockviewFloatingGroupPanel","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DEFAULT_FLOATING_GROUP_POSITION","OverlayRenderContainer","PopoutWindow","StrictEventsSequencing","PopupService","DropTargetAnchorContainer","themeAbyss","DEFAULT_ROOT_OVERLAY_MODEL","activationSize","type","value","size","moveGroupWithoutDestroying","options","activePanel","from","panels","map","panel","removedPanel","model","removePanel","renderContainer","detatch","forEach","to","openPanel","skipSetActive","skipSetGroupActive","DockviewComponent","orientation","gridview","totalPanels","length","groups","flatMap","group","_options","activeGroup","undefined","renderer","_a","defaultRenderer","api","_api","floatingGroups","_floatingGroups","constructor","container","_b","_c","proportionalLayout","HORIZONTAL","styles","hideBorders","separatorBorder","disableAutoResizing","locked","margin","theme","gap","className","nextGroupId","_deserializer","_watermark","_onWillDragPanel","onWillDragPanel","event","_onWillDragGroup","onWillDragGroup","_onDidDrop","onDidDrop","_onWillDrop","onWillDrop","_onWillShowOverlay","onWillShowOverlay","_onUnhandledDragOverEvent","onUnhandledDragOverEvent","_onDidRemovePanel","onDidRemovePanel","_onDidAddPanel","onDidAddPanel","_onDidPopoutGroupSizeChange","onDidPopoutGroupSizeChange","_onDidPopoutGroupPositionChange","onDidPopoutGroupPositionChange","_onDidOpenPopoutWindowFail","onDidOpenPopoutWindowFail","_onDidLayoutFromJSON","onDidLayoutFromJSON","_onDidActivePanelChange","replay","onDidActivePanelChange","_onDidMovePanel","onDidMovePanel","_onDidMaximizedGroupChange","onDidMaximizedGroupChange","_popoutGroups","_onDidRemoveGroup","onDidRemoveGroup","_onDidAddGroup","onDidAddGroup","_onDidOptionsChange","onDidOptionsChange","_onDidActiveGroupChange","onDidActiveGroupChange","_moving","popupService","element","_themeClassnames","rootDropTargetContainer","disabled","overlayRenderContainer","_rootDropTarget","canDisplayOverlay","position","data","viewId","id","firedEvent","fire","isAccepted","acceptedTargetZones","overlayModel","rootOverlayModel","getOverrideTarget","updateDropTargetModel","debug","updateTheme","updateWatermark","addDisposables","onDidViewVisibilityChangeMicroTaskQueue","onDidAdd","onDidRemove","onDidActiveChange","onDidMaximizedChange","isMaximized","any","_bufferOnDidLayoutChange","dispose","disposable","kind","getData","onDrop","willDropEvent","nativeEvent","defaultPrevented","moveGroupOrPanel","groupId","panelId","orthogonalize","setVisible","visible","location","item","find","floatingGroup","overlay","_onDidVisibilityChange","isVisible","console","warn","addPopoutGroup","itemToPopout","_d","_e","getBox","getBoundingClientRect","box","overridePopoutGroup","getNextGroupId","_window","url","popoutUrl","left","window","screenX","top","screenY","width","height","onDidOpen","onWillClose","popoutWindowDisposable","onDidClose","open","then","popoutContainer","isDisposed","referenceGroup","referenceLocation","isGroupAddedToDom","parentElement","createGroup","error","movingLock","gready","document","createElement","layout","innerWidth","innerHeight","floatingBox","toJSON","removeGroup","classList","add","style","overflow","appendChild","anchor","dropTargetContainer","getWindow","doSetGroupAndPanelActive","isActive","focus","onWillFocus","returnedGroup","isValidReferenceGroup","getPanel","popoutGroup","_onDidWindowPositionChange","doRemoveGroup","skipPopoutAssociated","alreadyRemoved","p","addFloatingGroup","skipDispose","skipActive","skipPopoutReturn","doAddGroup","push","catch","err","removeEmptyGroup","skipSetActiveGroup","popoutReferenceGroupId","_","popoutReferenceGroup","skip","skipRemoveGroup","getAnchoredBox","result","Math","max","right","bottom","x","y","anchoredBox","Object","assign","content","minimumInViewportWidth","floatingGroupBounds","minimumWidthWithinViewport","minimumInViewportHeight","minimumHeightWithinViewport","el","querySelector","Error","setupDrag","inDragMode","floatingGroupPanel","bringToFront","entry","contentRect","onDidChange","onDidChangeEnd","setBounds","skipActiveGroup","insertOrthogonalSplitviewAtRoot","VERTICAL","createGroupAtLocation","updateOptions","oldDisableDnd","disableDnd","newDisableDnd","updateDragAndDropState","forceResize","floating","getGroupPanel","setActivePanel","moveToNext","includePanel","suppressRoll","next","view","moveToPrevious","previous","serialize","reduce","collection","floats","popoutGroups","gridReferenceGroup","dimensions","grid","fromJSON","clear","root","Array","isArray","createGroupFromSerializedState","hideHeader","views","activeView","createdPanels","child","i","deserialize","node","serializedFloatingGroups","serializedFloatingGroup","serializedPopoutGroups","serializedPopoutGroup","_groups","delete","values","hasActiveGroup","closeAllGroups","entries","closeAllPanels","addPanel","initial","initialWidth","initialHeight","index","referencePanel","findGroup","get","direction","createPanel","inactive","setSize","target","floatingGroupOptions","relativeLocation","orientationAtLocation","coordinates","createWatermarkComponent","filter","init","containerApi","watermarkContainer","call","addGroup","getLocationOrientation","_activeGroup","selectedGroup","refGroup","removedGroup","re","func","isMoving","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","moveGroup","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","moveView","newGroup","targetGroup","updatedReferenceLocation","dropLocation","targetActivePanel","removeView","selectedFloatingGroup","selectedPopoutGroup","indexOf","splice","addView","targetFloatingGroup","doSetGroupActive","hasMaximizedGroup","isMaximizedGroup","exitMaximizedGroup","has","params","accessor","onTabDragStart","onGroupDragStart","onMove","itemId","preventDefault","onDidPanelTitleChange","onDidPanelParametersChange","set","initialize","contentComponent","component","tabComponent","defaultTabComponent","minimumWidth","minimumHeight","maximumWidth","maximumHeight","title","containsPanel","rootOrientation","dndEdges","setOverlayModel","setClassNames","dndOverlayMounting"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js"],"sourcesContent":["import { getRelativeLocation, getGridLocation, orthogonal, } from '../gridview/gridview';\nimport { directionToPosition, Droptarget, } from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable, Disposable } from '../lifecycle';\nimport { Event, Emitter, addDisposableListener } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { DockviewUnhandledDragOverEvent, isGroupOptionsWithGroup, isGroupOptionsWithPanel, isPanelOptionsWithGroup, isPanelOptionsWithPanel, } from './options';\nimport { BaseGrid, toTarget, } from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation } from '../splitview/splitview';\nimport { DockviewDidDropEvent, DockviewWillDropEvent, } from './dockviewGroupPanelModel';\nimport { WillShowOverlayLocationEvent } from './events';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Overlay } from '../overlay/overlay';\nimport { addTestId, Classnames, getDockviewTheme, onDidWindowResizeEnd, onDidWindowMoveEnd, toggleClass, watchElementResize, } from '../dom';\nimport { DockviewFloatingGroupPanel } from './dockviewFloatingGroupPanel';\nimport { DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE, DEFAULT_FLOATING_GROUP_POSITION, } from '../constants';\nimport { OverlayRenderContainer, } from '../overlay/overlayRenderContainer';\nimport { PopoutWindow } from '../popoutWindow';\nimport { StrictEventsSequencing } from './strictEventsSequencing';\nimport { PopupService } from './components/popupService';\nimport { DropTargetAnchorContainer } from '../dnd/dropTargetAnchorContainer';\nimport { themeAbyss } from './theme';\nconst DEFAULT_ROOT_OVERLAY_MODEL = {\n    activationSize: { type: 'pixels', value: 10 },\n    size: { type: 'pixels', value: 20 },\n};\nfunction moveGroupWithoutDestroying(options) {\n    const activePanel = options.from.activePanel;\n    const panels = [...options.from.panels].map((panel) => {\n        const removedPanel = options.from.model.removePanel(panel);\n        options.from.model.renderContainer.detatch(panel);\n        return removedPanel;\n    });\n    panels.forEach((panel) => {\n        options.to.model.openPanel(panel, {\n            skipSetActive: activePanel !== panel,\n            skipSetGroupActive: true,\n        });\n    });\n}\nexport class DockviewComponent extends BaseGrid {\n    get orientation() {\n        return this.gridview.orientation;\n    }\n    get totalPanels() {\n        return this.panels.length;\n    }\n    get panels() {\n        return this.groups.flatMap((group) => group.panels);\n    }\n    get options() {\n        return this._options;\n    }\n    get activePanel() {\n        const activeGroup = this.activeGroup;\n        if (!activeGroup) {\n            return undefined;\n        }\n        return activeGroup.activePanel;\n    }\n    get renderer() {\n        var _a;\n        return (_a = this.options.defaultRenderer) !== null && _a !== void 0 ? _a : 'onlyWhenVisible';\n    }\n    get api() {\n        return this._api;\n    }\n    get floatingGroups() {\n        return this._floatingGroups;\n    }\n    constructor(container, options) {\n        var _a, _b, _c;\n        super(container, {\n            proportionalLayout: true,\n            orientation: Orientation.HORIZONTAL,\n            styles: options.hideBorders\n                ? { separatorBorder: 'transparent' }\n                : undefined,\n            disableAutoResizing: options.disableAutoResizing,\n            locked: options.locked,\n            margin: (_b = (_a = options.theme) === null || _a === void 0 ? void 0 : _a.gap) !== null && _b !== void 0 ? _b : 0,\n            className: options.className,\n        });\n        this.nextGroupId = sequentialNumberGenerator();\n        this._deserializer = new DefaultDockviewDeserialzier(this);\n        this._watermark = null;\n        this._onWillDragPanel = new Emitter();\n        this.onWillDragPanel = this._onWillDragPanel.event;\n        this._onWillDragGroup = new Emitter();\n        this.onWillDragGroup = this._onWillDragGroup.event;\n        this._onDidDrop = new Emitter();\n        this.onDidDrop = this._onDidDrop.event;\n        this._onWillDrop = new Emitter();\n        this.onWillDrop = this._onWillDrop.event;\n        this._onWillShowOverlay = new Emitter();\n        this.onWillShowOverlay = this._onWillShowOverlay.event;\n        this._onUnhandledDragOverEvent = new Emitter();\n        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;\n        this._onDidRemovePanel = new Emitter();\n        this.onDidRemovePanel = this._onDidRemovePanel.event;\n        this._onDidAddPanel = new Emitter();\n        this.onDidAddPanel = this._onDidAddPanel.event;\n        this._onDidPopoutGroupSizeChange = new Emitter();\n        this.onDidPopoutGroupSizeChange = this._onDidPopoutGroupSizeChange.event;\n        this._onDidPopoutGroupPositionChange = new Emitter();\n        this.onDidPopoutGroupPositionChange = this._onDidPopoutGroupPositionChange.event;\n        this._onDidOpenPopoutWindowFail = new Emitter();\n        this.onDidOpenPopoutWindowFail = this._onDidOpenPopoutWindowFail.event;\n        this._onDidLayoutFromJSON = new Emitter();\n        this.onDidLayoutFromJSON = this._onDidLayoutFromJSON.event;\n        this._onDidActivePanelChange = new Emitter({ replay: true });\n        this.onDidActivePanelChange = this._onDidActivePanelChange.event;\n        this._onDidMovePanel = new Emitter();\n        this.onDidMovePanel = this._onDidMovePanel.event;\n        this._onDidMaximizedGroupChange = new Emitter();\n        this.onDidMaximizedGroupChange = this._onDidMaximizedGroupChange.event;\n        this._floatingGroups = [];\n        this._popoutGroups = [];\n        this._onDidRemoveGroup = new Emitter();\n        this.onDidRemoveGroup = this._onDidRemoveGroup.event;\n        this._onDidAddGroup = new Emitter();\n        this.onDidAddGroup = this._onDidAddGroup.event;\n        this._onDidOptionsChange = new Emitter();\n        this.onDidOptionsChange = this._onDidOptionsChange.event;\n        this._onDidActiveGroupChange = new Emitter();\n        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n        this._moving = false;\n        this._options = options;\n        this.popupService = new PopupService(this.element);\n        this._themeClassnames = new Classnames(this.element);\n        this._api = new DockviewApi(this);\n        this.rootDropTargetContainer = new DropTargetAnchorContainer(this.element, { disabled: true });\n        this.overlayRenderContainer = new OverlayRenderContainer(this.gridview.element, this);\n        this._rootDropTarget = new Droptarget(this.element, {\n            className: 'dv-drop-target-edge',\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n                    return true;\n                }\n                if (position === 'center' && this.gridview.length !== 0) {\n                    /**\n                     * for external events only show the four-corner drag overlays, disable\n                     * the center position so that external drag events can fall through to the group\n                     * and panel drop target handlers\n                     */\n                    return false;\n                }\n                const firedEvent = new DockviewUnhandledDragOverEvent(event, 'edge', position, getPanelData);\n                this._onUnhandledDragOverEvent.fire(firedEvent);\n                return firedEvent.isAccepted;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel: (_c = options.rootOverlayModel) !== null && _c !== void 0 ? _c : DEFAULT_ROOT_OVERLAY_MODEL,\n            getOverrideTarget: () => { var _a; return (_a = this.rootDropTargetContainer) === null || _a === void 0 ? void 0 : _a.model; },\n        });\n        this.updateDropTargetModel(options);\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n        toggleClass(this.element, 'dv-debug', !!options.debug);\n        this.updateTheme();\n        this.updateWatermark();\n        if (options.debug) {\n            this.addDisposables(new StrictEventsSequencing(this));\n        }\n        this.addDisposables(this.rootDropTargetContainer, this.overlayRenderContainer, this._onWillDragPanel, this._onWillDragGroup, this._onWillShowOverlay, this._onDidActivePanelChange, this._onDidAddPanel, this._onDidRemovePanel, this._onDidLayoutFromJSON, this._onDidDrop, this._onWillDrop, this._onDidMovePanel, this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this._onUnhandledDragOverEvent, this._onDidMaximizedGroupChange, this._onDidOptionsChange, this._onDidPopoutGroupSizeChange, this._onDidPopoutGroupPositionChange, this._onDidOpenPopoutWindowFail, this.onDidViewVisibilityChangeMicroTaskQueue(() => {\n            this.updateWatermark();\n        }), this.onDidAdd((event) => {\n            if (!this._moving) {\n                this._onDidAddGroup.fire(event);\n            }\n        }), this.onDidRemove((event) => {\n            if (!this._moving) {\n                this._onDidRemoveGroup.fire(event);\n            }\n        }), this.onDidActiveChange((event) => {\n            if (!this._moving) {\n                this._onDidActiveGroupChange.fire(event);\n            }\n        }), this.onDidMaximizedChange((event) => {\n            this._onDidMaximizedGroupChange.fire({\n                group: event.panel,\n                isMaximized: event.isMaximized,\n            });\n        }), Event.any(this.onDidAdd, this.onDidRemove)(() => {\n            this.updateWatermark();\n        }), Event.any(this.onDidAddPanel, this.onDidRemovePanel, this.onDidAddGroup, this.onDidRemove, this.onDidMovePanel, this.onDidActivePanelChange, this.onDidPopoutGroupPositionChange, this.onDidPopoutGroupSizeChange)(() => {\n            this._bufferOnDidLayoutChange.fire();\n        }), Disposable.from(() => {\n            // iterate over a copy of the array since .dispose() mutates the original array\n            for (const group of [...this._floatingGroups]) {\n                group.dispose();\n            }\n            // iterate over a copy of the array since .dispose() mutates the original array\n            for (const group of [...this._popoutGroups]) {\n                group.disposable.dispose();\n            }\n        }), this._rootDropTarget, this._rootDropTarget.onWillShowOverlay((event) => {\n            if (this.gridview.length > 0 && event.position === 'center') {\n                // option only available when no panels in primary grid\n                return;\n            }\n            this._onWillShowOverlay.fire(new WillShowOverlayLocationEvent(event, {\n                kind: 'edge',\n                panel: undefined,\n                api: this._api,\n                group: undefined,\n                getData: getPanelData,\n            }));\n        }), this._rootDropTarget.onDrop((event) => {\n            var _a;\n            const willDropEvent = new DockviewWillDropEvent({\n                nativeEvent: event.nativeEvent,\n                position: event.position,\n                panel: undefined,\n                api: this._api,\n                group: undefined,\n                getData: getPanelData,\n                kind: 'edge',\n            });\n            this._onWillDrop.fire(willDropEvent);\n            if (willDropEvent.defaultPrevented) {\n                return;\n            }\n            const data = getPanelData();\n            if (data) {\n                this.moveGroupOrPanel({\n                    from: {\n                        groupId: data.groupId,\n                        panelId: (_a = data.panelId) !== null && _a !== void 0 ? _a : undefined,\n                    },\n                    to: {\n                        group: this.orthogonalize(event.position),\n                        position: 'center',\n                    },\n                });\n            }\n            else {\n                this._onDidDrop.fire(new DockviewDidDropEvent({\n                    nativeEvent: event.nativeEvent,\n                    position: event.position,\n                    panel: undefined,\n                    api: this._api,\n                    group: undefined,\n                    getData: getPanelData,\n                }));\n            }\n        }), this._rootDropTarget);\n    }\n    setVisible(panel, visible) {\n        switch (panel.api.location.type) {\n            case 'grid':\n                super.setVisible(panel, visible);\n                break;\n            case 'floating': {\n                const item = this.floatingGroups.find((floatingGroup) => floatingGroup.group === panel);\n                if (item) {\n                    item.overlay.setVisible(visible);\n                    panel.api._onDidVisibilityChange.fire({\n                        isVisible: visible,\n                    });\n                }\n                break;\n            }\n            case 'popout':\n                console.warn('dockview: You cannot hide a group that is in a popout window');\n                break;\n        }\n    }\n    addPopoutGroup(itemToPopout, options) {\n        var _a, _b, _c, _d, _e;\n        if (itemToPopout instanceof DockviewPanel &&\n            itemToPopout.group.size === 1) {\n            return this.addPopoutGroup(itemToPopout.group, options);\n        }\n        const theme = getDockviewTheme(this.gridview.element);\n        const element = this.element;\n        function getBox() {\n            if (options === null || options === void 0 ? void 0 : options.position) {\n                return options.position;\n            }\n            if (itemToPopout instanceof DockviewGroupPanel) {\n                return itemToPopout.element.getBoundingClientRect();\n            }\n            if (itemToPopout.group) {\n                return itemToPopout.group.element.getBoundingClientRect();\n            }\n            return element.getBoundingClientRect();\n        }\n        const box = getBox();\n        const groupId = (_b = (_a = options === null || options === void 0 ? void 0 : options.overridePopoutGroup) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : this.getNextGroupId();\n        const _window = new PopoutWindow(`${this.id}-${groupId}`, // unique id\n        theme !== null && theme !== void 0 ? theme : '', {\n            url: (_e = (_c = options === null || options === void 0 ? void 0 : options.popoutUrl) !== null && _c !== void 0 ? _c : (_d = this.options) === null || _d === void 0 ? void 0 : _d.popoutUrl) !== null && _e !== void 0 ? _e : '/popout.html',\n            left: window.screenX + box.left,\n            top: window.screenY + box.top,\n            width: box.width,\n            height: box.height,\n            onDidOpen: options === null || options === void 0 ? void 0 : options.onDidOpen,\n            onWillClose: options === null || options === void 0 ? void 0 : options.onWillClose,\n        });\n        const popoutWindowDisposable = new CompositeDisposable(_window, _window.onDidClose(() => {\n            popoutWindowDisposable.dispose();\n        }));\n        return _window\n            .open()\n            .then((popoutContainer) => {\n            var _a;\n            if (_window.isDisposed) {\n                return false;\n            }\n            const referenceGroup = (options === null || options === void 0 ? void 0 : options.referenceGroup)\n                ? options.referenceGroup\n                : itemToPopout instanceof DockviewPanel\n                    ? itemToPopout.group\n                    : itemToPopout;\n            const referenceLocation = itemToPopout.api.location.type;\n            /**\n             * The group that is being added doesn't already exist within the DOM, the most likely occurrence\n             * of this case is when being called from the `fromJSON(...)` method\n             */\n            const isGroupAddedToDom = referenceGroup.element.parentElement !== null;\n            let group;\n            if (!isGroupAddedToDom) {\n                group = referenceGroup;\n            }\n            else if (options === null || options === void 0 ? void 0 : options.overridePopoutGroup) {\n                group = options.overridePopoutGroup;\n            }\n            else {\n                group = this.createGroup({ id: groupId });\n                if (popoutContainer) {\n                    this._onDidAddGroup.fire(group);\n                }\n            }\n            if (popoutContainer === null) {\n                console.error('dockview: failed to create popout. perhaps you need to allow pop-ups for this website');\n                popoutWindowDisposable.dispose();\n                this._onDidOpenPopoutWindowFail.fire();\n                // if the popout window was blocked, we need to move the group back to the reference group\n                // and set it to visible\n                this.movingLock(() => moveGroupWithoutDestroying({\n                    from: group,\n                    to: referenceGroup,\n                }));\n                if (!referenceGroup.api.isVisible) {\n                    referenceGroup.api.setVisible(true);\n                }\n                return false;\n            }\n            const gready = document.createElement('div');\n            gready.className = 'dv-overlay-render-container';\n            const overlayRenderContainer = new OverlayRenderContainer(gready, this);\n            group.model.renderContainer = overlayRenderContainer;\n            group.layout(_window.window.innerWidth, _window.window.innerHeight);\n            let floatingBox;\n            if (!(options === null || options === void 0 ? void 0 : options.overridePopoutGroup) && isGroupAddedToDom) {\n                if (itemToPopout instanceof DockviewPanel) {\n                    this.movingLock(() => {\n                        const panel = referenceGroup.model.removePanel(itemToPopout);\n                        group.model.openPanel(panel);\n                    });\n                }\n                else {\n                    this.movingLock(() => moveGroupWithoutDestroying({\n                        from: referenceGroup,\n                        to: group,\n                    }));\n                    switch (referenceLocation) {\n                        case 'grid':\n                            referenceGroup.api.setVisible(false);\n                            break;\n                        case 'floating':\n                        case 'popout':\n                            floatingBox = (_a = this._floatingGroups\n                                .find((value) => value.group.api.id ===\n                                itemToPopout.api.id)) === null || _a === void 0 ? void 0 : _a.overlay.toJSON();\n                            this.removeGroup(referenceGroup);\n                            break;\n                    }\n                }\n            }\n            popoutContainer.classList.add('dv-dockview');\n            popoutContainer.style.overflow = 'hidden';\n            popoutContainer.appendChild(gready);\n            popoutContainer.appendChild(group.element);\n            const anchor = document.createElement('div');\n            const dropTargetContainer = new DropTargetAnchorContainer(anchor, { disabled: this.rootDropTargetContainer.disabled });\n            popoutContainer.appendChild(anchor);\n            group.model.dropTargetContainer = dropTargetContainer;\n            group.model.location = {\n                type: 'popout',\n                getWindow: () => _window.window,\n                popoutUrl: options === null || options === void 0 ? void 0 : options.popoutUrl,\n            };\n            if (isGroupAddedToDom &&\n                itemToPopout.api.location.type === 'grid') {\n                itemToPopout.api.setVisible(false);\n            }\n            this.doSetGroupAndPanelActive(group);\n            popoutWindowDisposable.addDisposables(group.api.onDidActiveChange((event) => {\n                var _a;\n                if (event.isActive) {\n                    (_a = _window.window) === null || _a === void 0 ? void 0 : _a.focus();\n                }\n            }), group.api.onWillFocus(() => {\n                var _a;\n                (_a = _window.window) === null || _a === void 0 ? void 0 : _a.focus();\n            }));\n            let returnedGroup;\n            const isValidReferenceGroup = isGroupAddedToDom &&\n                referenceGroup &&\n                this.getPanel(referenceGroup.id);\n            const value = {\n                window: _window,\n                popoutGroup: group,\n                referenceGroup: isValidReferenceGroup\n                    ? referenceGroup.id\n                    : undefined,\n                disposable: {\n                    dispose: () => {\n                        popoutWindowDisposable.dispose();\n                        return returnedGroup;\n                    },\n                },\n            };\n            const _onDidWindowPositionChange = onDidWindowMoveEnd(_window.window);\n            popoutWindowDisposable.addDisposables(_onDidWindowPositionChange, onDidWindowResizeEnd(_window.window, () => {\n                this._onDidPopoutGroupSizeChange.fire({\n                    width: _window.window.innerWidth,\n                    height: _window.window.innerHeight,\n                    group,\n                });\n            }), _onDidWindowPositionChange.event(() => {\n                this._onDidPopoutGroupPositionChange.fire({\n                    screenX: _window.window.screenX,\n                    screenY: _window.window.screenX,\n                    group,\n                });\n            }), \n            /**\n             * ResizeObserver seems slow here, I do not know why but we don't need it\n             * since we can reply on the window resize event as we will occupy the full\n             * window dimensions\n             */\n            addDisposableListener(_window.window, 'resize', () => {\n                group.layout(_window.window.innerWidth, _window.window.innerHeight);\n            }), overlayRenderContainer, Disposable.from(() => {\n                if (this.isDisposed) {\n                    return; // cleanup may run after instance is disposed\n                }\n                if (isGroupAddedToDom &&\n                    this.getPanel(referenceGroup.id)) {\n                    this.movingLock(() => moveGroupWithoutDestroying({\n                        from: group,\n                        to: referenceGroup,\n                    }));\n                    if (!referenceGroup.api.isVisible) {\n                        referenceGroup.api.setVisible(true);\n                    }\n                    if (this.getPanel(group.id)) {\n                        this.doRemoveGroup(group, {\n                            skipPopoutAssociated: true,\n                        });\n                    }\n                }\n                else if (this.getPanel(group.id)) {\n                    group.model.renderContainer =\n                        this.overlayRenderContainer;\n                    group.model.dropTargetContainer =\n                        this.rootDropTargetContainer;\n                    returnedGroup = group;\n                    const alreadyRemoved = !this._popoutGroups.find((p) => p.popoutGroup === group);\n                    if (alreadyRemoved) {\n                        /**\n                         * If this popout group was explicitly removed then we shouldn't run the additional\n                         * steps. To tell if the running of this disposable is the result of this popout group\n                         * being explicitly removed we can check if this popout group is still referenced in\n                         * the `this._popoutGroups` list.\n                         */\n                        return;\n                    }\n                    if (floatingBox) {\n                        this.addFloatingGroup(group, {\n                            height: floatingBox.height,\n                            width: floatingBox.width,\n                            position: floatingBox,\n                        });\n                    }\n                    else {\n                        this.doRemoveGroup(group, {\n                            skipDispose: true,\n                            skipActive: true,\n                            skipPopoutReturn: true,\n                        });\n                        group.model.location = { type: 'grid' };\n                        this.movingLock(() => {\n                            // suppress group add events since the group already exists\n                            this.doAddGroup(group, [0]);\n                        });\n                    }\n                    this.doSetGroupAndPanelActive(group);\n                }\n            }));\n            this._popoutGroups.push(value);\n            this.updateWatermark();\n            return true;\n        })\n            .catch((err) => {\n            console.error('dockview: failed to create popout.', err);\n            return false;\n        });\n    }\n    addFloatingGroup(item, options) {\n        var _a, _b, _c, _d, _e;\n        let group;\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n            this._onDidAddGroup.fire(group);\n            this.movingLock(() => this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n                skipSetActiveGroup: true,\n            }));\n            this.movingLock(() => group.model.openPanel(item, { skipSetGroupActive: true }));\n        }\n        else {\n            group = item;\n            const popoutReferenceGroupId = (_a = this._popoutGroups.find((_) => _.popoutGroup === group)) === null || _a === void 0 ? void 0 : _a.referenceGroup;\n            const popoutReferenceGroup = popoutReferenceGroupId\n                ? this.getPanel(popoutReferenceGroupId)\n                : undefined;\n            const skip = typeof (options === null || options === void 0 ? void 0 : options.skipRemoveGroup) === 'boolean' &&\n                options.skipRemoveGroup;\n            if (!skip) {\n                if (popoutReferenceGroup) {\n                    this.movingLock(() => moveGroupWithoutDestroying({\n                        from: item,\n                        to: popoutReferenceGroup,\n                    }));\n                    this.doRemoveGroup(item, {\n                        skipPopoutReturn: true,\n                        skipPopoutAssociated: true,\n                    });\n                    this.doRemoveGroup(popoutReferenceGroup, {\n                        skipDispose: true,\n                    });\n                    group = popoutReferenceGroup;\n                }\n                else {\n                    this.doRemoveGroup(item, {\n                        skipDispose: true,\n                        skipPopoutReturn: true,\n                        skipPopoutAssociated: false,\n                    });\n                }\n            }\n        }\n        function getAnchoredBox() {\n            if (options === null || options === void 0 ? void 0 : options.position) {\n                const result = {};\n                if ('left' in options.position) {\n                    result.left = Math.max(options.position.left, 0);\n                }\n                else if ('right' in options.position) {\n                    result.right = Math.max(options.position.right, 0);\n                }\n                else {\n                    result.left = DEFAULT_FLOATING_GROUP_POSITION.left;\n                }\n                if ('top' in options.position) {\n                    result.top = Math.max(options.position.top, 0);\n                }\n                else if ('bottom' in options.position) {\n                    result.bottom = Math.max(options.position.bottom, 0);\n                }\n                else {\n                    result.top = DEFAULT_FLOATING_GROUP_POSITION.top;\n                }\n                if (typeof options.width === 'number') {\n                    result.width = Math.max(options.width, 0);\n                }\n                else {\n                    result.width = DEFAULT_FLOATING_GROUP_POSITION.width;\n                }\n                if (typeof options.height === 'number') {\n                    result.height = Math.max(options.height, 0);\n                }\n                else {\n                    result.height = DEFAULT_FLOATING_GROUP_POSITION.height;\n                }\n                return result;\n            }\n            return {\n                left: typeof (options === null || options === void 0 ? void 0 : options.x) === 'number'\n                    ? Math.max(options.x, 0)\n                    : DEFAULT_FLOATING_GROUP_POSITION.left,\n                top: typeof (options === null || options === void 0 ? void 0 : options.y) === 'number'\n                    ? Math.max(options.y, 0)\n                    : DEFAULT_FLOATING_GROUP_POSITION.top,\n                width: typeof (options === null || options === void 0 ? void 0 : options.width) === 'number'\n                    ? Math.max(options.width, 0)\n                    : DEFAULT_FLOATING_GROUP_POSITION.width,\n                height: typeof (options === null || options === void 0 ? void 0 : options.height) === 'number'\n                    ? Math.max(options.height, 0)\n                    : DEFAULT_FLOATING_GROUP_POSITION.height,\n            };\n        }\n        const anchoredBox = getAnchoredBox();\n        const overlay = new Overlay(Object.assign(Object.assign({ container: this.gridview.element, content: group.element }, anchoredBox), { minimumInViewportWidth: this.options.floatingGroupBounds === 'boundedWithinViewport'\n                ? undefined\n                : (_c = (_b = this.options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport) !== null && _c !== void 0 ? _c : DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE, minimumInViewportHeight: this.options.floatingGroupBounds === 'boundedWithinViewport'\n                ? undefined\n                : (_e = (_d = this.options.floatingGroupBounds) === null || _d === void 0 ? void 0 : _d.minimumHeightWithinViewport) !== null && _e !== void 0 ? _e : DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE }));\n        const el = group.element.querySelector('.dv-void-container');\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n        overlay.setupDrag(el, {\n            inDragMode: typeof (options === null || options === void 0 ? void 0 : options.inDragMode) === 'boolean'\n                ? options.inDragMode\n                : false,\n        });\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(group, overlay);\n        const disposable = new CompositeDisposable(group.api.onDidActiveChange((event) => {\n            if (event.isActive) {\n                overlay.bringToFront();\n            }\n        }), watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        }));\n        floatingGroupPanel.addDisposables(overlay.onDidChange(() => {\n            // this is either a resize or a move\n            // to inform the panels .layout(...) the group with it's current size\n            // don't care about resize since the above watcher handles that\n            group.layout(group.width, group.height);\n        }), overlay.onDidChangeEnd(() => {\n            this._bufferOnDidLayoutChange.fire();\n        }), group.onDidChange((event) => {\n            overlay.setBounds({\n                height: event === null || event === void 0 ? void 0 : event.height,\n                width: event === null || event === void 0 ? void 0 : event.width,\n            });\n        }), {\n            dispose: () => {\n                disposable.dispose();\n                remove(this._floatingGroups, floatingGroupPanel);\n                group.model.location = { type: 'grid' };\n                this.updateWatermark();\n            },\n        });\n        this._floatingGroups.push(floatingGroupPanel);\n        group.model.location = { type: 'floating' };\n        if (!(options === null || options === void 0 ? void 0 : options.skipActiveGroup)) {\n            this.doSetGroupAndPanelActive(group);\n        }\n        this.updateWatermark();\n    }\n    orthogonalize(position, options) {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0], undefined, options); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length], undefined, options); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n    updateOptions(options) {\n        var _a, _b;\n        super.updateOptions(options);\n        if ('floatingGroupBounds' in options) {\n            for (const group of this._floatingGroups) {\n                switch (options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            (_a = options.floatingGroupBounds) === null || _a === void 0 ? void 0 : _a.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            (_b = options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport;\n                }\n                group.overlay.setBounds();\n            }\n        }\n        this.updateDropTargetModel(options);\n        const oldDisableDnd = this.options.disableDnd;\n        this._options = Object.assign(Object.assign({}, this.options), options);\n        const newDisableDnd = this.options.disableDnd;\n        if (oldDisableDnd !== newDisableDnd) {\n            this.updateDragAndDropState();\n        }\n        if ('theme' in options) {\n            this.updateTheme();\n        }\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n    layout(width, height, forceResize) {\n        super.layout(width, height, forceResize);\n        if (this._floatingGroups) {\n            for (const floating of this._floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n    updateDragAndDropState() {\n        // Update draggable state for all tabs and void containers\n        for (const group of this.groups) {\n            group.model.updateDragAndDropState();\n        }\n    }\n    focus() {\n        var _a;\n        (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    getGroupPanel(id) {\n        return this.panels.find((panel) => panel.id === id);\n    }\n    setActivePanel(panel) {\n        panel.group.model.openPanel(panel);\n        this.doSetGroupAndPanelActive(panel.group);\n    }\n    moveToNext(options = {}) {\n        var _a;\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n        const location = getGridLocation(options.group.element);\n        const next = (_a = this.gridview.next(location)) === null || _a === void 0 ? void 0 : _a.view;\n        this.doSetGroupAndPanelActive(next);\n    }\n    moveToPrevious(options = {}) {\n        var _a;\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n        const location = getGridLocation(options.group.element);\n        const next = (_a = this.gridview.previous(location)) === null || _a === void 0 ? void 0 : _a.view;\n        if (next) {\n            this.doSetGroupAndPanelActive(next);\n        }\n    }\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON() {\n        var _a;\n        const data = this.gridview.serialize();\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {});\n        const floats = this._floatingGroups.map((group) => {\n            return {\n                data: group.group.toJSON(),\n                position: group.overlay.toJSON(),\n            };\n        });\n        const popoutGroups = this._popoutGroups.map((group) => {\n            return {\n                data: group.popoutGroup.toJSON(),\n                gridReferenceGroup: group.referenceGroup,\n                position: group.window.dimensions(),\n                url: group.popoutGroup.api.location.type === 'popout'\n                    ? group.popoutGroup.api.location.popoutUrl\n                    : undefined,\n            };\n        });\n        const result = {\n            grid: data,\n            panels,\n            activeGroup: (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.id,\n        };\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n        if (popoutGroups.length > 0) {\n            result.popoutGroups = popoutGroups;\n        }\n        return result;\n    }\n    fromJSON(data) {\n        var _a, _b;\n        this.clear();\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n        const { grid, panels, activeGroup } = data;\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n            const createGroupFromSerializedState = (data) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n                this._onDidAddGroup.fire(group);\n                const createdPanels = [];\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(panels[child], group);\n                    createdPanels.push(panel);\n                }\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n                    const isActive = typeof activeView === 'string' &&\n                        activeView === panel.id;\n                    group.model.openPanel(panel, {\n                        skipSetActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(group.panels[group.panels.length - 1], {\n                        skipSetGroupActive: true,\n                    });\n                }\n                return group;\n            };\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n            this.layout(width, height, true);\n            const serializedFloatingGroups = (_a = data.floatingGroups) !== null && _a !== void 0 ? _a : [];\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n                const group = createGroupFromSerializedState(data);\n                this.addFloatingGroup(group, {\n                    position: position,\n                    width: position.width,\n                    height: position.height,\n                    skipRemoveGroup: true,\n                    inDragMode: false,\n                });\n            }\n            const serializedPopoutGroups = (_b = data.popoutGroups) !== null && _b !== void 0 ? _b : [];\n            for (const serializedPopoutGroup of serializedPopoutGroups) {\n                const { data, position, gridReferenceGroup, url } = serializedPopoutGroup;\n                const group = createGroupFromSerializedState(data);\n                this.addPopoutGroup(group, {\n                    position: position !== null && position !== void 0 ? position : undefined,\n                    overridePopoutGroup: gridReferenceGroup ? group : undefined,\n                    referenceGroup: gridReferenceGroup\n                        ? this.getPanel(gridReferenceGroup)\n                        : undefined,\n                    popoutUrl: url,\n                });\n            }\n            for (const floatingGroup of this._floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupAndPanelActive(panel);\n                }\n            }\n        }\n        catch (err) {\n            console.error('dockview: failed to deserialize layout. Reverting changes', err);\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this._floatingGroups]) {\n                floatingGroup.dispose();\n            }\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n        this.updateWatermark();\n        this._onDidLayoutFromJSON.fire();\n    }\n    clear() {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n        const hasActiveGroup = !!this.activeGroup;\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n        if (hasActiveGroup) {\n            this.doSetGroupAndPanelActive(undefined);\n        }\n        this.gridview.clear();\n    }\n    closeAllGroups() {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n            group.value.model.closeAllPanels();\n        }\n    }\n    addPanel(options) {\n        var _a, _b;\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n        let referenceGroup;\n        if (options.position && options.floating) {\n            throw new Error('you can only provide one of: position, floating as arguments to .addPanel(...)');\n        }\n        const initial = {\n            width: options.initialWidth,\n            height: options.initialHeight,\n        };\n        let index;\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel = typeof options.position.referencePanel === 'string'\n                    ? this.getGroupPanel(options.position.referencePanel)\n                    : options.position.referencePanel;\n                index = options.position.index;\n                if (!referencePanel) {\n                    throw new Error(`referencePanel '${options.position.referencePanel}' does not exist`);\n                }\n                referenceGroup = this.findGroup(referencePanel);\n            }\n            else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? (_a = this._groups.get(options.position.referenceGroup)) === null || _a === void 0 ? void 0 : _a.value\n                        : options.position.referenceGroup;\n                index = options.position.index;\n                if (!referenceGroup) {\n                    throw new Error(`referenceGroup '${options.position.referenceGroup}' does not exist`);\n                }\n            }\n            else {\n                const group = this.orthogonalize(directionToPosition(options.position.direction));\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel, {\n                    skipSetActive: options.inactive,\n                    skipSetGroupActive: options.inactive,\n                    index,\n                });\n                if (!options.inactive) {\n                    this.doSetGroupAndPanelActive(group);\n                }\n                group.api.setSize({\n                    height: initial === null || initial === void 0 ? void 0 : initial.height,\n                    width: initial === null || initial === void 0 ? void 0 : initial.width,\n                });\n                return panel;\n            }\n        }\n        else {\n            referenceGroup = this.activeGroup;\n        }\n        let panel;\n        if (referenceGroup) {\n            const target = toTarget(((_b = options.position) === null || _b === void 0 ? void 0 : _b.direction) || 'within');\n            if (options.floating) {\n                const group = this.createGroup();\n                this._onDidAddGroup.fire(group);\n                const floatingGroupOptions = typeof options.floating === 'object' &&\n                    options.floating !== null\n                    ? options.floating\n                    : {};\n                this.addFloatingGroup(group, Object.assign(Object.assign({}, floatingGroupOptions), { inDragMode: false, skipRemoveGroup: true, skipActiveGroup: true }));\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel, {\n                    skipSetActive: options.inactive,\n                    skipSetGroupActive: options.inactive,\n                    index,\n                });\n            }\n            else if (referenceGroup.api.location.type === 'floating' ||\n                target === 'center') {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel, {\n                    skipSetActive: options.inactive,\n                    skipSetGroupActive: options.inactive,\n                    index,\n                });\n                referenceGroup.api.setSize({\n                    width: initial === null || initial === void 0 ? void 0 : initial.width,\n                    height: initial === null || initial === void 0 ? void 0 : initial.height,\n                });\n                if (!options.inactive) {\n                    this.doSetGroupAndPanelActive(referenceGroup);\n                }\n            }\n            else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(this.gridview.orientation, location, target);\n                const group = this.createGroupAtLocation(relativeLocation, this.orientationAtLocation(relativeLocation) ===\n                    Orientation.VERTICAL\n                    ? initial === null || initial === void 0 ? void 0 : initial.height\n                    : initial === null || initial === void 0 ? void 0 : initial.width);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel, {\n                    skipSetActive: options.inactive,\n                    skipSetGroupActive: options.inactive,\n                    index,\n                });\n                if (!options.inactive) {\n                    this.doSetGroupAndPanelActive(group);\n                }\n            }\n        }\n        else if (options.floating) {\n            const group = this.createGroup();\n            this._onDidAddGroup.fire(group);\n            const coordinates = typeof options.floating === 'object' &&\n                options.floating !== null\n                ? options.floating\n                : {};\n            this.addFloatingGroup(group, Object.assign(Object.assign({}, coordinates), { inDragMode: false, skipRemoveGroup: true, skipActiveGroup: true }));\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel, {\n                skipSetActive: options.inactive,\n                skipSetGroupActive: options.inactive,\n                index,\n            });\n        }\n        else {\n            const group = this.createGroupAtLocation([0], this.gridview.orientation === Orientation.VERTICAL\n                ? initial === null || initial === void 0 ? void 0 : initial.height\n                : initial === null || initial === void 0 ? void 0 : initial.width);\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel, {\n                skipSetActive: options.inactive,\n                skipSetGroupActive: options.inactive,\n                index,\n            });\n            if (!options.inactive) {\n                this.doSetGroupAndPanelActive(group);\n            }\n        }\n        return panel;\n    }\n    removePanel(panel, options = {\n        removeEmptyGroup: true,\n    }) {\n        const group = panel.group;\n        if (!group) {\n            throw new Error(`cannot remove panel ${panel.id}. it's missing a group.`);\n        }\n        group.model.removePanel(panel, {\n            skipSetActiveGroup: options.skipSetActiveGroup,\n        });\n        if (!options.skipDispose) {\n            panel.group.model.renderContainer.detatch(panel);\n            panel.dispose();\n        }\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group, { skipActive: options.skipSetActiveGroup });\n        }\n    }\n    createWatermarkComponent() {\n        if (this.options.createWatermarkComponent) {\n            return this.options.createWatermarkComponent();\n        }\n        return new Watermark();\n    }\n    updateWatermark() {\n        var _a, _b;\n        if (this.groups.filter((x) => x.api.location.type === 'grid' && x.api.isVisible).length === 0) {\n            if (!this._watermark) {\n                this._watermark = this.createWatermarkComponent();\n                this._watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                addTestId(watermarkContainer, 'watermark-component');\n                watermarkContainer.appendChild(this._watermark.element);\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        }\n        else if (this._watermark) {\n            this._watermark.element.parentElement.remove();\n            (_b = (_a = this._watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);\n            this._watermark = null;\n        }\n    }\n    addGroup(options) {\n        var _a;\n        if (options) {\n            let referenceGroup;\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel = typeof options.referencePanel === 'string'\n                    ? this.panels.find((panel) => panel.id === options.referencePanel)\n                    : options.referencePanel;\n                if (!referencePanel) {\n                    throw new Error(`reference panel ${options.referencePanel} does not exist`);\n                }\n                referenceGroup = this.findGroup(referencePanel);\n                if (!referenceGroup) {\n                    throw new Error(`reference group for reference panel ${options.referencePanel} does not exist`);\n                }\n            }\n            else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? (_a = this._groups.get(options.referenceGroup)) === null || _a === void 0 ? void 0 : _a.value\n                        : options.referenceGroup;\n                if (!referenceGroup) {\n                    throw new Error(`reference group ${options.referenceGroup} does not exist`);\n                }\n            }\n            else {\n                const group = this.orthogonalize(directionToPosition(options.direction), options);\n                if (!options.skipSetActive) {\n                    this.doSetGroupAndPanelActive(group);\n                }\n                return group;\n            }\n            const target = toTarget(options.direction || 'within');\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(this.gridview.orientation, location, target);\n            const group = this.createGroup(options);\n            const size = this.getLocationOrientation(relativeLocation) ===\n                Orientation.VERTICAL\n                ? options.initialHeight\n                : options.initialWidth;\n            this.doAddGroup(group, relativeLocation, size);\n            if (!options.skipSetActive) {\n                this.doSetGroupAndPanelActive(group);\n            }\n            return group;\n        }\n        else {\n            const group = this.createGroup(options);\n            this.doAddGroup(group);\n            this.doSetGroupAndPanelActive(group);\n            return group;\n        }\n    }\n    getLocationOrientation(location) {\n        return location.length % 2 == 0 &&\n            this.gridview.orientation === Orientation.HORIZONTAL\n            ? Orientation.HORIZONTAL\n            : Orientation.VERTICAL;\n    }\n    removeGroup(group, options) {\n        this.doRemoveGroup(group, options);\n    }\n    doRemoveGroup(group, options) {\n        var _a;\n        const panels = [...group.panels]; // reassign since group panels will mutate\n        if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {\n            for (const panel of panels) {\n                this.removePanel(panel, {\n                    removeEmptyGroup: false,\n                    skipDispose: (_a = options === null || options === void 0 ? void 0 : options.skipDispose) !== null && _a !== void 0 ? _a : false,\n                });\n            }\n        }\n        const activePanel = this.activePanel;\n        if (group.api.location.type === 'floating') {\n            const floatingGroup = this._floatingGroups.find((_) => _.group === group);\n            if (floatingGroup) {\n                if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {\n                    floatingGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n                remove(this._floatingGroups, floatingGroup);\n                floatingGroup.dispose();\n                if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n                    this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : undefined);\n                }\n                return floatingGroup.group;\n            }\n            throw new Error('failed to find floating group');\n        }\n        if (group.api.location.type === 'popout') {\n            const selectedGroup = this._popoutGroups.find((_) => _.popoutGroup === group);\n            if (selectedGroup) {\n                if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {\n                    if (!(options === null || options === void 0 ? void 0 : options.skipPopoutAssociated)) {\n                        const refGroup = selectedGroup.referenceGroup\n                            ? this.getPanel(selectedGroup.referenceGroup)\n                            : undefined;\n                        if (refGroup && refGroup.panels.length === 0) {\n                            this.removeGroup(refGroup);\n                        }\n                    }\n                    selectedGroup.popoutGroup.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n                remove(this._popoutGroups, selectedGroup);\n                const removedGroup = selectedGroup.disposable.dispose();\n                if (!(options === null || options === void 0 ? void 0 : options.skipPopoutReturn) && removedGroup) {\n                    this.doAddGroup(removedGroup, [0]);\n                    this.doSetGroupAndPanelActive(removedGroup);\n                }\n                if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n                    this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : undefined);\n                }\n                this.updateWatermark();\n                return selectedGroup.popoutGroup;\n            }\n            throw new Error('failed to find popout group');\n        }\n        const re = super.doRemoveGroup(group, options);\n        if (!(options === null || options === void 0 ? void 0 : options.skipActive)) {\n            if (this.activePanel !== activePanel) {\n                this._onDidActivePanelChange.fire(this.activePanel);\n            }\n        }\n        return re;\n    }\n    movingLock(func) {\n        const isMoving = this._moving;\n        try {\n            this._moving = true;\n            return func();\n        }\n        finally {\n            this._moving = isMoving;\n        }\n    }\n    moveGroupOrPanel(options) {\n        var _a;\n        const destinationGroup = options.to.group;\n        const sourceGroupId = options.from.groupId;\n        const sourceItemId = options.from.panelId;\n        const destinationTarget = options.to.position;\n        const destinationIndex = options.to.index;\n        const sourceGroup = sourceGroupId\n            ? (_a = this._groups.get(sourceGroupId)) === null || _a === void 0 ? void 0 : _a.value\n            : undefined;\n        if (!sourceGroup) {\n            throw new Error(`Failed to find group id ${sourceGroupId}`);\n        }\n        if (sourceItemId === undefined) {\n            /**\n             * Moving an entire group into another group\n             */\n            this.moveGroup({\n                from: { group: sourceGroup },\n                to: {\n                    group: destinationGroup,\n                    position: destinationTarget,\n                },\n                skipSetActive: options.skipSetActive,\n            });\n            return;\n        }\n        if (!destinationTarget || destinationTarget === 'center') {\n            /**\n             * Dropping a panel within another group\n             */\n            const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {\n                skipSetActive: false,\n                skipSetActiveGroup: true,\n            }));\n            if (!removedPanel) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n            if (sourceGroup.model.size === 0) {\n                // remove the group and do not set a new group as active\n                this.doRemoveGroup(sourceGroup, { skipActive: true });\n            }\n            this.movingLock(() => {\n                var _a;\n                return destinationGroup.model.openPanel(removedPanel, {\n                    index: destinationIndex,\n                    skipSetActive: (_a = options.skipSetActive) !== null && _a !== void 0 ? _a : false,\n                    skipSetGroupActive: true,\n                });\n            });\n            if (!options.skipSetActive) {\n                this.doSetGroupAndPanelActive(destinationGroup);\n            }\n            this._onDidMovePanel.fire({\n                panel: removedPanel,\n                from: sourceGroup,\n            });\n        }\n        else {\n            /**\n             * Dropping a panel to the extremities of a group which will place that panel\n             * into an adjacent group\n             */\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, destinationTarget);\n            if (sourceGroup.size < 2) {\n                /**\n                 * If we are moving from a group which only has one panel left we will consider\n                 * moving the group itself rather than moving the panel into a newly created group\n                 */\n                const [targetParentLocation, to] = tail(targetLocation);\n                if (sourceGroup.api.location.type === 'grid') {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n                    if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                        this._onDidMovePanel.fire({\n                            panel: this.getGroupPanel(sourceItemId),\n                            from: sourceGroup,\n                        });\n                        return;\n                    }\n                }\n                if (sourceGroup.api.location.type === 'popout') {\n                    /**\n                     * the source group is a popout group with a single panel\n                     *\n                     * 1. remove the panel from the group without triggering any events\n                     * 2. remove the popout group\n                     * 3. create a new group at the requested location and add that panel\n                     */\n                    const popoutGroup = this._popoutGroups.find((group) => group.popoutGroup === sourceGroup);\n                    const removedPanel = this.movingLock(() => popoutGroup.popoutGroup.model.removePanel(popoutGroup.popoutGroup.panels[0], {\n                        skipSetActive: true,\n                        skipSetActiveGroup: true,\n                    }));\n                    this.doRemoveGroup(sourceGroup, { skipActive: true });\n                    const newGroup = this.createGroupAtLocation(targetLocation);\n                    this.movingLock(() => newGroup.model.openPanel(removedPanel));\n                    this.doSetGroupAndPanelActive(newGroup);\n                    this._onDidMovePanel.fire({\n                        panel: this.getGroupPanel(sourceItemId),\n                        from: sourceGroup,\n                    });\n                    return;\n                }\n                // source group will become empty so delete the group\n                const targetGroup = this.movingLock(() => this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                }));\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(destinationGroup.element);\n                const location = getRelativeLocation(this.gridview.orientation, updatedReferenceLocation, destinationTarget);\n                this.movingLock(() => this.doAddGroup(targetGroup, location));\n                this.doSetGroupAndPanelActive(targetGroup);\n                this._onDidMovePanel.fire({\n                    panel: this.getGroupPanel(sourceItemId),\n                    from: sourceGroup,\n                });\n            }\n            else {\n                /**\n                 * The group we are removing from has many panels, we need to remove the panels we are moving,\n                 * create a new group, add the panels to that new group and add the new group in an appropiate position\n                 */\n                const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {\n                    skipSetActive: false,\n                    skipSetActiveGroup: true,\n                }));\n                if (!removedPanel) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n                const dropLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, destinationTarget);\n                const group = this.createGroupAtLocation(dropLocation);\n                this.movingLock(() => group.model.openPanel(removedPanel, {\n                    skipSetGroupActive: true,\n                }));\n                this.doSetGroupAndPanelActive(group);\n                this._onDidMovePanel.fire({\n                    panel: removedPanel,\n                    from: sourceGroup,\n                });\n            }\n        }\n    }\n    moveGroup(options) {\n        const from = options.from.group;\n        const to = options.to.group;\n        const target = options.to.position;\n        if (target === 'center') {\n            const activePanel = from.activePanel;\n            const targetActivePanel = to.activePanel;\n            const panels = this.movingLock(() => [...from.panels].map((p) => from.model.removePanel(p.id, {\n                skipSetActive: true,\n            })));\n            if ((from === null || from === void 0 ? void 0 : from.model.size) === 0) {\n                this.doRemoveGroup(from, { skipActive: true });\n            }\n            this.movingLock(() => {\n                for (const panel of panels) {\n                    to.model.openPanel(panel, {\n                        skipSetActive: true, // Always skip setting panels active during move\n                        skipSetGroupActive: true,\n                    });\n                }\n            });\n            if (!options.skipSetActive) {\n                // Make the moved panel (from the source group) active\n                if (activePanel) {\n                    this.doSetGroupAndPanelActive(to);\n                }\n            }\n            else if (targetActivePanel) {\n                // Ensure the target group's original active panel remains active\n                to.model.openPanel(targetActivePanel, {\n                    skipSetGroupActive: true\n                });\n            }\n        }\n        else {\n            switch (from.api.location.type) {\n                case 'grid':\n                    this.gridview.removeView(getGridLocation(from.element));\n                    break;\n                case 'floating': {\n                    const selectedFloatingGroup = this._floatingGroups.find((x) => x.group === from);\n                    if (!selectedFloatingGroup) {\n                        throw new Error('failed to find floating group');\n                    }\n                    selectedFloatingGroup.dispose();\n                    break;\n                }\n                case 'popout': {\n                    const selectedPopoutGroup = this._popoutGroups.find((x) => x.popoutGroup === from);\n                    if (!selectedPopoutGroup) {\n                        throw new Error('failed to find popout group');\n                    }\n                    // Remove from popout groups list to prevent automatic restoration\n                    const index = this._popoutGroups.indexOf(selectedPopoutGroup);\n                    if (index >= 0) {\n                        this._popoutGroups.splice(index, 1);\n                    }\n                    // Clean up the reference group (ghost) if it exists and is hidden\n                    if (selectedPopoutGroup.referenceGroup) {\n                        const referenceGroup = this.getPanel(selectedPopoutGroup.referenceGroup);\n                        if (referenceGroup && !referenceGroup.api.isVisible) {\n                            this.doRemoveGroup(referenceGroup, { skipActive: true });\n                        }\n                    }\n                    // Manually dispose the window without triggering restoration\n                    selectedPopoutGroup.window.dispose();\n                    // Update group's location and containers for target\n                    if (to.api.location.type === 'grid') {\n                        from.model.renderContainer = this.overlayRenderContainer;\n                        from.model.dropTargetContainer = this.rootDropTargetContainer;\n                        from.model.location = { type: 'grid' };\n                    }\n                    else if (to.api.location.type === 'floating') {\n                        from.model.renderContainer = this.overlayRenderContainer;\n                        from.model.dropTargetContainer = this.rootDropTargetContainer;\n                        from.model.location = { type: 'floating' };\n                    }\n                    break;\n                }\n            }\n            // For moves to grid locations\n            if (to.api.location.type === 'grid') {\n                const referenceLocation = getGridLocation(to.element);\n                const dropLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, target);\n                // Add to grid for all moves targeting grid location\n                let size;\n                switch (this.gridview.orientation) {\n                    case Orientation.VERTICAL:\n                        size =\n                            referenceLocation.length % 2 == 0\n                                ? from.api.width\n                                : from.api.height;\n                        break;\n                    case Orientation.HORIZONTAL:\n                        size =\n                            referenceLocation.length % 2 == 0\n                                ? from.api.height\n                                : from.api.width;\n                        break;\n                }\n                this.gridview.addView(from, size, dropLocation);\n            }\n            else if (to.api.location.type === 'floating') {\n                // For moves to floating locations, add as floating group\n                // Get the position/size from the target floating group\n                const targetFloatingGroup = this._floatingGroups.find((x) => x.group === to);\n                if (targetFloatingGroup) {\n                    const box = targetFloatingGroup.overlay.toJSON();\n                    // Calculate position based on available properties\n                    let left, top;\n                    if ('left' in box) {\n                        left = box.left + 50;\n                    }\n                    else if ('right' in box) {\n                        left = Math.max(0, box.right - box.width - 50);\n                    }\n                    else {\n                        left = 50; // Default fallback\n                    }\n                    if ('top' in box) {\n                        top = box.top + 50;\n                    }\n                    else if ('bottom' in box) {\n                        top = Math.max(0, box.bottom - box.height - 50);\n                    }\n                    else {\n                        top = 50; // Default fallback\n                    }\n                    this.addFloatingGroup(from, {\n                        height: box.height,\n                        width: box.width,\n                        position: {\n                            left,\n                            top,\n                        },\n                    });\n                }\n            }\n        }\n        from.panels.forEach((panel) => {\n            this._onDidMovePanel.fire({ panel, from });\n        });\n        if (!options.skipSetActive) {\n            this.doSetGroupAndPanelActive(from);\n        }\n    }\n    doSetGroupActive(group) {\n        super.doSetGroupActive(group);\n        const activePanel = this.activePanel;\n        if (!this._moving &&\n            activePanel !== this._onDidActivePanelChange.value) {\n            this._onDidActivePanelChange.fire(activePanel);\n        }\n    }\n    doSetGroupAndPanelActive(group) {\n        super.doSetGroupActive(group);\n        const activePanel = this.activePanel;\n        if (group &&\n            this.hasMaximizedGroup() &&\n            !this.isMaximizedGroup(group)) {\n            this.exitMaximizedGroup();\n        }\n        if (!this._moving &&\n            activePanel !== this._onDidActivePanelChange.value) {\n            this._onDidActivePanelChange.fire(activePanel);\n        }\n    }\n    getNextGroupId() {\n        let id = this.nextGroupId.next();\n        while (this._groups.has(id)) {\n            id = this.nextGroupId.next();\n        }\n        return id;\n    }\n    createGroup(options) {\n        if (!options) {\n            options = {};\n        }\n        let id = options === null || options === void 0 ? void 0 : options.id;\n        if (id && this._groups.has(options.id)) {\n            console.warn(`dockview: Duplicate group id ${options === null || options === void 0 ? void 0 : options.id}. reassigning group id to avoid errors`);\n            id = undefined;\n        }\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: this });\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(view.model.onTabDragStart((event) => {\n                this._onWillDragPanel.fire(event);\n            }), view.model.onGroupDragStart((event) => {\n                this._onWillDragGroup.fire(event);\n            }), view.model.onMove((event) => {\n                const { groupId, itemId, target, index } = event;\n                this.moveGroupOrPanel({\n                    from: { groupId: groupId, panelId: itemId },\n                    to: {\n                        group: view,\n                        position: target,\n                        index,\n                    },\n                });\n            }), view.model.onDidDrop((event) => {\n                this._onDidDrop.fire(event);\n            }), view.model.onWillDrop((event) => {\n                this._onWillDrop.fire(event);\n            }), view.model.onWillShowOverlay((event) => {\n                if (this.options.disableDnd) {\n                    event.preventDefault();\n                    return;\n                }\n                this._onWillShowOverlay.fire(event);\n            }), view.model.onUnhandledDragOverEvent((event) => {\n                this._onUnhandledDragOverEvent.fire(event);\n            }), view.model.onDidAddPanel((event) => {\n                if (this._moving) {\n                    return;\n                }\n                this._onDidAddPanel.fire(event.panel);\n            }), view.model.onDidRemovePanel((event) => {\n                if (this._moving) {\n                    return;\n                }\n                this._onDidRemovePanel.fire(event.panel);\n            }), view.model.onDidActivePanelChange((event) => {\n                if (this._moving) {\n                    return;\n                }\n                if (event.panel !== this.activePanel) {\n                    return;\n                }\n                if (this._onDidActivePanelChange.value !== event.panel) {\n                    this._onDidActivePanelChange.fire(event.panel);\n                }\n            }), Event.any(view.model.onDidPanelTitleChange, view.model.onDidPanelParametersChange)(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }));\n            this._groups.set(view.id, { value: view, disposable });\n        }\n        // TODO: must be called after the above listeners have been setup, not an ideal pattern\n        view.initialize();\n        return view;\n    }\n    createPanel(options, group) {\n        var _a, _b, _c;\n        const contentComponent = options.component;\n        const tabComponent = (_a = options.tabComponent) !== null && _a !== void 0 ? _a : this.options.defaultTabComponent;\n        const view = new DockviewPanelModel(this, options.id, contentComponent, tabComponent);\n        const panel = new DockviewPanel(options.id, contentComponent, tabComponent, this, this._api, group, view, {\n            renderer: options.renderer,\n            minimumWidth: options.minimumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumWidth: options.maximumWidth,\n            maximumHeight: options.maximumHeight,\n        });\n        panel.init({\n            title: (_b = options.title) !== null && _b !== void 0 ? _b : options.id,\n            params: (_c = options === null || options === void 0 ? void 0 : options.params) !== null && _c !== void 0 ? _c : {},\n        });\n        return panel;\n    }\n    createGroupAtLocation(location, size, options) {\n        const group = this.createGroup(options);\n        this.doAddGroup(group, location, size);\n        return group;\n    }\n    findGroup(panel) {\n        var _a;\n        return (_a = Array.from(this._groups.values()).find((group) => group.value.model.containsPanel(panel))) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    orientationAtLocation(location) {\n        const rootOrientation = this.gridview.orientation;\n        return location.length % 2 == 1\n            ? rootOrientation\n            : orthogonal(rootOrientation);\n    }\n    updateDropTargetModel(options) {\n        if ('dndEdges' in options) {\n            this._rootDropTarget.disabled =\n                typeof options.dndEdges === 'boolean' &&\n                    options.dndEdges === false;\n            if (typeof options.dndEdges === 'object' &&\n                options.dndEdges !== null) {\n                this._rootDropTarget.setOverlayModel(options.dndEdges);\n            }\n            else {\n                this._rootDropTarget.setOverlayModel(DEFAULT_ROOT_OVERLAY_MODEL);\n            }\n        }\n        if ('rootOverlayModel' in options) {\n            this.updateDropTargetModel({ dndEdges: options.dndEdges });\n        }\n    }\n    updateTheme() {\n        var _a, _b;\n        const theme = (_a = this._options.theme) !== null && _a !== void 0 ? _a : themeAbyss;\n        this._themeClassnames.setClassNames(theme.className);\n        this.gridview.margin = (_b = theme.gap) !== null && _b !== void 0 ? _b : 0;\n        switch (theme.dndOverlayMounting) {\n            case 'absolute':\n                this.rootDropTargetContainer.disabled = false;\n                break;\n            case 'relative':\n            default:\n                this.rootDropTargetContainer.disabled = true;\n                break;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}