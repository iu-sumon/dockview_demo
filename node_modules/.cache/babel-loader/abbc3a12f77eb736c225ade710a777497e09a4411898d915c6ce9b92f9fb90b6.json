{"ast":null,"code":"import { DockviewApi } from '../api/component.api';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, DockviewEvent, Emitter } from '../events';\nimport { WillShowOverlayLocationEvent } from './events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { ContentContainer } from './components/panel/content';\nimport { TabsContainer } from './components/titlebar/tabsContainer';\nimport { DockviewUnhandledDragOverEvent } from './options';\nexport class DockviewDidDropEvent extends DockviewEvent {\n  get nativeEvent() {\n    return this.options.nativeEvent;\n  }\n  get position() {\n    return this.options.position;\n  }\n  get panel() {\n    return this.options.panel;\n  }\n  get group() {\n    return this.options.group;\n  }\n  get api() {\n    return this.options.api;\n  }\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n  getData() {\n    return this.options.getData();\n  }\n}\nexport class DockviewWillDropEvent extends DockviewDidDropEvent {\n  get kind() {\n    return this._kind;\n  }\n  constructor(options) {\n    super(options);\n    this._kind = options.kind;\n  }\n}\nexport class DockviewGroupPanelModel extends CompositeDisposable {\n  get element() {\n    throw new Error('dockview: not supported');\n  }\n  get activePanel() {\n    return this._activePanel;\n  }\n  get locked() {\n    return this._locked;\n  }\n  set locked(value) {\n    this._locked = value;\n    toggleClass(this.container, 'dv-locked-groupview', value === 'no-drop-target' || value);\n  }\n  get isActive() {\n    return this._isGroupActive;\n  }\n  get panels() {\n    return this._panels;\n  }\n  get size() {\n    return this._panels.length;\n  }\n  get isEmpty() {\n    return this._panels.length === 0;\n  }\n  get hasWatermark() {\n    return !!(this.watermark && this.container.contains(this.watermark.element));\n  }\n  get header() {\n    return this.tabsContainer;\n  }\n  get isContentFocused() {\n    if (!document.activeElement) {\n      return false;\n    }\n    return isAncestor(document.activeElement, this.contentContainer.element);\n  }\n  get location() {\n    return this._location;\n  }\n  set location(value) {\n    this._location = value;\n    toggleClass(this.container, 'dv-groupview-floating', false);\n    toggleClass(this.container, 'dv-groupview-popout', false);\n    switch (value.type) {\n      case 'grid':\n        this.contentContainer.dropTarget.setTargetZones(['top', 'bottom', 'left', 'right', 'center']);\n        break;\n      case 'floating':\n        this.contentContainer.dropTarget.setTargetZones(['center']);\n        this.contentContainer.dropTarget.setTargetZones(value ? ['center'] : ['top', 'bottom', 'left', 'right', 'center']);\n        toggleClass(this.container, 'dv-groupview-floating', true);\n        break;\n      case 'popout':\n        this.contentContainer.dropTarget.setTargetZones(['center']);\n        toggleClass(this.container, 'dv-groupview-popout', true);\n        break;\n    }\n    this.groupPanel.api._onDidLocationChange.fire({\n      location: this.location\n    });\n  }\n  constructor(container, accessor, id, options, groupPanel) {\n    var _a;\n    super();\n    this.container = container;\n    this.accessor = accessor;\n    this.id = id;\n    this.options = options;\n    this.groupPanel = groupPanel;\n    this._isGroupActive = false;\n    this._locked = false;\n    this._location = {\n      type: 'grid'\n    };\n    this.mostRecentlyUsed = [];\n    this._overwriteRenderContainer = null;\n    this._overwriteDropTargetContainer = null;\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n    this._width = 0;\n    this._height = 0;\n    this._panels = [];\n    this._panelDisposables = new Map();\n    this._onMove = new Emitter();\n    this.onMove = this._onMove.event;\n    this._onDidDrop = new Emitter();\n    this.onDidDrop = this._onDidDrop.event;\n    this._onWillDrop = new Emitter();\n    this.onWillDrop = this._onWillDrop.event;\n    this._onWillShowOverlay = new Emitter();\n    this.onWillShowOverlay = this._onWillShowOverlay.event;\n    this._onTabDragStart = new Emitter();\n    this.onTabDragStart = this._onTabDragStart.event;\n    this._onGroupDragStart = new Emitter();\n    this.onGroupDragStart = this._onGroupDragStart.event;\n    this._onDidAddPanel = new Emitter();\n    this.onDidAddPanel = this._onDidAddPanel.event;\n    this._onDidPanelTitleChange = new Emitter();\n    this.onDidPanelTitleChange = this._onDidPanelTitleChange.event;\n    this._onDidPanelParametersChange = new Emitter();\n    this.onDidPanelParametersChange = this._onDidPanelParametersChange.event;\n    this._onDidRemovePanel = new Emitter();\n    this.onDidRemovePanel = this._onDidRemovePanel.event;\n    this._onDidActivePanelChange = new Emitter();\n    this.onDidActivePanelChange = this._onDidActivePanelChange.event;\n    this._onUnhandledDragOverEvent = new Emitter();\n    this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;\n    toggleClass(this.container, 'dv-groupview', true);\n    this._api = new DockviewApi(this.accessor);\n    this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n    this.contentContainer = new ContentContainer(this.accessor, this);\n    container.append(this.tabsContainer.element, this.contentContainer.element);\n    this.header.hidden = !!options.hideHeader;\n    this.locked = (_a = options.locked) !== null && _a !== void 0 ? _a : false;\n    this.addDisposables(this._onTabDragStart, this._onGroupDragStart, this._onWillShowOverlay, this.tabsContainer.onTabDragStart(event => {\n      this._onTabDragStart.fire(event);\n    }), this.tabsContainer.onGroupDragStart(event => {\n      this._onGroupDragStart.fire(event);\n    }), this.tabsContainer.onDrop(event => {\n      this.handleDropEvent('header', event.event, 'center', event.index);\n    }), this.contentContainer.onDidFocus(() => {\n      this.accessor.doSetGroupActive(this.groupPanel);\n    }), this.contentContainer.onDidBlur(() => {\n      // noop\n    }), this.contentContainer.dropTarget.onDrop(event => {\n      this.handleDropEvent('content', event.nativeEvent, event.position);\n    }), this.tabsContainer.onWillShowOverlay(event => {\n      this._onWillShowOverlay.fire(event);\n    }), this.contentContainer.dropTarget.onWillShowOverlay(event => {\n      this._onWillShowOverlay.fire(new WillShowOverlayLocationEvent(event, {\n        kind: 'content',\n        panel: this.activePanel,\n        api: this._api,\n        group: this.groupPanel,\n        getData: getPanelData\n      }));\n    }), this._onMove, this._onDidChange, this._onDidDrop, this._onWillDrop, this._onDidAddPanel, this._onDidRemovePanel, this._onDidActivePanelChange, this._onUnhandledDragOverEvent, this._onDidPanelTitleChange, this._onDidPanelParametersChange);\n  }\n  focusContent() {\n    this.contentContainer.element.focus();\n  }\n  set renderContainer(value) {\n    this.panels.forEach(panel => {\n      this.renderContainer.detatch(panel);\n    });\n    this._overwriteRenderContainer = value;\n    this.panels.forEach(panel => {\n      this.rerender(panel);\n    });\n  }\n  get renderContainer() {\n    var _a;\n    return (_a = this._overwriteRenderContainer) !== null && _a !== void 0 ? _a : this.accessor.overlayRenderContainer;\n  }\n  set dropTargetContainer(value) {\n    this._overwriteDropTargetContainer = value;\n  }\n  get dropTargetContainer() {\n    var _a;\n    return (_a = this._overwriteDropTargetContainer) !== null && _a !== void 0 ? _a : this.accessor.rootDropTargetContainer;\n  }\n  initialize() {\n    if (this.options.panels) {\n      this.options.panels.forEach(panel => {\n        this.doAddPanel(panel);\n      });\n    }\n    if (this.options.activePanel) {\n      this.openPanel(this.options.activePanel);\n    }\n    // must be run after the constructor otherwise this.parent may not be\n    // correctly initialized\n    this.setActive(this.isActive, true);\n    this.updateContainer();\n    if (this.accessor.options.createRightHeaderActionComponent) {\n      this._rightHeaderActions = this.accessor.options.createRightHeaderActionComponent(this.groupPanel);\n      this.addDisposables(this._rightHeaderActions);\n      this._rightHeaderActions.init({\n        containerApi: this._api,\n        api: this.groupPanel.api,\n        group: this.groupPanel\n      });\n      this.tabsContainer.setRightActionsElement(this._rightHeaderActions.element);\n    }\n    if (this.accessor.options.createLeftHeaderActionComponent) {\n      this._leftHeaderActions = this.accessor.options.createLeftHeaderActionComponent(this.groupPanel);\n      this.addDisposables(this._leftHeaderActions);\n      this._leftHeaderActions.init({\n        containerApi: this._api,\n        api: this.groupPanel.api,\n        group: this.groupPanel\n      });\n      this.tabsContainer.setLeftActionsElement(this._leftHeaderActions.element);\n    }\n    if (this.accessor.options.createPrefixHeaderActionComponent) {\n      this._prefixHeaderActions = this.accessor.options.createPrefixHeaderActionComponent(this.groupPanel);\n      this.addDisposables(this._prefixHeaderActions);\n      this._prefixHeaderActions.init({\n        containerApi: this._api,\n        api: this.groupPanel.api,\n        group: this.groupPanel\n      });\n      this.tabsContainer.setPrefixActionsElement(this._prefixHeaderActions.element);\n    }\n  }\n  rerender(panel) {\n    this.contentContainer.renderPanel(panel, {\n      asActive: false\n    });\n  }\n  indexOf(panel) {\n    return this.tabsContainer.indexOf(panel.id);\n  }\n  toJSON() {\n    var _a;\n    const result = {\n      views: this.tabsContainer.panels,\n      activeView: (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.id,\n      id: this.id\n    };\n    if (this.locked !== false) {\n      result.locked = this.locked;\n    }\n    if (this.header.hidden) {\n      result.hideHeader = true;\n    }\n    return result;\n  }\n  moveToNext(options) {\n    if (!options) {\n      options = {};\n    }\n    if (!options.panel) {\n      options.panel = this.activePanel;\n    }\n    const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n    let normalizedIndex;\n    if (index < this.panels.length - 1) {\n      normalizedIndex = index + 1;\n    } else if (!options.suppressRoll) {\n      normalizedIndex = 0;\n    } else {\n      return;\n    }\n    this.openPanel(this.panels[normalizedIndex]);\n  }\n  moveToPrevious(options) {\n    if (!options) {\n      options = {};\n    }\n    if (!options.panel) {\n      options.panel = this.activePanel;\n    }\n    if (!options.panel) {\n      return;\n    }\n    const index = this.panels.indexOf(options.panel);\n    let normalizedIndex;\n    if (index > 0) {\n      normalizedIndex = index - 1;\n    } else if (!options.suppressRoll) {\n      normalizedIndex = this.panels.length - 1;\n    } else {\n      return;\n    }\n    this.openPanel(this.panels[normalizedIndex]);\n  }\n  containsPanel(panel) {\n    return this.panels.includes(panel);\n  }\n  init(_params) {\n    //noop\n  }\n  update(_params) {\n    //noop\n  }\n  focus() {\n    var _a;\n    (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.focus();\n  }\n  openPanel(panel, options = {}) {\n    /**\n     * set the panel group\n     * add the panel\n     * check if group active\n     * check if panel active\n     */\n    if (typeof options.index !== 'number' || options.index > this.panels.length) {\n      options.index = this.panels.length;\n    }\n    const skipSetActive = !!options.skipSetActive;\n    // ensure the group is updated before we fire any events\n    panel.updateParentGroup(this.groupPanel, {\n      skipSetActive: options.skipSetActive\n    });\n    this.doAddPanel(panel, options.index, {\n      skipSetActive: skipSetActive\n    });\n    if (this._activePanel === panel) {\n      this.contentContainer.renderPanel(panel, {\n        asActive: true\n      });\n      return;\n    }\n    if (!skipSetActive) {\n      this.doSetActivePanel(panel);\n    }\n    if (!options.skipSetGroupActive) {\n      this.accessor.doSetGroupActive(this.groupPanel);\n    }\n    if (!options.skipSetActive) {\n      this.updateContainer();\n    }\n  }\n  removePanel(groupItemOrId, options = {\n    skipSetActive: false\n  }) {\n    const id = typeof groupItemOrId === 'string' ? groupItemOrId : groupItemOrId.id;\n    const panelToRemove = this._panels.find(panel => panel.id === id);\n    if (!panelToRemove) {\n      throw new Error('invalid operation');\n    }\n    return this._removePanel(panelToRemove, options);\n  }\n  closeAllPanels() {\n    if (this.panels.length > 0) {\n      // take a copy since we will be edting the array as we iterate through\n      const arrPanelCpy = [...this.panels];\n      for (const panel of arrPanelCpy) {\n        this.doClose(panel);\n      }\n    } else {\n      this.accessor.removeGroup(this.groupPanel);\n    }\n  }\n  closePanel(panel) {\n    this.doClose(panel);\n  }\n  doClose(panel) {\n    const isLast = this.panels.length === 1 && this.accessor.groups.length === 1;\n    this.accessor.removePanel(panel, isLast && this.accessor.options.noPanelsOverlay === 'emptyGroup' ? {\n      removeEmptyGroup: false\n    } : undefined);\n  }\n  isPanelActive(panel) {\n    return this._activePanel === panel;\n  }\n  updateActions(element) {\n    this.tabsContainer.setRightActionsElement(element);\n  }\n  setActive(isGroupActive, force = false) {\n    if (!force && this.isActive === isGroupActive) {\n      return;\n    }\n    this._isGroupActive = isGroupActive;\n    toggleClass(this.container, 'dv-active-group', isGroupActive);\n    toggleClass(this.container, 'dv-inactive-group', !isGroupActive);\n    this.tabsContainer.setActive(this.isActive);\n    if (!this._activePanel && this.panels.length > 0) {\n      this.doSetActivePanel(this.panels[0]);\n    }\n    this.updateContainer();\n  }\n  layout(width, height) {\n    var _a;\n    this._width = width;\n    this._height = height;\n    this.contentContainer.layout(this._width, this._height);\n    if ((_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.layout) {\n      this._activePanel.layout(this._width, this._height);\n    }\n  }\n  _removePanel(panel, options) {\n    const isActivePanel = this._activePanel === panel;\n    this.doRemovePanel(panel);\n    if (isActivePanel && this.panels.length > 0) {\n      const nextPanel = this.mostRecentlyUsed[0];\n      this.openPanel(nextPanel, {\n        skipSetActive: options.skipSetActive,\n        skipSetGroupActive: options.skipSetActiveGroup\n      });\n    }\n    if (this._activePanel && this.panels.length === 0) {\n      this.doSetActivePanel(undefined);\n    }\n    if (!options.skipSetActive) {\n      this.updateContainer();\n    }\n    return panel;\n  }\n  doRemovePanel(panel) {\n    const index = this.panels.indexOf(panel);\n    if (this._activePanel === panel) {\n      this.contentContainer.closePanel();\n    }\n    this.tabsContainer.delete(panel.id);\n    this._panels.splice(index, 1);\n    if (this.mostRecentlyUsed.includes(panel)) {\n      const index = this.mostRecentlyUsed.indexOf(panel);\n      this.mostRecentlyUsed.splice(index, 1);\n    }\n    const disposable = this._panelDisposables.get(panel.id);\n    if (disposable) {\n      disposable.dispose();\n      this._panelDisposables.delete(panel.id);\n    }\n    this._onDidRemovePanel.fire({\n      panel\n    });\n  }\n  doAddPanel(panel, index = this.panels.length, options = {\n    skipSetActive: false\n  }) {\n    const existingPanel = this._panels.indexOf(panel);\n    const hasExistingPanel = existingPanel > -1;\n    this.tabsContainer.show();\n    this.contentContainer.show();\n    this.tabsContainer.openPanel(panel, index);\n    if (!options.skipSetActive) {\n      this.contentContainer.openPanel(panel);\n    }\n    if (hasExistingPanel) {\n      // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n      return;\n    }\n    this.updateMru(panel);\n    this.panels.splice(index, 0, panel);\n    this._panelDisposables.set(panel.id, new CompositeDisposable(panel.api.onDidTitleChange(event => this._onDidPanelTitleChange.fire(event)), panel.api.onDidParametersChange(event => this._onDidPanelParametersChange.fire(event))));\n    this._onDidAddPanel.fire({\n      panel\n    });\n  }\n  doSetActivePanel(panel) {\n    if (this._activePanel === panel) {\n      return;\n    }\n    this._activePanel = panel;\n    if (panel) {\n      this.tabsContainer.setActivePanel(panel);\n      panel.layout(this._width, this._height);\n      this.updateMru(panel);\n      this._onDidActivePanelChange.fire({\n        panel\n      });\n    }\n  }\n  updateMru(panel) {\n    if (this.mostRecentlyUsed.includes(panel)) {\n      this.mostRecentlyUsed.splice(this.mostRecentlyUsed.indexOf(panel), 1);\n    }\n    this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n  }\n  updateContainer() {\n    var _a, _b;\n    this.panels.forEach(panel => panel.runEvents());\n    if (this.isEmpty && !this.watermark) {\n      const watermark = this.accessor.createWatermarkComponent();\n      watermark.init({\n        containerApi: this._api,\n        group: this.groupPanel\n      });\n      this.watermark = watermark;\n      addDisposableListener(this.watermark.element, 'pointerdown', () => {\n        if (!this.isActive) {\n          this.accessor.doSetGroupActive(this.groupPanel);\n        }\n      });\n      this.contentContainer.element.appendChild(this.watermark.element);\n    }\n    if (!this.isEmpty && this.watermark) {\n      this.watermark.element.remove();\n      (_b = (_a = this.watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);\n      this.watermark = undefined;\n    }\n  }\n  canDisplayOverlay(event, position, target) {\n    const firedEvent = new DockviewUnhandledDragOverEvent(event, target, position, getPanelData, this.accessor.getPanel(this.id));\n    this._onUnhandledDragOverEvent.fire(firedEvent);\n    return firedEvent.isAccepted;\n  }\n  handleDropEvent(type, event, position, index) {\n    if (this.locked === 'no-drop-target') {\n      return;\n    }\n    function getKind() {\n      switch (type) {\n        case 'header':\n          return typeof index === 'number' ? 'tab' : 'header_space';\n        case 'content':\n          return 'content';\n      }\n    }\n    const panel = typeof index === 'number' ? this.panels[index] : undefined;\n    const willDropEvent = new DockviewWillDropEvent({\n      nativeEvent: event,\n      position,\n      panel,\n      getData: () => getPanelData(),\n      kind: getKind(),\n      group: this.groupPanel,\n      api: this._api\n    });\n    this._onWillDrop.fire(willDropEvent);\n    if (willDropEvent.defaultPrevented) {\n      return;\n    }\n    const data = getPanelData();\n    if (data && data.viewId === this.accessor.id) {\n      if (type === 'content') {\n        if (data.groupId === this.id) {\n          // don't allow to drop on self for center position\n          if (position === 'center') {\n            return;\n          }\n          if (data.panelId === null) {\n            // don't allow group move to drop anywhere on self\n            return;\n          }\n        }\n      }\n      if (type === 'header') {\n        if (data.groupId === this.id) {\n          if (data.panelId === null) {\n            return;\n          }\n        }\n      }\n      if (data.panelId === null) {\n        // this is a group move dnd event\n        const {\n          groupId\n        } = data;\n        this._onMove.fire({\n          target: position,\n          groupId: groupId,\n          index\n        });\n        return;\n      }\n      const fromSameGroup = this.tabsContainer.indexOf(data.panelId) !== -1;\n      if (fromSameGroup && this.tabsContainer.size === 1) {\n        return;\n      }\n      const {\n        groupId,\n        panelId\n      } = data;\n      const isSameGroup = this.id === groupId;\n      if (isSameGroup && !position) {\n        const oldIndex = this.tabsContainer.indexOf(panelId);\n        if (oldIndex === index) {\n          return;\n        }\n      }\n      this._onMove.fire({\n        target: position,\n        groupId: data.groupId,\n        itemId: data.panelId,\n        index\n      });\n    } else {\n      this._onDidDrop.fire(new DockviewDidDropEvent({\n        nativeEvent: event,\n        position,\n        panel,\n        getData: () => getPanelData(),\n        group: this.groupPanel,\n        api: this._api\n      }));\n    }\n  }\n  updateDragAndDropState() {\n    this.tabsContainer.updateDragAndDropState();\n  }\n  dispose() {\n    var _a, _b, _c;\n    super.dispose();\n    (_a = this.watermark) === null || _a === void 0 ? void 0 : _a.element.remove();\n    (_c = (_b = this.watermark) === null || _b === void 0 ? void 0 : _b.dispose) === null || _c === void 0 ? void 0 : _c.call(_b);\n    this.watermark = undefined;\n    for (const panel of this.panels) {\n      panel.dispose();\n    }\n    this.tabsContainer.dispose();\n    this.contentContainer.dispose();\n  }\n}","map":{"version":3,"names":["DockviewApi","getPanelData","isAncestor","toggleClass","addDisposableListener","DockviewEvent","Emitter","WillShowOverlayLocationEvent","CompositeDisposable","ContentContainer","TabsContainer","DockviewUnhandledDragOverEvent","DockviewDidDropEvent","nativeEvent","options","position","panel","group","api","constructor","getData","DockviewWillDropEvent","kind","_kind","DockviewGroupPanelModel","element","Error","activePanel","_activePanel","locked","_locked","value","container","isActive","_isGroupActive","panels","_panels","size","length","isEmpty","hasWatermark","watermark","contains","header","tabsContainer","isContentFocused","document","activeElement","contentContainer","location","_location","type","dropTarget","setTargetZones","groupPanel","_onDidLocationChange","fire","accessor","id","_a","mostRecentlyUsed","_overwriteRenderContainer","_overwriteDropTargetContainer","_onDidChange","onDidChange","event","_width","_height","_panelDisposables","Map","_onMove","onMove","_onDidDrop","onDidDrop","_onWillDrop","onWillDrop","_onWillShowOverlay","onWillShowOverlay","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","_onDidAddPanel","onDidAddPanel","_onDidPanelTitleChange","onDidPanelTitleChange","_onDidPanelParametersChange","onDidPanelParametersChange","_onDidRemovePanel","onDidRemovePanel","_onDidActivePanelChange","onDidActivePanelChange","_onUnhandledDragOverEvent","onUnhandledDragOverEvent","_api","append","hidden","hideHeader","addDisposables","onDrop","handleDropEvent","index","onDidFocus","doSetGroupActive","onDidBlur","focusContent","focus","renderContainer","forEach","detatch","rerender","overlayRenderContainer","dropTargetContainer","rootDropTargetContainer","initialize","doAddPanel","openPanel","setActive","updateContainer","createRightHeaderActionComponent","_rightHeaderActions","init","containerApi","setRightActionsElement","createLeftHeaderActionComponent","_leftHeaderActions","setLeftActionsElement","createPrefixHeaderActionComponent","_prefixHeaderActions","setPrefixActionsElement","renderPanel","asActive","indexOf","toJSON","result","views","activeView","moveToNext","normalizedIndex","suppressRoll","moveToPrevious","containsPanel","includes","_params","update","skipSetActive","updateParentGroup","doSetActivePanel","skipSetGroupActive","removePanel","groupItemOrId","panelToRemove","find","_removePanel","closeAllPanels","arrPanelCpy","doClose","removeGroup","closePanel","isLast","groups","noPanelsOverlay","removeEmptyGroup","undefined","isPanelActive","updateActions","isGroupActive","force","layout","width","height","isActivePanel","doRemovePanel","nextPanel","skipSetActiveGroup","delete","splice","disposable","get","dispose","existingPanel","hasExistingPanel","show","updateMru","set","onDidTitleChange","onDidParametersChange","setActivePanel","_b","runEvents","createWatermarkComponent","appendChild","remove","call","canDisplayOverlay","target","firedEvent","getPanel","isAccepted","getKind","willDropEvent","defaultPrevented","data","viewId","groupId","panelId","fromSameGroup","isSameGroup","oldIndex","itemId","updateDragAndDropState","_c"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js"],"sourcesContent":["import { DockviewApi } from '../api/component.api';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, DockviewEvent, Emitter, } from '../events';\nimport { WillShowOverlayLocationEvent } from './events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { ContentContainer, } from './components/panel/content';\nimport { TabsContainer, } from './components/titlebar/tabsContainer';\nimport { DockviewUnhandledDragOverEvent, } from './options';\nexport class DockviewDidDropEvent extends DockviewEvent {\n    get nativeEvent() {\n        return this.options.nativeEvent;\n    }\n    get position() {\n        return this.options.position;\n    }\n    get panel() {\n        return this.options.panel;\n    }\n    get group() {\n        return this.options.group;\n    }\n    get api() {\n        return this.options.api;\n    }\n    constructor(options) {\n        super();\n        this.options = options;\n    }\n    getData() {\n        return this.options.getData();\n    }\n}\nexport class DockviewWillDropEvent extends DockviewDidDropEvent {\n    get kind() {\n        return this._kind;\n    }\n    constructor(options) {\n        super(options);\n        this._kind = options.kind;\n    }\n}\nexport class DockviewGroupPanelModel extends CompositeDisposable {\n    get element() {\n        throw new Error('dockview: not supported');\n    }\n    get activePanel() {\n        return this._activePanel;\n    }\n    get locked() {\n        return this._locked;\n    }\n    set locked(value) {\n        this._locked = value;\n        toggleClass(this.container, 'dv-locked-groupview', value === 'no-drop-target' || value);\n    }\n    get isActive() {\n        return this._isGroupActive;\n    }\n    get panels() {\n        return this._panels;\n    }\n    get size() {\n        return this._panels.length;\n    }\n    get isEmpty() {\n        return this._panels.length === 0;\n    }\n    get hasWatermark() {\n        return !!(this.watermark && this.container.contains(this.watermark.element));\n    }\n    get header() {\n        return this.tabsContainer;\n    }\n    get isContentFocused() {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(document.activeElement, this.contentContainer.element);\n    }\n    get location() {\n        return this._location;\n    }\n    set location(value) {\n        this._location = value;\n        toggleClass(this.container, 'dv-groupview-floating', false);\n        toggleClass(this.container, 'dv-groupview-popout', false);\n        switch (value.type) {\n            case 'grid':\n                this.contentContainer.dropTarget.setTargetZones([\n                    'top',\n                    'bottom',\n                    'left',\n                    'right',\n                    'center',\n                ]);\n                break;\n            case 'floating':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n                this.contentContainer.dropTarget.setTargetZones(value\n                    ? ['center']\n                    : ['top', 'bottom', 'left', 'right', 'center']);\n                toggleClass(this.container, 'dv-groupview-floating', true);\n                break;\n            case 'popout':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n                toggleClass(this.container, 'dv-groupview-popout', true);\n                break;\n        }\n        this.groupPanel.api._onDidLocationChange.fire({\n            location: this.location,\n        });\n    }\n    constructor(container, accessor, id, options, groupPanel) {\n        var _a;\n        super();\n        this.container = container;\n        this.accessor = accessor;\n        this.id = id;\n        this.options = options;\n        this.groupPanel = groupPanel;\n        this._isGroupActive = false;\n        this._locked = false;\n        this._location = { type: 'grid' };\n        this.mostRecentlyUsed = [];\n        this._overwriteRenderContainer = null;\n        this._overwriteDropTargetContainer = null;\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._width = 0;\n        this._height = 0;\n        this._panels = [];\n        this._panelDisposables = new Map();\n        this._onMove = new Emitter();\n        this.onMove = this._onMove.event;\n        this._onDidDrop = new Emitter();\n        this.onDidDrop = this._onDidDrop.event;\n        this._onWillDrop = new Emitter();\n        this.onWillDrop = this._onWillDrop.event;\n        this._onWillShowOverlay = new Emitter();\n        this.onWillShowOverlay = this._onWillShowOverlay.event;\n        this._onTabDragStart = new Emitter();\n        this.onTabDragStart = this._onTabDragStart.event;\n        this._onGroupDragStart = new Emitter();\n        this.onGroupDragStart = this._onGroupDragStart.event;\n        this._onDidAddPanel = new Emitter();\n        this.onDidAddPanel = this._onDidAddPanel.event;\n        this._onDidPanelTitleChange = new Emitter();\n        this.onDidPanelTitleChange = this._onDidPanelTitleChange.event;\n        this._onDidPanelParametersChange = new Emitter();\n        this.onDidPanelParametersChange = this._onDidPanelParametersChange.event;\n        this._onDidRemovePanel = new Emitter();\n        this.onDidRemovePanel = this._onDidRemovePanel.event;\n        this._onDidActivePanelChange = new Emitter();\n        this.onDidActivePanelChange = this._onDidActivePanelChange.event;\n        this._onUnhandledDragOverEvent = new Emitter();\n        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;\n        toggleClass(this.container, 'dv-groupview', true);\n        this._api = new DockviewApi(this.accessor);\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n        this.contentContainer = new ContentContainer(this.accessor, this);\n        container.append(this.tabsContainer.element, this.contentContainer.element);\n        this.header.hidden = !!options.hideHeader;\n        this.locked = (_a = options.locked) !== null && _a !== void 0 ? _a : false;\n        this.addDisposables(this._onTabDragStart, this._onGroupDragStart, this._onWillShowOverlay, this.tabsContainer.onTabDragStart((event) => {\n            this._onTabDragStart.fire(event);\n        }), this.tabsContainer.onGroupDragStart((event) => {\n            this._onGroupDragStart.fire(event);\n        }), this.tabsContainer.onDrop((event) => {\n            this.handleDropEvent('header', event.event, 'center', event.index);\n        }), this.contentContainer.onDidFocus(() => {\n            this.accessor.doSetGroupActive(this.groupPanel);\n        }), this.contentContainer.onDidBlur(() => {\n            // noop\n        }), this.contentContainer.dropTarget.onDrop((event) => {\n            this.handleDropEvent('content', event.nativeEvent, event.position);\n        }), this.tabsContainer.onWillShowOverlay((event) => {\n            this._onWillShowOverlay.fire(event);\n        }), this.contentContainer.dropTarget.onWillShowOverlay((event) => {\n            this._onWillShowOverlay.fire(new WillShowOverlayLocationEvent(event, {\n                kind: 'content',\n                panel: this.activePanel,\n                api: this._api,\n                group: this.groupPanel,\n                getData: getPanelData,\n            }));\n        }), this._onMove, this._onDidChange, this._onDidDrop, this._onWillDrop, this._onDidAddPanel, this._onDidRemovePanel, this._onDidActivePanelChange, this._onUnhandledDragOverEvent, this._onDidPanelTitleChange, this._onDidPanelParametersChange);\n    }\n    focusContent() {\n        this.contentContainer.element.focus();\n    }\n    set renderContainer(value) {\n        this.panels.forEach((panel) => {\n            this.renderContainer.detatch(panel);\n        });\n        this._overwriteRenderContainer = value;\n        this.panels.forEach((panel) => {\n            this.rerender(panel);\n        });\n    }\n    get renderContainer() {\n        var _a;\n        return ((_a = this._overwriteRenderContainer) !== null && _a !== void 0 ? _a : this.accessor.overlayRenderContainer);\n    }\n    set dropTargetContainer(value) {\n        this._overwriteDropTargetContainer = value;\n    }\n    get dropTargetContainer() {\n        var _a;\n        return ((_a = this._overwriteDropTargetContainer) !== null && _a !== void 0 ? _a : this.accessor.rootDropTargetContainer);\n    }\n    initialize() {\n        if (this.options.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n        if (this.options.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true);\n        this.updateContainer();\n        if (this.accessor.options.createRightHeaderActionComponent) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionComponent(this.groupPanel);\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: this._api,\n                api: this.groupPanel.api,\n                group: this.groupPanel,\n            });\n            this.tabsContainer.setRightActionsElement(this._rightHeaderActions.element);\n        }\n        if (this.accessor.options.createLeftHeaderActionComponent) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionComponent(this.groupPanel);\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: this._api,\n                api: this.groupPanel.api,\n                group: this.groupPanel,\n            });\n            this.tabsContainer.setLeftActionsElement(this._leftHeaderActions.element);\n        }\n        if (this.accessor.options.createPrefixHeaderActionComponent) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionComponent(this.groupPanel);\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: this._api,\n                api: this.groupPanel.api,\n                group: this.groupPanel,\n            });\n            this.tabsContainer.setPrefixActionsElement(this._prefixHeaderActions.element);\n        }\n    }\n    rerender(panel) {\n        this.contentContainer.renderPanel(panel, { asActive: false });\n    }\n    indexOf(panel) {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n    toJSON() {\n        var _a;\n        const result = {\n            views: this.tabsContainer.panels,\n            activeView: (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.id,\n            id: this.id,\n        };\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n        return result;\n    }\n    moveToNext(options) {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n        let normalizedIndex;\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        }\n        else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        }\n        else {\n            return;\n        }\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n    moveToPrevious(options) {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n        if (!options.panel) {\n            return;\n        }\n        const index = this.panels.indexOf(options.panel);\n        let normalizedIndex;\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        }\n        else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        }\n        else {\n            return;\n        }\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n    containsPanel(panel) {\n        return this.panels.includes(panel);\n    }\n    init(_params) {\n        //noop\n    }\n    update(_params) {\n        //noop\n    }\n    focus() {\n        var _a;\n        (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    openPanel(panel, options = {}) {\n        /**\n         * set the panel group\n         * add the panel\n         * check if group active\n         * check if panel active\n         */\n        if (typeof options.index !== 'number' ||\n            options.index > this.panels.length) {\n            options.index = this.panels.length;\n        }\n        const skipSetActive = !!options.skipSetActive;\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, {\n            skipSetActive: options.skipSetActive,\n        });\n        this.doAddPanel(panel, options.index, {\n            skipSetActive: skipSetActive,\n        });\n        if (this._activePanel === panel) {\n            this.contentContainer.renderPanel(panel, { asActive: true });\n            return;\n        }\n        if (!skipSetActive) {\n            this.doSetActivePanel(panel);\n        }\n        if (!options.skipSetGroupActive) {\n            this.accessor.doSetGroupActive(this.groupPanel);\n        }\n        if (!options.skipSetActive) {\n            this.updateContainer();\n        }\n    }\n    removePanel(groupItemOrId, options = {\n        skipSetActive: false,\n    }) {\n        const id = typeof groupItemOrId === 'string'\n            ? groupItemOrId\n            : groupItemOrId.id;\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n        return this._removePanel(panelToRemove, options);\n    }\n    closeAllPanels() {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        }\n        else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n    closePanel(panel) {\n        this.doClose(panel);\n    }\n    doClose(panel) {\n        const isLast = this.panels.length === 1 && this.accessor.groups.length === 1;\n        this.accessor.removePanel(panel, isLast && this.accessor.options.noPanelsOverlay === 'emptyGroup'\n            ? { removeEmptyGroup: false }\n            : undefined);\n    }\n    isPanelActive(panel) {\n        return this._activePanel === panel;\n    }\n    updateActions(element) {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n    setActive(isGroupActive, force = false) {\n        if (!force && this.isActive === isGroupActive) {\n            return;\n        }\n        this._isGroupActive = isGroupActive;\n        toggleClass(this.container, 'dv-active-group', isGroupActive);\n        toggleClass(this.container, 'dv-inactive-group', !isGroupActive);\n        this.tabsContainer.setActive(this.isActive);\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n        this.updateContainer();\n    }\n    layout(width, height) {\n        var _a;\n        this._width = width;\n        this._height = height;\n        this.contentContainer.layout(this._width, this._height);\n        if ((_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n    _removePanel(panel, options) {\n        const isActivePanel = this._activePanel === panel;\n        this.doRemovePanel(panel);\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel, {\n                skipSetActive: options.skipSetActive,\n                skipSetGroupActive: options.skipSetActiveGroup,\n            });\n        }\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n        if (!options.skipSetActive) {\n            this.updateContainer();\n        }\n        return panel;\n    }\n    doRemovePanel(panel) {\n        const index = this.panels.indexOf(panel);\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n        if (this.mostRecentlyUsed.includes(panel)) {\n            const index = this.mostRecentlyUsed.indexOf(panel);\n            this.mostRecentlyUsed.splice(index, 1);\n        }\n        const disposable = this._panelDisposables.get(panel.id);\n        if (disposable) {\n            disposable.dispose();\n            this._panelDisposables.delete(panel.id);\n        }\n        this._onDidRemovePanel.fire({ panel });\n    }\n    doAddPanel(panel, index = this.panels.length, options = { skipSetActive: false }) {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n        this.tabsContainer.show();\n        this.contentContainer.show();\n        this.tabsContainer.openPanel(panel, index);\n        if (!options.skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n        this._panelDisposables.set(panel.id, new CompositeDisposable(panel.api.onDidTitleChange((event) => this._onDidPanelTitleChange.fire(event)), panel.api.onDidParametersChange((event) => this._onDidPanelParametersChange.fire(event))));\n        this._onDidAddPanel.fire({ panel });\n    }\n    doSetActivePanel(panel) {\n        if (this._activePanel === panel) {\n            return;\n        }\n        this._activePanel = panel;\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n            panel.layout(this._width, this._height);\n            this.updateMru(panel);\n            this._onDidActivePanelChange.fire({\n                panel,\n            });\n        }\n    }\n    updateMru(panel) {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(this.mostRecentlyUsed.indexOf(panel), 1);\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n    updateContainer() {\n        var _a, _b;\n        this.panels.forEach((panel) => panel.runEvents());\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: this._api,\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n            addDisposableListener(this.watermark.element, 'pointerdown', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n            this.contentContainer.element.appendChild(this.watermark.element);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            (_b = (_a = this.watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);\n            this.watermark = undefined;\n        }\n    }\n    canDisplayOverlay(event, position, target) {\n        const firedEvent = new DockviewUnhandledDragOverEvent(event, target, position, getPanelData, this.accessor.getPanel(this.id));\n        this._onUnhandledDragOverEvent.fire(firedEvent);\n        return firedEvent.isAccepted;\n    }\n    handleDropEvent(type, event, position, index) {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n        function getKind() {\n            switch (type) {\n                case 'header':\n                    return typeof index === 'number' ? 'tab' : 'header_space';\n                case 'content':\n                    return 'content';\n            }\n        }\n        const panel = typeof index === 'number' ? this.panels[index] : undefined;\n        const willDropEvent = new DockviewWillDropEvent({\n            nativeEvent: event,\n            position,\n            panel,\n            getData: () => getPanelData(),\n            kind: getKind(),\n            group: this.groupPanel,\n            api: this._api,\n        });\n        this._onWillDrop.fire(willDropEvent);\n        if (willDropEvent.defaultPrevented) {\n            return;\n        }\n        const data = getPanelData();\n        if (data && data.viewId === this.accessor.id) {\n            if (type === 'content') {\n                if (data.groupId === this.id) {\n                    // don't allow to drop on self for center position\n                    if (position === 'center') {\n                        return;\n                    }\n                    if (data.panelId === null) {\n                        // don't allow group move to drop anywhere on self\n                        return;\n                    }\n                }\n            }\n            if (type === 'header') {\n                if (data.groupId === this.id) {\n                    if (data.panelId === null) {\n                        return;\n                    }\n                }\n            }\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n            const fromSameGroup = this.tabsContainer.indexOf(data.panelId) !== -1;\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        }\n        else {\n            this._onDidDrop.fire(new DockviewDidDropEvent({\n                nativeEvent: event,\n                position,\n                panel,\n                getData: () => getPanelData(),\n                group: this.groupPanel,\n                api: this._api,\n            }));\n        }\n    }\n    updateDragAndDropState() {\n        this.tabsContainer.updateDragAndDropState();\n    }\n    dispose() {\n        var _a, _b, _c;\n        super.dispose();\n        (_a = this.watermark) === null || _a === void 0 ? void 0 : _a.element.remove();\n        (_c = (_b = this.watermark) === null || _b === void 0 ? void 0 : _b.dispose) === null || _c === void 0 ? void 0 : _c.call(_b);\n        this.watermark = undefined;\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}