{"ast":null,"code":"import { AcceptableEvent } from '../events';\nexport class DockviewUnhandledDragOverEvent extends AcceptableEvent {\n  constructor(nativeEvent, target, position, getData, group) {\n    super();\n    this.nativeEvent = nativeEvent;\n    this.target = target;\n    this.position = position;\n    this.getData = getData;\n    this.group = group;\n  }\n}\nexport const PROPERTY_KEYS_DOCKVIEW = (() => {\n  /**\n   * by readong the keys from an empty value object TypeScript will error\n   * when we add or remove new properties to `DockviewOptions`\n   */\n  const properties = {\n    disableAutoResizing: undefined,\n    hideBorders: undefined,\n    singleTabMode: undefined,\n    disableFloatingGroups: undefined,\n    floatingGroupBounds: undefined,\n    popoutUrl: undefined,\n    defaultRenderer: undefined,\n    debug: undefined,\n    rootOverlayModel: undefined,\n    locked: undefined,\n    disableDnd: undefined,\n    className: undefined,\n    noPanelsOverlay: undefined,\n    dndEdges: undefined,\n    theme: undefined,\n    disableTabsOverflowList: undefined,\n    scrollbars: undefined\n  };\n  return Object.keys(properties);\n})();\nexport function isPanelOptionsWithPanel(data) {\n  if (data.referencePanel) {\n    return true;\n  }\n  return false;\n}\nexport function isPanelOptionsWithGroup(data) {\n  if (data.referenceGroup) {\n    return true;\n  }\n  return false;\n}\nexport function isGroupOptionsWithPanel(data) {\n  if (data.referencePanel) {\n    return true;\n  }\n  return false;\n}\nexport function isGroupOptionsWithGroup(data) {\n  if (data.referenceGroup) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["AcceptableEvent","DockviewUnhandledDragOverEvent","constructor","nativeEvent","target","position","getData","group","PROPERTY_KEYS_DOCKVIEW","properties","disableAutoResizing","undefined","hideBorders","singleTabMode","disableFloatingGroups","floatingGroupBounds","popoutUrl","defaultRenderer","debug","rootOverlayModel","locked","disableDnd","className","noPanelsOverlay","dndEdges","theme","disableTabsOverflowList","scrollbars","Object","keys","isPanelOptionsWithPanel","data","referencePanel","isPanelOptionsWithGroup","referenceGroup","isGroupOptionsWithPanel","isGroupOptionsWithGroup"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/dockview/options.js"],"sourcesContent":["import { AcceptableEvent } from '../events';\nexport class DockviewUnhandledDragOverEvent extends AcceptableEvent {\n    constructor(nativeEvent, target, position, getData, group) {\n        super();\n        this.nativeEvent = nativeEvent;\n        this.target = target;\n        this.position = position;\n        this.getData = getData;\n        this.group = group;\n    }\n}\nexport const PROPERTY_KEYS_DOCKVIEW = (() => {\n    /**\n     * by readong the keys from an empty value object TypeScript will error\n     * when we add or remove new properties to `DockviewOptions`\n     */\n    const properties = {\n        disableAutoResizing: undefined,\n        hideBorders: undefined,\n        singleTabMode: undefined,\n        disableFloatingGroups: undefined,\n        floatingGroupBounds: undefined,\n        popoutUrl: undefined,\n        defaultRenderer: undefined,\n        debug: undefined,\n        rootOverlayModel: undefined,\n        locked: undefined,\n        disableDnd: undefined,\n        className: undefined,\n        noPanelsOverlay: undefined,\n        dndEdges: undefined,\n        theme: undefined,\n        disableTabsOverflowList: undefined,\n        scrollbars: undefined,\n    };\n    return Object.keys(properties);\n})();\nexport function isPanelOptionsWithPanel(data) {\n    if (data.referencePanel) {\n        return true;\n    }\n    return false;\n}\nexport function isPanelOptionsWithGroup(data) {\n    if (data.referenceGroup) {\n        return true;\n    }\n    return false;\n}\nexport function isGroupOptionsWithPanel(data) {\n    if (data.referencePanel) {\n        return true;\n    }\n    return false;\n}\nexport function isGroupOptionsWithGroup(data) {\n    if (data.referenceGroup) {\n        return true;\n    }\n    return false;\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,WAAW;AAC3C,OAAO,MAAMC,8BAA8B,SAASD,eAAe,CAAC;EAChEE,WAAWA,CAACC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,KAAK,EAAE;IACvD,KAAK,CAAC,CAAC;IACP,IAAI,CAACJ,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;AACJ;AACA,OAAO,MAAMC,sBAAsB,GAAG,CAAC,MAAM;EACzC;AACJ;AACA;AACA;EACI,MAAMC,UAAU,GAAG;IACfC,mBAAmB,EAAEC,SAAS;IAC9BC,WAAW,EAAED,SAAS;IACtBE,aAAa,EAAEF,SAAS;IACxBG,qBAAqB,EAAEH,SAAS;IAChCI,mBAAmB,EAAEJ,SAAS;IAC9BK,SAAS,EAAEL,SAAS;IACpBM,eAAe,EAAEN,SAAS;IAC1BO,KAAK,EAAEP,SAAS;IAChBQ,gBAAgB,EAAER,SAAS;IAC3BS,MAAM,EAAET,SAAS;IACjBU,UAAU,EAAEV,SAAS;IACrBW,SAAS,EAAEX,SAAS;IACpBY,eAAe,EAAEZ,SAAS;IAC1Ba,QAAQ,EAAEb,SAAS;IACnBc,KAAK,EAAEd,SAAS;IAChBe,uBAAuB,EAAEf,SAAS;IAClCgB,UAAU,EAAEhB;EAChB,CAAC;EACD,OAAOiB,MAAM,CAACC,IAAI,CAACpB,UAAU,CAAC;AAClC,CAAC,EAAE,CAAC;AACJ,OAAO,SAASqB,uBAAuBA,CAACC,IAAI,EAAE;EAC1C,IAAIA,IAAI,CAACC,cAAc,EAAE;IACrB,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB;AACA,OAAO,SAASC,uBAAuBA,CAACF,IAAI,EAAE;EAC1C,IAAIA,IAAI,CAACG,cAAc,EAAE;IACrB,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB;AACA,OAAO,SAASC,uBAAuBA,CAACJ,IAAI,EAAE;EAC1C,IAAIA,IAAI,CAACC,cAAc,EAAE;IACrB,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB;AACA,OAAO,SAASI,uBAAuBA,CAACL,IAAI,EAAE;EAC1C,IAAIA,IAAI,CAACG,cAAc,EAAE;IACrB,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}