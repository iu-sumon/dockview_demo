{"ast":null,"code":"import { Emitter } from '../events';\nimport { GridviewPanelApiImpl } from './gridviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nexport class DockviewPanelApiImpl extends GridviewPanelApiImpl {\n  get location() {\n    return this.group.api.location;\n  }\n  get title() {\n    return this.panel.title;\n  }\n  get isGroupActive() {\n    return this.group.isActive;\n  }\n  get renderer() {\n    return this.panel.renderer;\n  }\n  set group(value) {\n    const oldGroup = this._group;\n    if (this._group !== value) {\n      this._group = value;\n      this._onDidGroupChange.fire({});\n      this.setupGroupEventListeners(oldGroup);\n      this._onDidLocationChange.fire({\n        location: this.group.api.location\n      });\n    }\n  }\n  get group() {\n    return this._group;\n  }\n  get tabComponent() {\n    return this._tabComponent;\n  }\n  constructor(panel, group, accessor, component, tabComponent) {\n    super(panel.id, component);\n    this.panel = panel;\n    this.accessor = accessor;\n    this._onDidTitleChange = new Emitter();\n    this.onDidTitleChange = this._onDidTitleChange.event;\n    this._onDidActiveGroupChange = new Emitter();\n    this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n    this._onDidGroupChange = new Emitter();\n    this.onDidGroupChange = this._onDidGroupChange.event;\n    this._onDidRendererChange = new Emitter();\n    this.onDidRendererChange = this._onDidRendererChange.event;\n    this._onDidLocationChange = new Emitter();\n    this.onDidLocationChange = this._onDidLocationChange.event;\n    this.groupEventsDisposable = new MutableDisposable();\n    this._tabComponent = tabComponent;\n    this.initialize(panel);\n    this._group = group;\n    this.setupGroupEventListeners();\n    this.addDisposables(this.groupEventsDisposable, this._onDidRendererChange, this._onDidTitleChange, this._onDidGroupChange, this._onDidActiveGroupChange, this._onDidLocationChange);\n  }\n  getWindow() {\n    return this.group.api.getWindow();\n  }\n  moveTo(options) {\n    var _a, _b;\n    this.accessor.moveGroupOrPanel({\n      from: {\n        groupId: this._group.id,\n        panelId: this.panel.id\n      },\n      to: {\n        group: (_a = options.group) !== null && _a !== void 0 ? _a : this._group,\n        position: options.group ? (_b = options.position) !== null && _b !== void 0 ? _b : 'center' : 'center',\n        index: options.index\n      },\n      skipSetActive: options.skipSetActive\n    });\n  }\n  setTitle(title) {\n    this.panel.setTitle(title);\n  }\n  setRenderer(renderer) {\n    this.panel.setRenderer(renderer);\n  }\n  close() {\n    this.group.model.closePanel(this.panel);\n  }\n  maximize() {\n    this.group.api.maximize();\n  }\n  isMaximized() {\n    return this.group.api.isMaximized();\n  }\n  exitMaximized() {\n    this.group.api.exitMaximized();\n  }\n  setupGroupEventListeners(previousGroup) {\n    var _a;\n    let _trackGroupActive = (_a = previousGroup === null || previousGroup === void 0 ? void 0 : previousGroup.isActive) !== null && _a !== void 0 ? _a : false; // prevent duplicate events with same state\n    this.groupEventsDisposable.value = new CompositeDisposable(this.group.api.onDidVisibilityChange(event => {\n      const hasBecomeHidden = !event.isVisible && this.isVisible;\n      const hasBecomeVisible = event.isVisible && !this.isVisible;\n      const isActivePanel = this.group.model.isPanelActive(this.panel);\n      if (hasBecomeHidden || hasBecomeVisible && isActivePanel) {\n        this._onDidVisibilityChange.fire(event);\n      }\n    }), this.group.api.onDidLocationChange(event => {\n      if (this.group !== this.panel.group) {\n        return;\n      }\n      this._onDidLocationChange.fire(event);\n    }), this.group.api.onDidActiveChange(() => {\n      if (this.group !== this.panel.group) {\n        return;\n      }\n      if (_trackGroupActive !== this.isGroupActive) {\n        _trackGroupActive = this.isGroupActive;\n        this._onDidActiveGroupChange.fire({\n          isActive: this.isGroupActive\n        });\n      }\n    }));\n  }\n}","map":{"version":3,"names":["Emitter","GridviewPanelApiImpl","CompositeDisposable","MutableDisposable","DockviewPanelApiImpl","location","group","api","title","panel","isGroupActive","isActive","renderer","value","oldGroup","_group","_onDidGroupChange","fire","setupGroupEventListeners","_onDidLocationChange","tabComponent","_tabComponent","constructor","accessor","component","id","_onDidTitleChange","onDidTitleChange","event","_onDidActiveGroupChange","onDidActiveGroupChange","onDidGroupChange","_onDidRendererChange","onDidRendererChange","onDidLocationChange","groupEventsDisposable","initialize","addDisposables","getWindow","moveTo","options","_a","_b","moveGroupOrPanel","from","groupId","panelId","to","position","index","skipSetActive","setTitle","setRenderer","close","model","closePanel","maximize","isMaximized","exitMaximized","previousGroup","_trackGroupActive","onDidVisibilityChange","hasBecomeHidden","isVisible","hasBecomeVisible","isActivePanel","isPanelActive","_onDidVisibilityChange","onDidActiveChange"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/api/dockviewPanelApi.js"],"sourcesContent":["import { Emitter } from '../events';\nimport { GridviewPanelApiImpl } from './gridviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nexport class DockviewPanelApiImpl extends GridviewPanelApiImpl {\n    get location() {\n        return this.group.api.location;\n    }\n    get title() {\n        return this.panel.title;\n    }\n    get isGroupActive() {\n        return this.group.isActive;\n    }\n    get renderer() {\n        return this.panel.renderer;\n    }\n    set group(value) {\n        const oldGroup = this._group;\n        if (this._group !== value) {\n            this._group = value;\n            this._onDidGroupChange.fire({});\n            this.setupGroupEventListeners(oldGroup);\n            this._onDidLocationChange.fire({\n                location: this.group.api.location,\n            });\n        }\n    }\n    get group() {\n        return this._group;\n    }\n    get tabComponent() {\n        return this._tabComponent;\n    }\n    constructor(panel, group, accessor, component, tabComponent) {\n        super(panel.id, component);\n        this.panel = panel;\n        this.accessor = accessor;\n        this._onDidTitleChange = new Emitter();\n        this.onDidTitleChange = this._onDidTitleChange.event;\n        this._onDidActiveGroupChange = new Emitter();\n        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n        this._onDidGroupChange = new Emitter();\n        this.onDidGroupChange = this._onDidGroupChange.event;\n        this._onDidRendererChange = new Emitter();\n        this.onDidRendererChange = this._onDidRendererChange.event;\n        this._onDidLocationChange = new Emitter();\n        this.onDidLocationChange = this._onDidLocationChange.event;\n        this.groupEventsDisposable = new MutableDisposable();\n        this._tabComponent = tabComponent;\n        this.initialize(panel);\n        this._group = group;\n        this.setupGroupEventListeners();\n        this.addDisposables(this.groupEventsDisposable, this._onDidRendererChange, this._onDidTitleChange, this._onDidGroupChange, this._onDidActiveGroupChange, this._onDidLocationChange);\n    }\n    getWindow() {\n        return this.group.api.getWindow();\n    }\n    moveTo(options) {\n        var _a, _b;\n        this.accessor.moveGroupOrPanel({\n            from: { groupId: this._group.id, panelId: this.panel.id },\n            to: {\n                group: (_a = options.group) !== null && _a !== void 0 ? _a : this._group,\n                position: options.group\n                    ? (_b = options.position) !== null && _b !== void 0 ? _b : 'center'\n                    : 'center',\n                index: options.index,\n            },\n            skipSetActive: options.skipSetActive,\n        });\n    }\n    setTitle(title) {\n        this.panel.setTitle(title);\n    }\n    setRenderer(renderer) {\n        this.panel.setRenderer(renderer);\n    }\n    close() {\n        this.group.model.closePanel(this.panel);\n    }\n    maximize() {\n        this.group.api.maximize();\n    }\n    isMaximized() {\n        return this.group.api.isMaximized();\n    }\n    exitMaximized() {\n        this.group.api.exitMaximized();\n    }\n    setupGroupEventListeners(previousGroup) {\n        var _a;\n        let _trackGroupActive = (_a = previousGroup === null || previousGroup === void 0 ? void 0 : previousGroup.isActive) !== null && _a !== void 0 ? _a : false; // prevent duplicate events with same state\n        this.groupEventsDisposable.value = new CompositeDisposable(this.group.api.onDidVisibilityChange((event) => {\n            const hasBecomeHidden = !event.isVisible && this.isVisible;\n            const hasBecomeVisible = event.isVisible && !this.isVisible;\n            const isActivePanel = this.group.model.isPanelActive(this.panel);\n            if (hasBecomeHidden || (hasBecomeVisible && isActivePanel)) {\n                this._onDidVisibilityChange.fire(event);\n            }\n        }), this.group.api.onDidLocationChange((event) => {\n            if (this.group !== this.panel.group) {\n                return;\n            }\n            this._onDidLocationChange.fire(event);\n        }), this.group.api.onDidActiveChange(() => {\n            if (this.group !== this.panel.group) {\n                return;\n            }\n            if (_trackGroupActive !== this.isGroupActive) {\n                _trackGroupActive = this.isGroupActive;\n                this._onDidActiveGroupChange.fire({\n                    isActive: this.isGroupActive,\n                });\n            }\n        }));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}