{"ast":null,"code":"import { positionToDirection } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { GridviewPanelApiImpl } from './gridviewPanelApi';\nconst NOT_INITIALIZED_MESSAGE = 'dockview: DockviewGroupPanelApiImpl not initialized';\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n  get location() {\n    if (!this._group) {\n      throw new Error(NOT_INITIALIZED_MESSAGE);\n    }\n    return this._group.model.location;\n  }\n  constructor(id, accessor) {\n    super(id, '__dockviewgroup__');\n    this.accessor = accessor;\n    this._onDidLocationChange = new Emitter();\n    this.onDidLocationChange = this._onDidLocationChange.event;\n    this._onDidActivePanelChange = new Emitter();\n    this.onDidActivePanelChange = this._onDidActivePanelChange.event;\n    this.addDisposables(this._onDidLocationChange, this._onDidActivePanelChange);\n  }\n  close() {\n    if (!this._group) {\n      return;\n    }\n    return this.accessor.removeGroup(this._group);\n  }\n  getWindow() {\n    return this.location.type === 'popout' ? this.location.getWindow() : window;\n  }\n  moveTo(options) {\n    var _a, _b, _c, _d;\n    if (!this._group) {\n      throw new Error(NOT_INITIALIZED_MESSAGE);\n    }\n    const group = (_a = options.group) !== null && _a !== void 0 ? _a : this.accessor.addGroup({\n      direction: positionToDirection((_b = options.position) !== null && _b !== void 0 ? _b : 'right'),\n      skipSetActive: (_c = options.skipSetActive) !== null && _c !== void 0 ? _c : false\n    });\n    this.accessor.moveGroupOrPanel({\n      from: {\n        groupId: this._group.id\n      },\n      to: {\n        group,\n        position: options.group ? (_d = options.position) !== null && _d !== void 0 ? _d : 'center' : 'center',\n        index: options.index\n      },\n      skipSetActive: options.skipSetActive\n    });\n  }\n  maximize() {\n    if (!this._group) {\n      throw new Error(NOT_INITIALIZED_MESSAGE);\n    }\n    if (this.location.type !== 'grid') {\n      // only grid groups can be maximized\n      return;\n    }\n    this.accessor.maximizeGroup(this._group);\n  }\n  isMaximized() {\n    if (!this._group) {\n      throw new Error(NOT_INITIALIZED_MESSAGE);\n    }\n    return this.accessor.isMaximizedGroup(this._group);\n  }\n  exitMaximized() {\n    if (!this._group) {\n      throw new Error(NOT_INITIALIZED_MESSAGE);\n    }\n    if (this.isMaximized()) {\n      this.accessor.exitMaximizedGroup();\n    }\n  }\n  initialize(group) {\n    this._group = group;\n  }\n}","map":{"version":3,"names":["positionToDirection","Emitter","GridviewPanelApiImpl","NOT_INITIALIZED_MESSAGE","DockviewGroupPanelApiImpl","location","_group","Error","model","constructor","id","accessor","_onDidLocationChange","onDidLocationChange","event","_onDidActivePanelChange","onDidActivePanelChange","addDisposables","close","removeGroup","getWindow","type","window","moveTo","options","_a","_b","_c","_d","group","addGroup","direction","position","skipSetActive","moveGroupOrPanel","from","groupId","to","index","maximize","maximizeGroup","isMaximized","isMaximizedGroup","exitMaximized","exitMaximizedGroup","initialize"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/api/dockviewGroupPanelApi.js"],"sourcesContent":["import { positionToDirection } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { GridviewPanelApiImpl } from './gridviewPanelApi';\nconst NOT_INITIALIZED_MESSAGE = 'dockview: DockviewGroupPanelApiImpl not initialized';\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    get location() {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n        return this._group.model.location;\n    }\n    constructor(id, accessor) {\n        super(id, '__dockviewgroup__');\n        this.accessor = accessor;\n        this._onDidLocationChange = new Emitter();\n        this.onDidLocationChange = this._onDidLocationChange.event;\n        this._onDidActivePanelChange = new Emitter();\n        this.onDidActivePanelChange = this._onDidActivePanelChange.event;\n        this.addDisposables(this._onDidLocationChange, this._onDidActivePanelChange);\n    }\n    close() {\n        if (!this._group) {\n            return;\n        }\n        return this.accessor.removeGroup(this._group);\n    }\n    getWindow() {\n        return this.location.type === 'popout'\n            ? this.location.getWindow()\n            : window;\n    }\n    moveTo(options) {\n        var _a, _b, _c, _d;\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n        const group = (_a = options.group) !== null && _a !== void 0 ? _a : this.accessor.addGroup({\n            direction: positionToDirection((_b = options.position) !== null && _b !== void 0 ? _b : 'right'),\n            skipSetActive: (_c = options.skipSetActive) !== null && _c !== void 0 ? _c : false,\n        });\n        this.accessor.moveGroupOrPanel({\n            from: { groupId: this._group.id },\n            to: {\n                group,\n                position: options.group\n                    ? (_d = options.position) !== null && _d !== void 0 ? _d : 'center'\n                    : 'center',\n                index: options.index,\n            },\n            skipSetActive: options.skipSetActive,\n        });\n    }\n    maximize() {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n        if (this.location.type !== 'grid') {\n            // only grid groups can be maximized\n            return;\n        }\n        this.accessor.maximizeGroup(this._group);\n    }\n    isMaximized() {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n        return this.accessor.isMaximizedGroup(this._group);\n    }\n    exitMaximized() {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n        if (this.isMaximized()) {\n            this.accessor.exitMaximizedGroup();\n        }\n    }\n    initialize(group) {\n        this._group = group;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}