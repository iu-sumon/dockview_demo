{"ast":null,"code":"import { disableIframePointEvents, quasiDefaultPrevented, toggleClass } from '../dom';\nimport { Emitter, addDisposableListener } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nclass AriaLevelTracker {\n  constructor() {\n    this._orderedList = [];\n  }\n  push(element) {\n    this._orderedList = [...this._orderedList.filter(item => item !== element), element];\n    this.update();\n  }\n  destroy(element) {\n    this._orderedList = this._orderedList.filter(item => item !== element);\n    this.update();\n  }\n  update() {\n    for (let i = 0; i < this._orderedList.length; i++) {\n      this._orderedList[i].setAttribute('aria-level', `${i}`);\n      this._orderedList[i].style.zIndex = `calc(var(--dv-overlay-z-index, 999) + ${i * 2})`;\n    }\n  }\n}\nconst arialLevelTracker = new AriaLevelTracker();\nexport class Overlay extends CompositeDisposable {\n  set minimumInViewportWidth(value) {\n    this.options.minimumInViewportWidth = value;\n  }\n  set minimumInViewportHeight(value) {\n    this.options.minimumInViewportHeight = value;\n  }\n  get element() {\n    return this._element;\n  }\n  get isVisible() {\n    return this._isVisible;\n  }\n  constructor(options) {\n    super();\n    this.options = options;\n    this._element = document.createElement('div');\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n    this._onDidChangeEnd = new Emitter();\n    this.onDidChangeEnd = this._onDidChangeEnd.event;\n    this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n    this._element.className = 'dv-resize-container';\n    this._isVisible = true;\n    this.setupResize('top');\n    this.setupResize('bottom');\n    this.setupResize('left');\n    this.setupResize('right');\n    this.setupResize('topleft');\n    this.setupResize('topright');\n    this.setupResize('bottomleft');\n    this.setupResize('bottomright');\n    this._element.appendChild(this.options.content);\n    this.options.container.appendChild(this._element);\n    // if input bad resize within acceptable boundaries\n    this.setBounds(Object.assign(Object.assign(Object.assign(Object.assign({\n      height: this.options.height,\n      width: this.options.width\n    }, 'top' in this.options && {\n      top: this.options.top\n    }), 'bottom' in this.options && {\n      bottom: this.options.bottom\n    }), 'left' in this.options && {\n      left: this.options.left\n    }), 'right' in this.options && {\n      right: this.options.right\n    }));\n    arialLevelTracker.push(this._element);\n  }\n  setVisible(isVisible) {\n    if (isVisible === this.isVisible) {\n      return;\n    }\n    this._isVisible = isVisible;\n    toggleClass(this.element, 'dv-hidden', !this.isVisible);\n  }\n  bringToFront() {\n    arialLevelTracker.push(this._element);\n  }\n  setBounds(bounds = {}) {\n    if (typeof bounds.height === 'number') {\n      this._element.style.height = `${bounds.height}px`;\n    }\n    if (typeof bounds.width === 'number') {\n      this._element.style.width = `${bounds.width}px`;\n    }\n    if ('top' in bounds && typeof bounds.top === 'number') {\n      this._element.style.top = `${bounds.top}px`;\n      this._element.style.bottom = 'auto';\n      this.verticalAlignment = 'top';\n    }\n    if ('bottom' in bounds && typeof bounds.bottom === 'number') {\n      this._element.style.bottom = `${bounds.bottom}px`;\n      this._element.style.top = 'auto';\n      this.verticalAlignment = 'bottom';\n    }\n    if ('left' in bounds && typeof bounds.left === 'number') {\n      this._element.style.left = `${bounds.left}px`;\n      this._element.style.right = 'auto';\n      this.horiziontalAlignment = 'left';\n    }\n    if ('right' in bounds && typeof bounds.right === 'number') {\n      this._element.style.right = `${bounds.right}px`;\n      this._element.style.left = 'auto';\n      this.horiziontalAlignment = 'right';\n    }\n    const containerRect = this.options.container.getBoundingClientRect();\n    const overlayRect = this._element.getBoundingClientRect();\n    // region: ensure bounds within allowable limits\n    // a minimum width of minimumViewportWidth must be inside the viewport\n    const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n    // a minimum height of minimumViewportHeight must be inside the viewport\n    const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));\n    if (this.verticalAlignment === 'top') {\n      const top = clamp(overlayRect.top - containerRect.top, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));\n      this._element.style.top = `${top}px`;\n      this._element.style.bottom = 'auto';\n    }\n    if (this.verticalAlignment === 'bottom') {\n      const bottom = clamp(containerRect.bottom - overlayRect.bottom, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));\n      this._element.style.bottom = `${bottom}px`;\n      this._element.style.top = 'auto';\n    }\n    if (this.horiziontalAlignment === 'left') {\n      const left = clamp(overlayRect.left - containerRect.left, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));\n      this._element.style.left = `${left}px`;\n      this._element.style.right = 'auto';\n    }\n    if (this.horiziontalAlignment === 'right') {\n      const right = clamp(containerRect.right - overlayRect.right, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));\n      this._element.style.right = `${right}px`;\n      this._element.style.left = 'auto';\n    }\n    this._onDidChange.fire();\n  }\n  toJSON() {\n    const container = this.options.container.getBoundingClientRect();\n    const element = this._element.getBoundingClientRect();\n    const result = {};\n    if (this.verticalAlignment === 'top') {\n      result.top = parseFloat(this._element.style.top);\n    } else if (this.verticalAlignment === 'bottom') {\n      result.bottom = parseFloat(this._element.style.bottom);\n    } else {\n      result.top = element.top - container.top;\n    }\n    if (this.horiziontalAlignment === 'left') {\n      result.left = parseFloat(this._element.style.left);\n    } else if (this.horiziontalAlignment === 'right') {\n      result.right = parseFloat(this._element.style.right);\n    } else {\n      result.left = element.left - container.left;\n    }\n    result.width = element.width;\n    result.height = element.height;\n    return result;\n  }\n  setupDrag(dragTarget, options = {\n    inDragMode: false\n  }) {\n    const move = new MutableDisposable();\n    const track = () => {\n      let offset = null;\n      const iframes = disableIframePointEvents();\n      move.value = new CompositeDisposable({\n        dispose: () => {\n          iframes.release();\n        }\n      }, addDisposableListener(window, 'pointermove', e => {\n        const containerRect = this.options.container.getBoundingClientRect();\n        const x = e.clientX - containerRect.left;\n        const y = e.clientY - containerRect.top;\n        toggleClass(this._element, 'dv-resize-container-dragging', true);\n        const overlayRect = this._element.getBoundingClientRect();\n        if (offset === null) {\n          offset = {\n            x: e.clientX - overlayRect.left,\n            y: e.clientY - overlayRect.top\n          };\n        }\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n        const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));\n        const top = clamp(y - offset.y, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));\n        const bottom = clamp(offset.y - y + containerRect.height - overlayRect.height, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));\n        const left = clamp(x - offset.x, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));\n        const right = clamp(offset.x - x + containerRect.width - overlayRect.width, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));\n        const bounds = {};\n        // Anchor to top or to bottom depending on which one is closer\n        if (top <= bottom) {\n          bounds.top = top;\n        } else {\n          bounds.bottom = bottom;\n        }\n        // Anchor to left or to right depending on which one is closer\n        if (left <= right) {\n          bounds.left = left;\n        } else {\n          bounds.right = right;\n        }\n        this.setBounds(bounds);\n      }), addDisposableListener(window, 'pointerup', () => {\n        toggleClass(this._element, 'dv-resize-container-dragging', false);\n        move.dispose();\n        this._onDidChangeEnd.fire();\n      }));\n    };\n    this.addDisposables(move, addDisposableListener(dragTarget, 'pointerdown', event => {\n      if (event.defaultPrevented) {\n        event.preventDefault();\n        return;\n      }\n      // if somebody has marked this event then treat as a defaultPrevented\n      // without actually calling event.preventDefault()\n      if (quasiDefaultPrevented(event)) {\n        return;\n      }\n      track();\n    }), addDisposableListener(this.options.content, 'pointerdown', event => {\n      if (event.defaultPrevented) {\n        return;\n      }\n      // if somebody has marked this event then treat as a defaultPrevented\n      // without actually calling event.preventDefault()\n      if (quasiDefaultPrevented(event)) {\n        return;\n      }\n      if (event.shiftKey) {\n        track();\n      }\n    }), addDisposableListener(this.options.content, 'pointerdown', () => {\n      arialLevelTracker.push(this._element);\n    }, true));\n    if (options.inDragMode) {\n      track();\n    }\n  }\n  setupResize(direction) {\n    const resizeHandleElement = document.createElement('div');\n    resizeHandleElement.className = `dv-resize-handle-${direction}`;\n    this._element.appendChild(resizeHandleElement);\n    const move = new MutableDisposable();\n    this.addDisposables(move, addDisposableListener(resizeHandleElement, 'pointerdown', e => {\n      e.preventDefault();\n      let startPosition = null;\n      const iframes = disableIframePointEvents();\n      move.value = new CompositeDisposable(addDisposableListener(window, 'pointermove', e => {\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n        const y = e.clientY - containerRect.top;\n        const x = e.clientX - containerRect.left;\n        if (startPosition === null) {\n          // record the initial dimensions since as all subsequence moves are relative to this\n          startPosition = {\n            originalY: y,\n            originalHeight: overlayRect.height,\n            originalX: x,\n            originalWidth: overlayRect.width\n          };\n        }\n        let top = undefined;\n        let bottom = undefined;\n        let height = undefined;\n        let left = undefined;\n        let right = undefined;\n        let width = undefined;\n        const moveTop = () => {\n          top = clamp(y, -Number.MAX_VALUE, startPosition.originalY + startPosition.originalHeight > containerRect.height ? this.getMinimumHeight(containerRect.height) : Math.max(0, startPosition.originalY + startPosition.originalHeight - Overlay.MINIMUM_HEIGHT));\n          height = startPosition.originalY + startPosition.originalHeight - top;\n          bottom = containerRect.height - top - height;\n        };\n        const moveBottom = () => {\n          top = startPosition.originalY - startPosition.originalHeight;\n          height = clamp(y - top, top < 0 && typeof this.options.minimumInViewportHeight === 'number' ? -top + this.options.minimumInViewportHeight : Overlay.MINIMUM_HEIGHT, Number.MAX_VALUE);\n          bottom = containerRect.height - top - height;\n        };\n        const moveLeft = () => {\n          left = clamp(x, -Number.MAX_VALUE, startPosition.originalX + startPosition.originalWidth > containerRect.width ? this.getMinimumWidth(containerRect.width) : Math.max(0, startPosition.originalX + startPosition.originalWidth - Overlay.MINIMUM_WIDTH));\n          width = startPosition.originalX + startPosition.originalWidth - left;\n          right = containerRect.width - left - width;\n        };\n        const moveRight = () => {\n          left = startPosition.originalX - startPosition.originalWidth;\n          width = clamp(x - left, left < 0 && typeof this.options.minimumInViewportWidth === 'number' ? -left + this.options.minimumInViewportWidth : Overlay.MINIMUM_WIDTH, Number.MAX_VALUE);\n          right = containerRect.width - left - width;\n        };\n        switch (direction) {\n          case 'top':\n            moveTop();\n            break;\n          case 'bottom':\n            moveBottom();\n            break;\n          case 'left':\n            moveLeft();\n            break;\n          case 'right':\n            moveRight();\n            break;\n          case 'topleft':\n            moveTop();\n            moveLeft();\n            break;\n          case 'topright':\n            moveTop();\n            moveRight();\n            break;\n          case 'bottomleft':\n            moveBottom();\n            moveLeft();\n            break;\n          case 'bottomright':\n            moveBottom();\n            moveRight();\n            break;\n        }\n        const bounds = {};\n        // Anchor to top or to bottom depending on which one is closer\n        if (top <= bottom) {\n          bounds.top = top;\n        } else {\n          bounds.bottom = bottom;\n        }\n        // Anchor to left or to right depending on which one is closer\n        if (left <= right) {\n          bounds.left = left;\n        } else {\n          bounds.right = right;\n        }\n        bounds.height = height;\n        bounds.width = width;\n        this.setBounds(bounds);\n      }), {\n        dispose: () => {\n          iframes.release();\n        }\n      }, addDisposableListener(window, 'pointerup', () => {\n        move.dispose();\n        this._onDidChangeEnd.fire();\n      }));\n    }));\n  }\n  getMinimumWidth(width) {\n    if (typeof this.options.minimumInViewportWidth === 'number') {\n      return width - this.options.minimumInViewportWidth;\n    }\n    return 0;\n  }\n  getMinimumHeight(height) {\n    if (typeof this.options.minimumInViewportHeight === 'number') {\n      return height - this.options.minimumInViewportHeight;\n    }\n    return 0;\n  }\n  dispose() {\n    arialLevelTracker.destroy(this._element);\n    this._element.remove();\n    super.dispose();\n  }\n}\nOverlay.MINIMUM_HEIGHT = 20;\nOverlay.MINIMUM_WIDTH = 20;","map":{"version":3,"names":["disableIframePointEvents","quasiDefaultPrevented","toggleClass","Emitter","addDisposableListener","CompositeDisposable","MutableDisposable","clamp","AriaLevelTracker","constructor","_orderedList","push","element","filter","item","update","destroy","i","length","setAttribute","style","zIndex","arialLevelTracker","Overlay","minimumInViewportWidth","value","options","minimumInViewportHeight","_element","isVisible","_isVisible","document","createElement","_onDidChange","onDidChange","event","_onDidChangeEnd","onDidChangeEnd","addDisposables","className","setupResize","appendChild","content","container","setBounds","Object","assign","height","width","top","bottom","left","right","setVisible","bringToFront","bounds","verticalAlignment","horiziontalAlignment","containerRect","getBoundingClientRect","overlayRect","xOffset","Math","max","getMinimumWidth","yOffset","getMinimumHeight","fire","toJSON","result","parseFloat","setupDrag","dragTarget","inDragMode","move","track","offset","iframes","dispose","release","window","e","x","clientX","y","clientY","defaultPrevented","preventDefault","shiftKey","direction","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","undefined","moveTop","Number","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","remove"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/overlay/overlay.js"],"sourcesContent":["import { disableIframePointEvents, quasiDefaultPrevented, toggleClass, } from '../dom';\nimport { Emitter, addDisposableListener, } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nclass AriaLevelTracker {\n    constructor() {\n        this._orderedList = [];\n    }\n    push(element) {\n        this._orderedList = [\n            ...this._orderedList.filter((item) => item !== element),\n            element,\n        ];\n        this.update();\n    }\n    destroy(element) {\n        this._orderedList = this._orderedList.filter((item) => item !== element);\n        this.update();\n    }\n    update() {\n        for (let i = 0; i < this._orderedList.length; i++) {\n            this._orderedList[i].setAttribute('aria-level', `${i}`);\n            this._orderedList[i].style.zIndex = `calc(var(--dv-overlay-z-index, 999) + ${i * 2})`;\n        }\n    }\n}\nconst arialLevelTracker = new AriaLevelTracker();\nexport class Overlay extends CompositeDisposable {\n    set minimumInViewportWidth(value) {\n        this.options.minimumInViewportWidth = value;\n    }\n    set minimumInViewportHeight(value) {\n        this.options.minimumInViewportHeight = value;\n    }\n    get element() {\n        return this._element;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n    constructor(options) {\n        super();\n        this.options = options;\n        this._element = document.createElement('div');\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._onDidChangeEnd = new Emitter();\n        this.onDidChangeEnd = this._onDidChangeEnd.event;\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n        this._element.className = 'dv-resize-container';\n        this._isVisible = true;\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n        // if input bad resize within acceptable boundaries\n        this.setBounds(Object.assign(Object.assign(Object.assign(Object.assign({ height: this.options.height, width: this.options.width }, ('top' in this.options && { top: this.options.top })), ('bottom' in this.options && { bottom: this.options.bottom })), ('left' in this.options && { left: this.options.left })), ('right' in this.options && { right: this.options.right })));\n        arialLevelTracker.push(this._element);\n    }\n    setVisible(isVisible) {\n        if (isVisible === this.isVisible) {\n            return;\n        }\n        this._isVisible = isVisible;\n        toggleClass(this.element, 'dv-hidden', !this.isVisible);\n    }\n    bringToFront() {\n        arialLevelTracker.push(this._element);\n    }\n    setBounds(bounds = {}) {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if ('top' in bounds && typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n            this._element.style.bottom = 'auto';\n            this.verticalAlignment = 'top';\n        }\n        if ('bottom' in bounds && typeof bounds.bottom === 'number') {\n            this._element.style.bottom = `${bounds.bottom}px`;\n            this._element.style.top = 'auto';\n            this.verticalAlignment = 'bottom';\n        }\n        if ('left' in bounds && typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n            this._element.style.right = 'auto';\n            this.horiziontalAlignment = 'left';\n        }\n        if ('right' in bounds && typeof bounds.right === 'number') {\n            this._element.style.right = `${bounds.right}px`;\n            this._element.style.left = 'auto';\n            this.horiziontalAlignment = 'right';\n        }\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n        // region: ensure bounds within allowable limits\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));\n        if (this.verticalAlignment === 'top') {\n            const top = clamp(overlayRect.top - containerRect.top, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));\n            this._element.style.top = `${top}px`;\n            this._element.style.bottom = 'auto';\n        }\n        if (this.verticalAlignment === 'bottom') {\n            const bottom = clamp(containerRect.bottom - overlayRect.bottom, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));\n            this._element.style.bottom = `${bottom}px`;\n            this._element.style.top = 'auto';\n        }\n        if (this.horiziontalAlignment === 'left') {\n            const left = clamp(overlayRect.left - containerRect.left, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));\n            this._element.style.left = `${left}px`;\n            this._element.style.right = 'auto';\n        }\n        if (this.horiziontalAlignment === 'right') {\n            const right = clamp(containerRect.right - overlayRect.right, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));\n            this._element.style.right = `${right}px`;\n            this._element.style.left = 'auto';\n        }\n        this._onDidChange.fire();\n    }\n    toJSON() {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n        const result = {};\n        if (this.verticalAlignment === 'top') {\n            result.top = parseFloat(this._element.style.top);\n        }\n        else if (this.verticalAlignment === 'bottom') {\n            result.bottom = parseFloat(this._element.style.bottom);\n        }\n        else {\n            result.top = element.top - container.top;\n        }\n        if (this.horiziontalAlignment === 'left') {\n            result.left = parseFloat(this._element.style.left);\n        }\n        else if (this.horiziontalAlignment === 'right') {\n            result.right = parseFloat(this._element.style.right);\n        }\n        else {\n            result.left = element.left - container.left;\n        }\n        result.width = element.width;\n        result.height = element.height;\n        return result;\n    }\n    setupDrag(dragTarget, options = { inDragMode: false }) {\n        const move = new MutableDisposable();\n        const track = () => {\n            let offset = null;\n            const iframes = disableIframePointEvents();\n            move.value = new CompositeDisposable({\n                dispose: () => {\n                    iframes.release();\n                },\n            }, addDisposableListener(window, 'pointermove', (e) => {\n                const containerRect = this.options.container.getBoundingClientRect();\n                const x = e.clientX - containerRect.left;\n                const y = e.clientY - containerRect.top;\n                toggleClass(this._element, 'dv-resize-container-dragging', true);\n                const overlayRect = this._element.getBoundingClientRect();\n                if (offset === null) {\n                    offset = {\n                        x: e.clientX - overlayRect.left,\n                        y: e.clientY - overlayRect.top,\n                    };\n                }\n                const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n                const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));\n                const top = clamp(y - offset.y, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));\n                const bottom = clamp(offset.y -\n                    y +\n                    containerRect.height -\n                    overlayRect.height, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));\n                const left = clamp(x - offset.x, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));\n                const right = clamp(offset.x - x + containerRect.width - overlayRect.width, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));\n                const bounds = {};\n                // Anchor to top or to bottom depending on which one is closer\n                if (top <= bottom) {\n                    bounds.top = top;\n                }\n                else {\n                    bounds.bottom = bottom;\n                }\n                // Anchor to left or to right depending on which one is closer\n                if (left <= right) {\n                    bounds.left = left;\n                }\n                else {\n                    bounds.right = right;\n                }\n                this.setBounds(bounds);\n            }), addDisposableListener(window, 'pointerup', () => {\n                toggleClass(this._element, 'dv-resize-container-dragging', false);\n                move.dispose();\n                this._onDidChangeEnd.fire();\n            }));\n        };\n        this.addDisposables(move, addDisposableListener(dragTarget, 'pointerdown', (event) => {\n            if (event.defaultPrevented) {\n                event.preventDefault();\n                return;\n            }\n            // if somebody has marked this event then treat as a defaultPrevented\n            // without actually calling event.preventDefault()\n            if (quasiDefaultPrevented(event)) {\n                return;\n            }\n            track();\n        }), addDisposableListener(this.options.content, 'pointerdown', (event) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n            // if somebody has marked this event then treat as a defaultPrevented\n            // without actually calling event.preventDefault()\n            if (quasiDefaultPrevented(event)) {\n                return;\n            }\n            if (event.shiftKey) {\n                track();\n            }\n        }), addDisposableListener(this.options.content, 'pointerdown', () => {\n            arialLevelTracker.push(this._element);\n        }, true));\n        if (options.inDragMode) {\n            track();\n        }\n    }\n    setupResize(direction) {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n        const move = new MutableDisposable();\n        this.addDisposables(move, addDisposableListener(resizeHandleElement, 'pointerdown', (e) => {\n            e.preventDefault();\n            let startPosition = null;\n            const iframes = disableIframePointEvents();\n            move.value = new CompositeDisposable(addDisposableListener(window, 'pointermove', (e) => {\n                const containerRect = this.options.container.getBoundingClientRect();\n                const overlayRect = this._element.getBoundingClientRect();\n                const y = e.clientY - containerRect.top;\n                const x = e.clientX - containerRect.left;\n                if (startPosition === null) {\n                    // record the initial dimensions since as all subsequence moves are relative to this\n                    startPosition = {\n                        originalY: y,\n                        originalHeight: overlayRect.height,\n                        originalX: x,\n                        originalWidth: overlayRect.width,\n                    };\n                }\n                let top = undefined;\n                let bottom = undefined;\n                let height = undefined;\n                let left = undefined;\n                let right = undefined;\n                let width = undefined;\n                const moveTop = () => {\n                    top = clamp(y, -Number.MAX_VALUE, startPosition.originalY +\n                        startPosition.originalHeight >\n                        containerRect.height\n                        ? this.getMinimumHeight(containerRect.height)\n                        : Math.max(0, startPosition.originalY +\n                            startPosition.originalHeight -\n                            Overlay.MINIMUM_HEIGHT));\n                    height =\n                        startPosition.originalY +\n                            startPosition.originalHeight -\n                            top;\n                    bottom = containerRect.height - top - height;\n                };\n                const moveBottom = () => {\n                    top =\n                        startPosition.originalY -\n                            startPosition.originalHeight;\n                    height = clamp(y - top, top < 0 &&\n                        typeof this.options\n                            .minimumInViewportHeight === 'number'\n                        ? -top +\n                            this.options.minimumInViewportHeight\n                        : Overlay.MINIMUM_HEIGHT, Number.MAX_VALUE);\n                    bottom = containerRect.height - top - height;\n                };\n                const moveLeft = () => {\n                    left = clamp(x, -Number.MAX_VALUE, startPosition.originalX +\n                        startPosition.originalWidth >\n                        containerRect.width\n                        ? this.getMinimumWidth(containerRect.width)\n                        : Math.max(0, startPosition.originalX +\n                            startPosition.originalWidth -\n                            Overlay.MINIMUM_WIDTH));\n                    width =\n                        startPosition.originalX +\n                            startPosition.originalWidth -\n                            left;\n                    right = containerRect.width - left - width;\n                };\n                const moveRight = () => {\n                    left =\n                        startPosition.originalX -\n                            startPosition.originalWidth;\n                    width = clamp(x - left, left < 0 &&\n                        typeof this.options\n                            .minimumInViewportWidth === 'number'\n                        ? -left +\n                            this.options.minimumInViewportWidth\n                        : Overlay.MINIMUM_WIDTH, Number.MAX_VALUE);\n                    right = containerRect.width - left - width;\n                };\n                switch (direction) {\n                    case 'top':\n                        moveTop();\n                        break;\n                    case 'bottom':\n                        moveBottom();\n                        break;\n                    case 'left':\n                        moveLeft();\n                        break;\n                    case 'right':\n                        moveRight();\n                        break;\n                    case 'topleft':\n                        moveTop();\n                        moveLeft();\n                        break;\n                    case 'topright':\n                        moveTop();\n                        moveRight();\n                        break;\n                    case 'bottomleft':\n                        moveBottom();\n                        moveLeft();\n                        break;\n                    case 'bottomright':\n                        moveBottom();\n                        moveRight();\n                        break;\n                }\n                const bounds = {};\n                // Anchor to top or to bottom depending on which one is closer\n                if (top <= bottom) {\n                    bounds.top = top;\n                }\n                else {\n                    bounds.bottom = bottom;\n                }\n                // Anchor to left or to right depending on which one is closer\n                if (left <= right) {\n                    bounds.left = left;\n                }\n                else {\n                    bounds.right = right;\n                }\n                bounds.height = height;\n                bounds.width = width;\n                this.setBounds(bounds);\n            }), {\n                dispose: () => {\n                    iframes.release();\n                },\n            }, addDisposableListener(window, 'pointerup', () => {\n                move.dispose();\n                this._onDidChangeEnd.fire();\n            }));\n        }));\n    }\n    getMinimumWidth(width) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n    getMinimumHeight(height) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return 0;\n    }\n    dispose() {\n        arialLevelTracker.destroy(this._element);\n        this._element.remove();\n        super.dispose();\n    }\n}\nOverlay.MINIMUM_HEIGHT = 20;\nOverlay.MINIMUM_WIDTH = 20;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}