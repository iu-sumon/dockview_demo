{"ast":null,"code":"import { PaneviewApi } from '../api/component.api';\nimport { Emitter } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { Paneview } from './paneview';\nimport { DraggablePaneviewPanel } from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { Resizable } from '../resizable';\nimport { Classnames } from '../dom';\nconst nextLayoutId = sequentialNumberGenerator();\nconst HEADER_SIZE = 22;\nconst MINIMUM_BODY_SIZE = 0;\nconst MAXIMUM_BODY_SIZE = Number.MAX_SAFE_INTEGER;\nexport class PaneFramework extends DraggablePaneviewPanel {\n  constructor(options) {\n    super({\n      accessor: options.accessor,\n      id: options.id,\n      component: options.component,\n      headerComponent: options.headerComponent,\n      orientation: options.orientation,\n      isExpanded: options.isExpanded,\n      disableDnd: options.disableDnd,\n      headerSize: options.headerSize,\n      minimumBodySize: options.minimumBodySize,\n      maximumBodySize: options.maximumBodySize\n    });\n    this.options = options;\n  }\n  getBodyComponent() {\n    return this.options.body;\n  }\n  getHeaderComponent() {\n    return this.options.header;\n  }\n}\nexport class PaneviewComponent extends Resizable {\n  get id() {\n    return this._id;\n  }\n  get panels() {\n    return this.paneview.getPanes();\n  }\n  set paneview(value) {\n    this._paneview = value;\n    this._disposable.value = new CompositeDisposable(this._paneview.onDidChange(() => {\n      this._onDidLayoutChange.fire(undefined);\n    }), this._paneview.onDidAddView(e => this._onDidAddView.fire(e)), this._paneview.onDidRemoveView(e => this._onDidRemoveView.fire(e)));\n  }\n  get paneview() {\n    return this._paneview;\n  }\n  get minimumSize() {\n    return this.paneview.minimumSize;\n  }\n  get maximumSize() {\n    return this.paneview.maximumSize;\n  }\n  get height() {\n    return this.paneview.orientation === Orientation.HORIZONTAL ? this.paneview.orthogonalSize : this.paneview.size;\n  }\n  get width() {\n    return this.paneview.orientation === Orientation.HORIZONTAL ? this.paneview.size : this.paneview.orthogonalSize;\n  }\n  get options() {\n    return this._options;\n  }\n  constructor(container, options) {\n    var _a;\n    super(document.createElement('div'), options.disableAutoResizing);\n    this._id = nextLayoutId.next();\n    this._disposable = new MutableDisposable();\n    this._viewDisposables = new Map();\n    this._onDidLayoutfromJSON = new Emitter();\n    this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;\n    this._onDidLayoutChange = new Emitter();\n    this.onDidLayoutChange = this._onDidLayoutChange.event;\n    this._onDidDrop = new Emitter();\n    this.onDidDrop = this._onDidDrop.event;\n    this._onDidAddView = new Emitter();\n    this.onDidAddView = this._onDidAddView.event;\n    this._onDidRemoveView = new Emitter();\n    this.onDidRemoveView = this._onDidRemoveView.event;\n    this._onUnhandledDragOverEvent = new Emitter();\n    this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;\n    this.element.style.height = '100%';\n    this.element.style.width = '100%';\n    this.addDisposables(this._onDidLayoutChange, this._onDidLayoutfromJSON, this._onDidDrop, this._onDidAddView, this._onDidRemoveView, this._onUnhandledDragOverEvent);\n    this._classNames = new Classnames(this.element);\n    this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');\n    // the container is owned by the third-party, do not modify/delete it\n    container.appendChild(this.element);\n    this._options = options;\n    this.paneview = new Paneview(this.element, {\n      // only allow paneview in the vertical orientation for now\n      orientation: Orientation.VERTICAL\n    });\n    this.addDisposables(this._disposable);\n  }\n  setVisible(panel, visible) {\n    const index = this.panels.indexOf(panel);\n    this.paneview.setViewVisible(index, visible);\n  }\n  focus() {\n    //noop\n  }\n  updateOptions(options) {\n    var _a, _b;\n    if ('className' in options) {\n      this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');\n    }\n    if ('disableResizing' in options) {\n      this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;\n    }\n    this._options = Object.assign(Object.assign({}, this.options), options);\n  }\n  addPanel(options) {\n    var _a, _b;\n    const body = this.options.createComponent({\n      id: options.id,\n      name: options.component\n    });\n    let header;\n    if (options.headerComponent && this.options.createHeaderComponent) {\n      header = this.options.createHeaderComponent({\n        id: options.id,\n        name: options.headerComponent\n      });\n    }\n    if (!header) {\n      header = new DefaultHeader();\n    }\n    const view = new PaneFramework({\n      id: options.id,\n      component: options.component,\n      headerComponent: options.headerComponent,\n      header,\n      body,\n      orientation: Orientation.VERTICAL,\n      isExpanded: !!options.isExpanded,\n      disableDnd: !!this.options.disableDnd,\n      accessor: this,\n      headerSize: (_a = options.headerSize) !== null && _a !== void 0 ? _a : HEADER_SIZE,\n      minimumBodySize: MINIMUM_BODY_SIZE,\n      maximumBodySize: MAXIMUM_BODY_SIZE\n    });\n    this.doAddPanel(view);\n    const size = typeof options.size === 'number' ? options.size : Sizing.Distribute;\n    const index = typeof options.index === 'number' ? options.index : undefined;\n    view.init({\n      params: (_b = options.params) !== null && _b !== void 0 ? _b : {},\n      minimumBodySize: options.minimumBodySize,\n      maximumBodySize: options.maximumBodySize,\n      isExpanded: options.isExpanded,\n      title: options.title,\n      containerApi: new PaneviewApi(this),\n      accessor: this\n    });\n    this.paneview.addPane(view, size, index);\n    view.orientation = this.paneview.orientation;\n    return view;\n  }\n  removePanel(panel) {\n    const views = this.panels;\n    const index = views.findIndex(_ => _ === panel);\n    this.paneview.removePane(index);\n    this.doRemovePanel(panel);\n  }\n  movePanel(from, to) {\n    this.paneview.moveView(from, to);\n  }\n  getPanel(id) {\n    return this.panels.find(view => view.id === id);\n  }\n  layout(width, height) {\n    const [size, orthogonalSize] = this.paneview.orientation === Orientation.HORIZONTAL ? [width, height] : [height, width];\n    this.paneview.layout(size, orthogonalSize);\n  }\n  toJSON() {\n    const maximum = value => value === Number.MAX_SAFE_INTEGER || value === Number.POSITIVE_INFINITY ? undefined : value;\n    const minimum = value => value <= 0 ? undefined : value;\n    const views = this.paneview.getPanes().map((view, i) => {\n      const size = this.paneview.getViewSize(i);\n      return {\n        size,\n        data: view.toJSON(),\n        minimumSize: minimum(view.minimumBodySize),\n        maximumSize: maximum(view.maximumBodySize),\n        headerSize: view.headerSize,\n        expanded: view.isExpanded()\n      };\n    });\n    return {\n      views,\n      size: this.paneview.size\n    };\n  }\n  fromJSON(serializedPaneview) {\n    this.clear();\n    const {\n      views,\n      size\n    } = serializedPaneview;\n    const queue = [];\n    // take note of the existing dimensions\n    const width = this.width;\n    const height = this.height;\n    this.paneview = new Paneview(this.element, {\n      orientation: Orientation.VERTICAL,\n      descriptor: {\n        size,\n        views: views.map(view => {\n          var _a, _b, _c;\n          const data = view.data;\n          const body = this.options.createComponent({\n            id: data.id,\n            name: data.component\n          });\n          let header;\n          if (data.headerComponent && this.options.createHeaderComponent) {\n            header = this.options.createHeaderComponent({\n              id: data.id,\n              name: data.headerComponent\n            });\n          }\n          if (!header) {\n            header = new DefaultHeader();\n          }\n          const panel = new PaneFramework({\n            id: data.id,\n            component: data.component,\n            headerComponent: data.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!view.expanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n            headerSize: (_a = view.headerSize) !== null && _a !== void 0 ? _a : HEADER_SIZE,\n            minimumBodySize: (_b = view.minimumSize) !== null && _b !== void 0 ? _b : MINIMUM_BODY_SIZE,\n            maximumBodySize: (_c = view.maximumSize) !== null && _c !== void 0 ? _c : MAXIMUM_BODY_SIZE\n          });\n          this.doAddPanel(panel);\n          queue.push(() => {\n            var _a;\n            panel.init({\n              params: (_a = data.params) !== null && _a !== void 0 ? _a : {},\n              minimumBodySize: view.minimumSize,\n              maximumBodySize: view.maximumSize,\n              title: data.title,\n              isExpanded: !!view.expanded,\n              containerApi: new PaneviewApi(this),\n              accessor: this\n            });\n            panel.orientation = this.paneview.orientation;\n          });\n          setTimeout(() => {\n            // the original onDidAddView events are missed since they are fired before we can subcribe to them\n            this._onDidAddView.fire(panel);\n          }, 0);\n          return {\n            size: view.size,\n            view: panel\n          };\n        })\n      }\n    });\n    this.layout(width, height);\n    queue.forEach(f => f());\n    this._onDidLayoutfromJSON.fire();\n  }\n  clear() {\n    for (const [_, value] of this._viewDisposables.entries()) {\n      value.dispose();\n    }\n    this._viewDisposables.clear();\n    this.paneview.dispose();\n  }\n  doAddPanel(panel) {\n    const disposable = new CompositeDisposable(panel.onDidDrop(event => {\n      this._onDidDrop.fire(event);\n    }), panel.onUnhandledDragOverEvent(event => {\n      this._onUnhandledDragOverEvent.fire(event);\n    }));\n    this._viewDisposables.set(panel.id, disposable);\n  }\n  doRemovePanel(panel) {\n    const disposable = this._viewDisposables.get(panel.id);\n    if (disposable) {\n      disposable.dispose();\n      this._viewDisposables.delete(panel.id);\n    }\n  }\n  dispose() {\n    super.dispose();\n    for (const [_, value] of this._viewDisposables.entries()) {\n      value.dispose();\n    }\n    this._viewDisposables.clear();\n    this.element.remove();\n    this.paneview.dispose();\n  }\n}","map":{"version":3,"names":["PaneviewApi","Emitter","CompositeDisposable","MutableDisposable","Orientation","Sizing","Paneview","DraggablePaneviewPanel","DefaultHeader","sequentialNumberGenerator","Resizable","Classnames","nextLayoutId","HEADER_SIZE","MINIMUM_BODY_SIZE","MAXIMUM_BODY_SIZE","Number","MAX_SAFE_INTEGER","PaneFramework","constructor","options","accessor","id","component","headerComponent","orientation","isExpanded","disableDnd","headerSize","minimumBodySize","maximumBodySize","getBodyComponent","body","getHeaderComponent","header","PaneviewComponent","_id","panels","paneview","getPanes","value","_paneview","_disposable","onDidChange","_onDidLayoutChange","fire","undefined","onDidAddView","e","_onDidAddView","onDidRemoveView","_onDidRemoveView","minimumSize","maximumSize","height","HORIZONTAL","orthogonalSize","size","width","_options","container","_a","document","createElement","disableAutoResizing","next","_viewDisposables","Map","_onDidLayoutfromJSON","onDidLayoutFromJSON","event","onDidLayoutChange","_onDidDrop","onDidDrop","_onUnhandledDragOverEvent","onUnhandledDragOverEvent","element","style","addDisposables","_classNames","setClassNames","className","appendChild","VERTICAL","setVisible","panel","visible","index","indexOf","setViewVisible","focus","updateOptions","_b","disableResizing","Object","assign","addPanel","createComponent","name","createHeaderComponent","view","doAddPanel","Distribute","init","params","title","containerApi","addPane","removePanel","views","findIndex","_","removePane","doRemovePanel","movePanel","from","to","moveView","getPanel","find","layout","toJSON","maximum","POSITIVE_INFINITY","minimum","map","i","getViewSize","data","expanded","fromJSON","serializedPaneview","clear","queue","descriptor","_c","push","setTimeout","forEach","f","entries","dispose","disposable","set","get","delete","remove"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js"],"sourcesContent":["import { PaneviewApi } from '../api/component.api';\nimport { Emitter } from '../events';\nimport { CompositeDisposable, MutableDisposable, } from '../lifecycle';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { Paneview } from './paneview';\nimport { DraggablePaneviewPanel, } from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { Resizable } from '../resizable';\nimport { Classnames } from '../dom';\nconst nextLayoutId = sequentialNumberGenerator();\nconst HEADER_SIZE = 22;\nconst MINIMUM_BODY_SIZE = 0;\nconst MAXIMUM_BODY_SIZE = Number.MAX_SAFE_INTEGER;\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(options) {\n        super({\n            accessor: options.accessor,\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            orientation: options.orientation,\n            isExpanded: options.isExpanded,\n            disableDnd: options.disableDnd,\n            headerSize: options.headerSize,\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n        });\n        this.options = options;\n    }\n    getBodyComponent() {\n        return this.options.body;\n    }\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\nexport class PaneviewComponent extends Resizable {\n    get id() {\n        return this._id;\n    }\n    get panels() {\n        return this.paneview.getPanes();\n    }\n    set paneview(value) {\n        this._paneview = value;\n        this._disposable.value = new CompositeDisposable(this._paneview.onDidChange(() => {\n            this._onDidLayoutChange.fire(undefined);\n        }), this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)), this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));\n    }\n    get paneview() {\n        return this._paneview;\n    }\n    get minimumSize() {\n        return this.paneview.minimumSize;\n    }\n    get maximumSize() {\n        return this.paneview.maximumSize;\n    }\n    get height() {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n    get width() {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n    get options() {\n        return this._options;\n    }\n    constructor(container, options) {\n        var _a;\n        super(document.createElement('div'), options.disableAutoResizing);\n        this._id = nextLayoutId.next();\n        this._disposable = new MutableDisposable();\n        this._viewDisposables = new Map();\n        this._onDidLayoutfromJSON = new Emitter();\n        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;\n        this._onDidLayoutChange = new Emitter();\n        this.onDidLayoutChange = this._onDidLayoutChange.event;\n        this._onDidDrop = new Emitter();\n        this.onDidDrop = this._onDidDrop.event;\n        this._onDidAddView = new Emitter();\n        this.onDidAddView = this._onDidAddView.event;\n        this._onDidRemoveView = new Emitter();\n        this.onDidRemoveView = this._onDidRemoveView.event;\n        this._onUnhandledDragOverEvent = new Emitter();\n        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;\n        this.element.style.height = '100%';\n        this.element.style.width = '100%';\n        this.addDisposables(this._onDidLayoutChange, this._onDidLayoutfromJSON, this._onDidDrop, this._onDidAddView, this._onDidRemoveView, this._onUnhandledDragOverEvent);\n        this._classNames = new Classnames(this.element);\n        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');\n        // the container is owned by the third-party, do not modify/delete it\n        container.appendChild(this.element);\n        this._options = options;\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n        this.addDisposables(this._disposable);\n    }\n    setVisible(panel, visible) {\n        const index = this.panels.indexOf(panel);\n        this.paneview.setViewVisible(index, visible);\n    }\n    focus() {\n        //noop\n    }\n    updateOptions(options) {\n        var _a, _b;\n        if ('className' in options) {\n            this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');\n        }\n        if ('disableResizing' in options) {\n            this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;\n        }\n        this._options = Object.assign(Object.assign({}, this.options), options);\n    }\n    addPanel(options) {\n        var _a, _b;\n        const body = this.options.createComponent({\n            id: options.id,\n            name: options.component,\n        });\n        let header;\n        if (options.headerComponent && this.options.createHeaderComponent) {\n            header = this.options.createHeaderComponent({\n                id: options.id,\n                name: options.headerComponent,\n            });\n        }\n        if (!header) {\n            header = new DefaultHeader();\n        }\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n            headerSize: (_a = options.headerSize) !== null && _a !== void 0 ? _a : HEADER_SIZE,\n            minimumBodySize: MINIMUM_BODY_SIZE,\n            maximumBodySize: MAXIMUM_BODY_SIZE,\n        });\n        this.doAddPanel(view);\n        const size = typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index = typeof options.index === 'number' ? options.index : undefined;\n        view.init({\n            params: (_b = options.params) !== null && _b !== void 0 ? _b : {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n            accessor: this,\n        });\n        this.paneview.addPane(view, size, index);\n        view.orientation = this.paneview.orientation;\n        return view;\n    }\n    removePanel(panel) {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n        this.doRemovePanel(panel);\n    }\n    movePanel(from, to) {\n        this.paneview.moveView(from, to);\n    }\n    getPanel(id) {\n        return this.panels.find((view) => view.id === id);\n    }\n    layout(width, height) {\n        const [size, orthogonalSize] = this.paneview.orientation === Orientation.HORIZONTAL\n            ? [width, height]\n            : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n    toJSON() {\n        const maximum = (value) => value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n            ? undefined\n            : value;\n        const minimum = (value) => (value <= 0 ? undefined : value);\n        const views = this.paneview\n            .getPanes()\n            .map((view, i) => {\n            const size = this.paneview.getViewSize(i);\n            return {\n                size,\n                data: view.toJSON(),\n                minimumSize: minimum(view.minimumBodySize),\n                maximumSize: maximum(view.maximumBodySize),\n                headerSize: view.headerSize,\n                expanded: view.isExpanded(),\n            };\n        });\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n    fromJSON(serializedPaneview) {\n        this.clear();\n        const { views, size } = serializedPaneview;\n        const queue = [];\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    var _a, _b, _c;\n                    const data = view.data;\n                    const body = this.options.createComponent({\n                        id: data.id,\n                        name: data.component,\n                    });\n                    let header;\n                    if (data.headerComponent &&\n                        this.options.createHeaderComponent) {\n                        header = this.options.createHeaderComponent({\n                            id: data.id,\n                            name: data.headerComponent,\n                        });\n                    }\n                    if (!header) {\n                        header = new DefaultHeader();\n                    }\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                        headerSize: (_a = view.headerSize) !== null && _a !== void 0 ? _a : HEADER_SIZE,\n                        minimumBodySize: (_b = view.minimumSize) !== null && _b !== void 0 ? _b : MINIMUM_BODY_SIZE,\n                        maximumBodySize: (_c = view.maximumSize) !== null && _c !== void 0 ? _c : MAXIMUM_BODY_SIZE,\n                    });\n                    this.doAddPanel(panel);\n                    queue.push(() => {\n                        var _a;\n                        panel.init({\n                            params: (_a = data.params) !== null && _a !== void 0 ? _a : {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                            accessor: this,\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n        this.layout(width, height);\n        queue.forEach((f) => f());\n        this._onDidLayoutfromJSON.fire();\n    }\n    clear() {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n        this.paneview.dispose();\n    }\n    doAddPanel(panel) {\n        const disposable = new CompositeDisposable(panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        }), panel.onUnhandledDragOverEvent((event) => {\n            this._onUnhandledDragOverEvent.fire(event);\n        }));\n        this._viewDisposables.set(panel.id, disposable);\n    }\n    doRemovePanel(panel) {\n        const disposable = this._viewDisposables.get(panel.id);\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n    dispose() {\n        super.dispose();\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n        this.element.remove();\n        this.paneview.dispose();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}