{"ast":null,"code":"import { isInDocument, watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\nexport class Resizable extends CompositeDisposable {\n  get element() {\n    return this._element;\n  }\n  get disableResizing() {\n    return this._disableResizing;\n  }\n  set disableResizing(value) {\n    this._disableResizing = value;\n  }\n  constructor(parentElement, disableResizing = false) {\n    super();\n    this._disableResizing = disableResizing;\n    this._element = parentElement;\n    this.addDisposables(watchElementResize(this._element, entry => {\n      if (this.isDisposed) {\n        /**\n         * resize is delayed through requestAnimationFrame so there is a small chance\n         * the component has already been disposed of\n         */\n        return;\n      }\n      if (this.disableResizing) {\n        return;\n      }\n      if (!this._element.offsetParent) {\n        /**\n         * offsetParent === null is equivalent to display: none being set on the element or one\n         * of it's parents. In the display: none case the size will become (0, 0) which we do\n         * not want to propagate.\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent\n         *\n         * You could use checkVisibility() but at the time of writing it's not supported across\n         * all Browsers\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/checkVisibility\n         */\n        return;\n      }\n      if (!isInDocument(this._element)) {\n        /**\n         * since the event is dispatched through requestAnimationFrame there is a small chance\n         * the component is no longer attached to the DOM, if that is the case the dimensions\n         * are mostly likely all zero and meaningless. we should skip this case.\n         */\n        return;\n      }\n      const {\n        width,\n        height\n      } = entry.contentRect;\n      this.layout(width, height);\n    }));\n  }\n}","map":{"version":3,"names":["isInDocument","watchElementResize","CompositeDisposable","Resizable","element","_element","disableResizing","_disableResizing","value","constructor","parentElement","addDisposables","entry","isDisposed","offsetParent","width","height","contentRect","layout"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/resizable.js"],"sourcesContent":["import { isInDocument, watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\nexport class Resizable extends CompositeDisposable {\n    get element() {\n        return this._element;\n    }\n    get disableResizing() {\n        return this._disableResizing;\n    }\n    set disableResizing(value) {\n        this._disableResizing = value;\n    }\n    constructor(parentElement, disableResizing = false) {\n        super();\n        this._disableResizing = disableResizing;\n        this._element = parentElement;\n        this.addDisposables(watchElementResize(this._element, (entry) => {\n            if (this.isDisposed) {\n                /**\n                 * resize is delayed through requestAnimationFrame so there is a small chance\n                 * the component has already been disposed of\n                 */\n                return;\n            }\n            if (this.disableResizing) {\n                return;\n            }\n            if (!this._element.offsetParent) {\n                /**\n                 * offsetParent === null is equivalent to display: none being set on the element or one\n                 * of it's parents. In the display: none case the size will become (0, 0) which we do\n                 * not want to propagate.\n                 *\n                 * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent\n                 *\n                 * You could use checkVisibility() but at the time of writing it's not supported across\n                 * all Browsers\n                 *\n                 * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/checkVisibility\n                 */\n                return;\n            }\n            if (!isInDocument(this._element)) {\n                /**\n                 * since the event is dispatched through requestAnimationFrame there is a small chance\n                 * the component is no longer attached to the DOM, if that is the case the dimensions\n                 * are mostly likely all zero and meaningless. we should skip this case.\n                 */\n                return;\n            }\n            const { width, height } = entry.contentRect;\n            this.layout(width, height);\n        }));\n    }\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,kBAAkB,QAAQ,OAAO;AACxD,SAASC,mBAAmB,QAAQ,aAAa;AACjD,OAAO,MAAMC,SAAS,SAASD,mBAAmB,CAAC;EAC/C,IAAIE,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACC,QAAQ;EACxB;EACA,IAAIC,eAAeA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACC,gBAAgB;EAChC;EACA,IAAID,eAAeA,CAACE,KAAK,EAAE;IACvB,IAAI,CAACD,gBAAgB,GAAGC,KAAK;EACjC;EACAC,WAAWA,CAACC,aAAa,EAAEJ,eAAe,GAAG,KAAK,EAAE;IAChD,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,gBAAgB,GAAGD,eAAe;IACvC,IAAI,CAACD,QAAQ,GAAGK,aAAa;IAC7B,IAAI,CAACC,cAAc,CAACV,kBAAkB,CAAC,IAAI,CAACI,QAAQ,EAAGO,KAAK,IAAK;MAC7D,IAAI,IAAI,CAACC,UAAU,EAAE;QACjB;AAChB;AACA;AACA;QACgB;MACJ;MACA,IAAI,IAAI,CAACP,eAAe,EAAE;QACtB;MACJ;MACA,IAAI,CAAC,IAAI,CAACD,QAAQ,CAACS,YAAY,EAAE;QAC7B;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACgB;MACJ;MACA,IAAI,CAACd,YAAY,CAAC,IAAI,CAACK,QAAQ,CAAC,EAAE;QAC9B;AAChB;AACA;AACA;AACA;QACgB;MACJ;MACA,MAAM;QAAEU,KAAK;QAAEC;MAAO,CAAC,GAAGJ,KAAK,CAACK,WAAW;MAC3C,IAAI,CAACC,MAAM,CAACH,KAAK,EAAEC,MAAM,CAAC;IAC9B,CAAC,CAAC,CAAC;EACP;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}