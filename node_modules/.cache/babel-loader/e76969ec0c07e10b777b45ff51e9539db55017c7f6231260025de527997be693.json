{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\nimport { Orientation } from '../splitview/splitview';\nimport { Emitter } from '../events';\nexport class LeafNode {\n  get minimumWidth() {\n    return this.view.minimumWidth;\n  }\n  get maximumWidth() {\n    return this.view.maximumWidth;\n  }\n  get minimumHeight() {\n    return this.view.minimumHeight;\n  }\n  get maximumHeight() {\n    return this.view.maximumHeight;\n  }\n  get priority() {\n    return this.view.priority;\n  }\n  get snap() {\n    return this.view.snap;\n  }\n  get minimumSize() {\n    return this.orientation === Orientation.HORIZONTAL ? this.minimumHeight : this.minimumWidth;\n  }\n  get maximumSize() {\n    return this.orientation === Orientation.HORIZONTAL ? this.maximumHeight : this.maximumWidth;\n  }\n  get minimumOrthogonalSize() {\n    return this.orientation === Orientation.HORIZONTAL ? this.minimumWidth : this.minimumHeight;\n  }\n  get maximumOrthogonalSize() {\n    return this.orientation === Orientation.HORIZONTAL ? this.maximumWidth : this.maximumHeight;\n  }\n  get orthogonalSize() {\n    return this._orthogonalSize;\n  }\n  get size() {\n    return this._size;\n  }\n  get element() {\n    return this.view.element;\n  }\n  get width() {\n    return this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;\n  }\n  get height() {\n    return this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;\n  }\n  constructor(view, orientation, orthogonalSize, size = 0) {\n    this.view = view;\n    this.orientation = orientation;\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n    this._orthogonalSize = orthogonalSize;\n    this._size = size;\n    this._disposable = this.view.onDidChange(event => {\n      if (event) {\n        this._onDidChange.fire({\n          size: this.orientation === Orientation.VERTICAL ? event.width : event.height,\n          orthogonalSize: this.orientation === Orientation.VERTICAL ? event.height : event.width\n        });\n      } else {\n        this._onDidChange.fire({});\n      }\n    });\n  }\n  setVisible(visible) {\n    if (this.view.setVisible) {\n      this.view.setVisible(visible);\n    }\n  }\n  layout(size, orthogonalSize) {\n    this._size = size;\n    this._orthogonalSize = orthogonalSize;\n    this.view.layout(this.width, this.height);\n  }\n  dispose() {\n    this._onDidChange.dispose();\n    this._disposable.dispose();\n  }\n}","map":{"version":3,"names":["Orientation","Emitter","LeafNode","minimumWidth","view","maximumWidth","minimumHeight","maximumHeight","priority","snap","minimumSize","orientation","HORIZONTAL","maximumSize","minimumOrthogonalSize","maximumOrthogonalSize","orthogonalSize","_orthogonalSize","size","_size","element","width","height","constructor","_onDidChange","onDidChange","event","_disposable","fire","VERTICAL","setVisible","visible","layout","dispose"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/gridview/leafNode.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\nimport { Orientation } from '../splitview/splitview';\nimport { Emitter } from '../events';\nexport class LeafNode {\n    get minimumWidth() {\n        return this.view.minimumWidth;\n    }\n    get maximumWidth() {\n        return this.view.maximumWidth;\n    }\n    get minimumHeight() {\n        return this.view.minimumHeight;\n    }\n    get maximumHeight() {\n        return this.view.maximumHeight;\n    }\n    get priority() {\n        return this.view.priority;\n    }\n    get snap() {\n        return this.view.snap;\n    }\n    get minimumSize() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n    get maximumSize() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n    get minimumOrthogonalSize() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n    get maximumOrthogonalSize() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n    get orthogonalSize() {\n        return this._orthogonalSize;\n    }\n    get size() {\n        return this._size;\n    }\n    get element() {\n        return this.view.element;\n    }\n    get width() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n    get height() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n    constructor(view, orientation, orthogonalSize, size = 0) {\n        this.view = view;\n        this.orientation = orientation;\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size: this.orientation === Orientation.VERTICAL\n                        ? event.width\n                        : event.height,\n                    orthogonalSize: this.orientation === Orientation.VERTICAL\n                        ? event.height\n                        : event.width,\n                });\n            }\n            else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n    setVisible(visible) {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n    layout(size, orthogonalSize) {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        this.view.layout(this.width, this.height);\n    }\n    dispose() {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}