{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\nimport { removeClasses, addClasses, toggleClass, disableIframePointEvents } from '../dom';\nimport { Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nexport var Orientation;\n(function (Orientation) {\n  Orientation[\"HORIZONTAL\"] = \"HORIZONTAL\";\n  Orientation[\"VERTICAL\"] = \"VERTICAL\";\n})(Orientation || (Orientation = {}));\nexport var SashState;\n(function (SashState) {\n  SashState[SashState[\"MAXIMUM\"] = 0] = \"MAXIMUM\";\n  SashState[SashState[\"MINIMUM\"] = 1] = \"MINIMUM\";\n  SashState[SashState[\"DISABLED\"] = 2] = \"DISABLED\";\n  SashState[SashState[\"ENABLED\"] = 3] = \"ENABLED\";\n})(SashState || (SashState = {}));\nexport var LayoutPriority;\n(function (LayoutPriority) {\n  LayoutPriority[\"Low\"] = \"low\";\n  LayoutPriority[\"High\"] = \"high\";\n  LayoutPriority[\"Normal\"] = \"normal\";\n})(LayoutPriority || (LayoutPriority = {}));\nexport var Sizing;\n(function (Sizing) {\n  Sizing.Distribute = {\n    type: 'distribute'\n  };\n  function Split(index) {\n    return {\n      type: 'split',\n      index\n    };\n  }\n  Sizing.Split = Split;\n  function Invisible(cachedVisibleSize) {\n    return {\n      type: 'invisible',\n      cachedVisibleSize\n    };\n  }\n  Sizing.Invisible = Invisible;\n})(Sizing || (Sizing = {}));\nexport class Splitview {\n  get contentSize() {\n    return this._contentSize;\n  }\n  get size() {\n    return this._size;\n  }\n  set size(value) {\n    this._size = value;\n  }\n  get orthogonalSize() {\n    return this._orthogonalSize;\n  }\n  set orthogonalSize(value) {\n    this._orthogonalSize = value;\n  }\n  get length() {\n    return this.viewItems.length;\n  }\n  get proportions() {\n    return this._proportions ? [...this._proportions] : undefined;\n  }\n  get orientation() {\n    return this._orientation;\n  }\n  set orientation(value) {\n    this._orientation = value;\n    const tmp = this.size;\n    this.size = this.orthogonalSize;\n    this.orthogonalSize = tmp;\n    removeClasses(this.element, 'dv-horizontal', 'dv-vertical');\n    this.element.classList.add(this.orientation == Orientation.HORIZONTAL ? 'dv-horizontal' : 'dv-vertical');\n  }\n  get minimumSize() {\n    return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n  }\n  get maximumSize() {\n    return this.length === 0 ? Number.POSITIVE_INFINITY : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n  }\n  get startSnappingEnabled() {\n    return this._startSnappingEnabled;\n  }\n  set startSnappingEnabled(startSnappingEnabled) {\n    if (this._startSnappingEnabled === startSnappingEnabled) {\n      return;\n    }\n    this._startSnappingEnabled = startSnappingEnabled;\n    this.updateSashEnablement();\n  }\n  get endSnappingEnabled() {\n    return this._endSnappingEnabled;\n  }\n  set endSnappingEnabled(endSnappingEnabled) {\n    if (this._endSnappingEnabled === endSnappingEnabled) {\n      return;\n    }\n    this._endSnappingEnabled = endSnappingEnabled;\n    this.updateSashEnablement();\n  }\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = value;\n    toggleClass(this.element, 'dv-splitview-disabled', value);\n  }\n  get margin() {\n    return this._margin;\n  }\n  set margin(value) {\n    this._margin = value;\n    toggleClass(this.element, 'dv-splitview-has-margin', value !== 0);\n  }\n  constructor(container, options) {\n    var _a, _b;\n    this.container = container;\n    this.viewItems = [];\n    this.sashes = [];\n    this._size = 0;\n    this._orthogonalSize = 0;\n    this._contentSize = 0;\n    this._proportions = undefined;\n    this._startSnappingEnabled = true;\n    this._endSnappingEnabled = true;\n    this._disabled = false;\n    this._margin = 0;\n    this._onDidSashEnd = new Emitter();\n    this.onDidSashEnd = this._onDidSashEnd.event;\n    this._onDidAddView = new Emitter();\n    this.onDidAddView = this._onDidAddView.event;\n    this._onDidRemoveView = new Emitter();\n    this.onDidRemoveView = this._onDidRemoveView.event;\n    this.resize = (index, delta, sizes = this.viewItems.map(x => x.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) => {\n      if (index < 0 || index > this.viewItems.length) {\n        return 0;\n      }\n      const upIndexes = range(index, -1);\n      const downIndexes = range(index + 1, this.viewItems.length);\n      //\n      if (highPriorityIndexes) {\n        for (const i of highPriorityIndexes) {\n          pushToStart(upIndexes, i);\n          pushToStart(downIndexes, i);\n        }\n      }\n      if (lowPriorityIndexes) {\n        for (const i of lowPriorityIndexes) {\n          pushToEnd(upIndexes, i);\n          pushToEnd(downIndexes, i);\n        }\n      }\n      //\n      const upItems = upIndexes.map(i => this.viewItems[i]);\n      const upSizes = upIndexes.map(i => sizes[i]);\n      //\n      const downItems = downIndexes.map(i => this.viewItems[i]);\n      const downSizes = downIndexes.map(i => sizes[i]);\n      //\n      const minDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].minimumSize - sizes[i], 0);\n      const maxDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].maximumSize - sizes[i], 0);\n      //\n      const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].minimumSize, 0);\n      const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].maximumSize, 0);\n      //\n      const minDelta = Math.max(minDeltaUp, minDeltaDown);\n      const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n      //\n      let snapped = false;\n      if (snapBefore) {\n        const snapView = this.viewItems[snapBefore.index];\n        const visible = delta >= snapBefore.limitDelta;\n        snapped = visible !== snapView.visible;\n        snapView.setVisible(visible, snapBefore.size);\n      }\n      if (!snapped && snapAfter) {\n        const snapView = this.viewItems[snapAfter.index];\n        const visible = delta < snapAfter.limitDelta;\n        snapped = visible !== snapView.visible;\n        snapView.setVisible(visible, snapAfter.size);\n      }\n      if (snapped) {\n        return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n      }\n      //\n      const tentativeDelta = clamp(delta, minDelta, maxDelta);\n      let actualDelta = 0;\n      //\n      let deltaUp = tentativeDelta;\n      for (let i = 0; i < upItems.length; i++) {\n        const item = upItems[i];\n        const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n        const viewDelta = size - upSizes[i];\n        actualDelta += viewDelta;\n        deltaUp -= viewDelta;\n        item.size = size;\n      }\n      //\n      let deltaDown = actualDelta;\n      for (let i = 0; i < downItems.length; i++) {\n        const item = downItems[i];\n        const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n        const viewDelta = size - downSizes[i];\n        deltaDown += viewDelta;\n        item.size = size;\n      }\n      //\n      return delta;\n    };\n    this._orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : Orientation.VERTICAL;\n    this.element = this.createContainer();\n    this.margin = (_b = options.margin) !== null && _b !== void 0 ? _b : 0;\n    this.proportionalLayout = options.proportionalLayout === undefined ? true : !!options.proportionalLayout;\n    this.viewContainer = this.createViewContainer();\n    this.sashContainer = this.createSashContainer();\n    this.element.appendChild(this.sashContainer);\n    this.element.appendChild(this.viewContainer);\n    this.container.appendChild(this.element);\n    this.style(options.styles);\n    // We have an existing set of view, add them now\n    if (options.descriptor) {\n      this._size = options.descriptor.size;\n      options.descriptor.views.forEach((viewDescriptor, index) => {\n        const sizing = viewDescriptor.visible === undefined || viewDescriptor.visible ? viewDescriptor.size : {\n          type: 'invisible',\n          cachedVisibleSize: viewDescriptor.size\n        };\n        const view = viewDescriptor.view;\n        this.addView(view, sizing, index, true\n        // true skip layout\n        );\n      });\n      // Initialize content size and proportions for first layout\n      this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n      this.saveProportions();\n    }\n  }\n  style(styles) {\n    if ((styles === null || styles === void 0 ? void 0 : styles.separatorBorder) === 'transparent') {\n      removeClasses(this.element, 'dv-separator-border');\n      this.element.style.removeProperty('--dv-separator-border');\n    } else {\n      addClasses(this.element, 'dv-separator-border');\n      if (styles === null || styles === void 0 ? void 0 : styles.separatorBorder) {\n        this.element.style.setProperty('--dv-separator-border', styles.separatorBorder);\n      }\n    }\n  }\n  isViewVisible(index) {\n    if (index < 0 || index >= this.viewItems.length) {\n      throw new Error('Index out of bounds');\n    }\n    const viewItem = this.viewItems[index];\n    return viewItem.visible;\n  }\n  setViewVisible(index, visible) {\n    if (index < 0 || index >= this.viewItems.length) {\n      throw new Error('Index out of bounds');\n    }\n    const viewItem = this.viewItems[index];\n    viewItem.setVisible(visible, viewItem.size);\n    this.distributeEmptySpace(index);\n    this.layoutViews();\n    this.saveProportions();\n  }\n  getViewSize(index) {\n    if (index < 0 || index >= this.viewItems.length) {\n      return -1;\n    }\n    return this.viewItems[index].size;\n  }\n  resizeView(index, size) {\n    if (index < 0 || index >= this.viewItems.length) {\n      return;\n    }\n    const indexes = range(this.viewItems.length).filter(i => i !== index);\n    const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === LayoutPriority.Low), index];\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.High);\n    const item = this.viewItems[index];\n    size = Math.round(size);\n    size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this._size));\n    item.size = size;\n    this.relayout(lowPriorityIndexes, highPriorityIndexes);\n  }\n  getViews() {\n    return this.viewItems.map(x => x.view);\n  }\n  onDidChange(item, size) {\n    const index = this.viewItems.indexOf(item);\n    if (index < 0 || index >= this.viewItems.length) {\n      return;\n    }\n    size = typeof size === 'number' ? size : item.size;\n    size = clamp(size, item.minimumSize, item.maximumSize);\n    item.size = size;\n    const indexes = range(this.viewItems.length).filter(i => i !== index);\n    const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === LayoutPriority.Low), index];\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.High);\n    /**\n     * add this view we are changing to the low-index list since we have determined the size\n     * here and don't want it changed\n     */\n    this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n  }\n  addView(view, size = {\n    type: 'distribute'\n  }, index = this.viewItems.length, skipLayout) {\n    const container = document.createElement('div');\n    container.className = 'dv-view';\n    container.appendChild(view.element);\n    let viewSize;\n    if (typeof size === 'number') {\n      viewSize = size;\n    } else if (size.type === 'split') {\n      viewSize = this.getViewSize(size.index) / 2;\n    } else if (size.type === 'invisible') {\n      viewSize = {\n        cachedVisibleSize: size.cachedVisibleSize\n      };\n    } else {\n      viewSize = view.minimumSize;\n    }\n    const disposable = view.onDidChange(newSize => this.onDidChange(viewItem, newSize.size));\n    const viewItem = new ViewItem(container, view, viewSize, {\n      dispose: () => {\n        disposable.dispose();\n        this.viewContainer.removeChild(container);\n      }\n    });\n    if (index === this.viewItems.length) {\n      this.viewContainer.appendChild(container);\n    } else {\n      this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n    }\n    this.viewItems.splice(index, 0, viewItem);\n    if (this.viewItems.length > 1) {\n      //add sash\n      const sash = document.createElement('div');\n      sash.className = 'dv-sash';\n      const onPointerStart = event => {\n        for (const item of this.viewItems) {\n          item.enabled = false;\n        }\n        const iframes = disableIframePointEvents();\n        const start = this._orientation === Orientation.HORIZONTAL ? event.clientX : event.clientY;\n        const sashIndex = firstIndex(this.sashes, s => s.container === sash);\n        //\n        const sizes = this.viewItems.map(x => x.size);\n        //\n        let snapBefore;\n        let snapAfter;\n        const upIndexes = range(sashIndex, -1);\n        const downIndexes = range(sashIndex + 1, this.viewItems.length);\n        const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n        const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n        if (typeof snapBeforeIndex === 'number') {\n          const snappedViewItem = this.viewItems[snapBeforeIndex];\n          const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);\n          snapBefore = {\n            index: snapBeforeIndex,\n            limitDelta: snappedViewItem.visible ? minDelta - halfSize : minDelta + halfSize,\n            size: snappedViewItem.size\n          };\n        }\n        if (typeof snapAfterIndex === 'number') {\n          const snappedViewItem = this.viewItems[snapAfterIndex];\n          const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);\n          snapAfter = {\n            index: snapAfterIndex,\n            limitDelta: snappedViewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\n            size: snappedViewItem.size\n          };\n        }\n        const onPointerMove = event => {\n          const current = this._orientation === Orientation.HORIZONTAL ? event.clientX : event.clientY;\n          const delta = current - start;\n          this.resize(sashIndex, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n          this.distributeEmptySpace();\n          this.layoutViews();\n        };\n        const end = () => {\n          for (const item of this.viewItems) {\n            item.enabled = true;\n          }\n          iframes.release();\n          this.saveProportions();\n          document.removeEventListener('pointermove', onPointerMove);\n          document.removeEventListener('pointerup', end);\n          document.removeEventListener('pointercancel', end);\n          this._onDidSashEnd.fire(undefined);\n        };\n        document.addEventListener('pointermove', onPointerMove);\n        document.addEventListener('pointerup', end);\n        document.addEventListener('pointercancel', end);\n      };\n      sash.addEventListener('pointerdown', onPointerStart);\n      const sashItem = {\n        container: sash,\n        disposable: () => {\n          sash.removeEventListener('pointerdown', onPointerStart);\n          this.sashContainer.removeChild(sash);\n        }\n      };\n      this.sashContainer.appendChild(sash);\n      this.sashes.push(sashItem);\n    }\n    if (!skipLayout) {\n      this.relayout([index]);\n    }\n    if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\n      this.distributeViewSizes();\n    }\n    this._onDidAddView.fire(view);\n  }\n  distributeViewSizes() {\n    const flexibleViewItems = [];\n    let flexibleSize = 0;\n    for (const item of this.viewItems) {\n      if (item.maximumSize - item.minimumSize > 0) {\n        flexibleViewItems.push(item);\n        flexibleSize += item.size;\n      }\n    }\n    const size = Math.floor(flexibleSize / flexibleViewItems.length);\n    for (const item of flexibleViewItems) {\n      item.size = clamp(size, item.minimumSize, item.maximumSize);\n    }\n    const indexes = range(this.viewItems.length);\n    const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.Low);\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.High);\n    this.relayout(lowPriorityIndexes, highPriorityIndexes);\n  }\n  removeView(index, sizing, skipLayout = false) {\n    // Remove view\n    const viewItem = this.viewItems.splice(index, 1)[0];\n    viewItem.dispose();\n    // Remove sash\n    if (this.viewItems.length >= 1) {\n      const sashIndex = Math.max(index - 1, 0);\n      const sashItem = this.sashes.splice(sashIndex, 1)[0];\n      sashItem.disposable();\n    }\n    if (!skipLayout) {\n      this.relayout();\n    }\n    if (sizing && sizing.type === 'distribute') {\n      this.distributeViewSizes();\n    }\n    this._onDidRemoveView.fire(viewItem.view);\n    return viewItem.view;\n  }\n  getViewCachedVisibleSize(index) {\n    if (index < 0 || index >= this.viewItems.length) {\n      throw new Error('Index out of bounds');\n    }\n    const viewItem = this.viewItems[index];\n    return viewItem.cachedVisibleSize;\n  }\n  moveView(from, to) {\n    const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n    const sizing = typeof cachedVisibleSize === 'undefined' ? this.getViewSize(from) : Sizing.Invisible(cachedVisibleSize);\n    const view = this.removeView(from, undefined, true);\n    this.addView(view, sizing, to);\n  }\n  layout(size, orthogonalSize) {\n    const previousSize = Math.max(this.size, this._contentSize);\n    this.size = size;\n    this.orthogonalSize = orthogonalSize;\n    if (!this.proportions) {\n      const indexes = range(this.viewItems.length);\n      const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.Low);\n      const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.High);\n      this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n    } else {\n      let total = 0;\n      for (let i = 0; i < this.viewItems.length; i++) {\n        const item = this.viewItems[i];\n        const proportion = this.proportions[i];\n        if (typeof proportion === 'number') {\n          total += proportion;\n        } else {\n          size -= item.size;\n        }\n      }\n      for (let i = 0; i < this.viewItems.length; i++) {\n        const item = this.viewItems[i];\n        const proportion = this.proportions[i];\n        if (typeof proportion === 'number' && total > 0) {\n          item.size = clamp(Math.round(proportion * size / total), item.minimumSize, item.maximumSize);\n        }\n      }\n    }\n    this.distributeEmptySpace();\n    this.layoutViews();\n  }\n  relayout(lowPriorityIndexes, highPriorityIndexes) {\n    const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    this.resize(this.viewItems.length - 1, this._size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n    this.distributeEmptySpace();\n    this.layoutViews();\n    this.saveProportions();\n  }\n  distributeEmptySpace(lowPriorityIndex) {\n    const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    let emptyDelta = this.size - contentSize;\n    const indexes = range(this.viewItems.length - 1, -1);\n    const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.Low);\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.High);\n    for (const index of highPriorityIndexes) {\n      pushToStart(indexes, index);\n    }\n    for (const index of lowPriorityIndexes) {\n      pushToEnd(indexes, index);\n    }\n    if (typeof lowPriorityIndex === 'number') {\n      pushToEnd(indexes, lowPriorityIndex);\n    }\n    for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n      const item = this.viewItems[indexes[i]];\n      const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n      const viewDelta = size - item.size;\n      emptyDelta -= viewDelta;\n      item.size = size;\n    }\n  }\n  saveProportions() {\n    if (this.proportionalLayout && this._contentSize > 0) {\n      this._proportions = this.viewItems.map(i => i.visible ? i.size / this._contentSize : undefined);\n    }\n  }\n  /**\n   * Margin explain:\n   *\n   * For `n` views in a splitview there will be `n-1` margins `m`.\n   *\n   * To fit the margins each view must reduce in size by `(m * (n - 1)) / n`.\n   *\n   * For each view `i` the offet must be adjusted by `m * i/(n - 1)`.\n   */\n  layoutViews() {\n    this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    this.updateSashEnablement();\n    if (this.viewItems.length === 0) {\n      return;\n    }\n    const visibleViewItems = this.viewItems.filter(i => i.visible);\n    const sashCount = Math.max(0, visibleViewItems.length - 1);\n    const marginReducedSize = this.margin * sashCount / Math.max(1, visibleViewItems.length);\n    let totalLeftOffset = 0;\n    const viewLeftOffsets = [];\n    const sashWidth = 4; // hardcoded in css\n    const runningVisiblePanelCount = this.viewItems.reduce((arr, viewItem, i) => {\n      const flag = viewItem.visible ? 1 : 0;\n      if (i === 0) {\n        arr.push(flag);\n      } else {\n        arr.push(arr[i - 1] + flag);\n      }\n      return arr;\n    }, []);\n    // calculate both view and cash positions\n    this.viewItems.forEach((view, i) => {\n      totalLeftOffset += this.viewItems[i].size;\n      viewLeftOffsets.push(totalLeftOffset);\n      const size = view.visible ? view.size - marginReducedSize : 0;\n      const visiblePanelsBeforeThisView = Math.max(0, runningVisiblePanelCount[i] - 1);\n      const offset = i === 0 || visiblePanelsBeforeThisView === 0 ? 0 : viewLeftOffsets[i - 1] + visiblePanelsBeforeThisView / sashCount * marginReducedSize;\n      if (i < this.viewItems.length - 1) {\n        // calculate sash position\n        const newSize = view.visible ? offset + size - sashWidth / 2 + this.margin / 2 : offset;\n        if (this._orientation === Orientation.HORIZONTAL) {\n          this.sashes[i].container.style.left = `${newSize}px`;\n          this.sashes[i].container.style.top = `0px`;\n        }\n        if (this._orientation === Orientation.VERTICAL) {\n          this.sashes[i].container.style.left = `0px`;\n          this.sashes[i].container.style.top = `${newSize}px`;\n        }\n      }\n      // calculate view position\n      if (this._orientation === Orientation.HORIZONTAL) {\n        view.container.style.width = `${size}px`;\n        view.container.style.left = `${offset}px`;\n        view.container.style.top = '';\n        view.container.style.height = '';\n      }\n      if (this._orientation === Orientation.VERTICAL) {\n        view.container.style.height = `${size}px`;\n        view.container.style.top = `${offset}px`;\n        view.container.style.width = '';\n        view.container.style.left = '';\n      }\n      view.view.layout(view.size - marginReducedSize, this._orthogonalSize);\n    });\n  }\n  findFirstSnapIndex(indexes) {\n    // visible views first\n    for (const index of indexes) {\n      const viewItem = this.viewItems[index];\n      if (!viewItem.visible) {\n        continue;\n      }\n      if (viewItem.snap) {\n        return index;\n      }\n    }\n    // then, hidden views\n    for (const index of indexes) {\n      const viewItem = this.viewItems[index];\n      if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\n        return undefined;\n      }\n      if (!viewItem.visible && viewItem.snap) {\n        return index;\n      }\n    }\n    return undefined;\n  }\n  updateSashEnablement() {\n    let previous = false;\n    const collapsesDown = this.viewItems.map(i => previous = i.size - i.minimumSize > 0 || previous);\n    previous = false;\n    const expandsDown = this.viewItems.map(i => previous = i.maximumSize - i.size > 0 || previous);\n    const reverseViews = [...this.viewItems].reverse();\n    previous = false;\n    const collapsesUp = reverseViews.map(i => previous = i.size - i.minimumSize > 0 || previous).reverse();\n    previous = false;\n    const expandsUp = reverseViews.map(i => previous = i.maximumSize - i.size > 0 || previous).reverse();\n    let position = 0;\n    for (let index = 0; index < this.sashes.length; index++) {\n      const sash = this.sashes[index];\n      const viewItem = this.viewItems[index];\n      position += viewItem.size;\n      const min = !(collapsesDown[index] && expandsUp[index + 1]);\n      const max = !(expandsDown[index] && collapsesUp[index + 1]);\n      if (min && max) {\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n        const snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\n        const snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\n        if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\n          this.updateSash(sash, SashState.MINIMUM);\n        } else if (snappedAfter && collapsesDown[index] && (position < this._contentSize || this.endSnappingEnabled)) {\n          this.updateSash(sash, SashState.MAXIMUM);\n        } else {\n          this.updateSash(sash, SashState.DISABLED);\n        }\n      } else if (min && !max) {\n        this.updateSash(sash, SashState.MINIMUM);\n      } else if (!min && max) {\n        this.updateSash(sash, SashState.MAXIMUM);\n      } else {\n        this.updateSash(sash, SashState.ENABLED);\n      }\n    }\n  }\n  updateSash(sash, state) {\n    toggleClass(sash.container, 'dv-disabled', state === SashState.DISABLED);\n    toggleClass(sash.container, 'dv-enabled', state === SashState.ENABLED);\n    toggleClass(sash.container, 'dv-maximum', state === SashState.MAXIMUM);\n    toggleClass(sash.container, 'dv-minimum', state === SashState.MINIMUM);\n  }\n  createViewContainer() {\n    const element = document.createElement('div');\n    element.className = 'dv-view-container';\n    return element;\n  }\n  createSashContainer() {\n    const element = document.createElement('div');\n    element.className = 'dv-sash-container';\n    return element;\n  }\n  createContainer() {\n    const element = document.createElement('div');\n    const orientationClassname = this._orientation === Orientation.HORIZONTAL ? 'dv-horizontal' : 'dv-vertical';\n    element.className = `dv-split-view-container ${orientationClassname}`;\n    return element;\n  }\n  dispose() {\n    this._onDidSashEnd.dispose();\n    this._onDidAddView.dispose();\n    this._onDidRemoveView.dispose();\n    for (let i = 0; i < this.element.children.length; i++) {\n      if (this.element.children.item(i) === this.element) {\n        this.element.removeChild(this.element);\n        break;\n      }\n    }\n    for (const viewItem of this.viewItems) {\n      viewItem.dispose();\n    }\n    this.element.remove();\n  }\n}","map":{"version":3,"names":["removeClasses","addClasses","toggleClass","disableIframePointEvents","Emitter","pushToStart","pushToEnd","firstIndex","range","clamp","ViewItem","Orientation","SashState","LayoutPriority","Sizing","Distribute","type","Split","index","Invisible","cachedVisibleSize","Splitview","contentSize","_contentSize","size","_size","value","orthogonalSize","_orthogonalSize","length","viewItems","proportions","_proportions","undefined","orientation","_orientation","tmp","element","classList","add","HORIZONTAL","minimumSize","reduce","r","item","maximumSize","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","disabled","_disabled","margin","_margin","constructor","container","options","_a","_b","sashes","_onDidSashEnd","onDidSashEnd","event","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","map","x","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","NEGATIVE_INFINITY","overloadMaxDelta","snapBefore","snapAfter","upIndexes","downIndexes","i","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","Math","max","maxDelta","min","snapped","snapView","visible","limitDelta","setVisible","tentativeDelta","actualDelta","deltaUp","viewDelta","deltaDown","VERTICAL","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","style","styles","descriptor","views","forEach","viewDescriptor","sizing","view","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","Error","viewItem","setViewVisible","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","priority","Low","High","round","relayout","getViews","onDidChange","indexOf","skipLayout","document","createElement","className","viewSize","disposable","newSize","dispose","removeChild","insertBefore","children","splice","sash","onPointerStart","enabled","iframes","start","clientX","clientY","sashIndex","s","viewMaximumSize","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","viewMinimumSize","onPointerMove","current","end","release","removeEventListener","fire","addEventListener","sashItem","push","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","from","to","layout","previousSize","total","proportion","lowPriorityIndex","emptyDelta","visibleViewItems","sashCount","marginReducedSize","totalLeftOffset","viewLeftOffsets","sashWidth","runningVisiblePanelCount","arr","flag","visiblePanelsBeforeThisView","offset","left","top","width","height","snap","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","remove"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/splitview/splitview.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\nimport { removeClasses, addClasses, toggleClass, disableIframePointEvents, } from '../dom';\nimport { Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nexport var Orientation;\n(function (Orientation) {\n    Orientation[\"HORIZONTAL\"] = \"HORIZONTAL\";\n    Orientation[\"VERTICAL\"] = \"VERTICAL\";\n})(Orientation || (Orientation = {}));\nexport var SashState;\n(function (SashState) {\n    SashState[SashState[\"MAXIMUM\"] = 0] = \"MAXIMUM\";\n    SashState[SashState[\"MINIMUM\"] = 1] = \"MINIMUM\";\n    SashState[SashState[\"DISABLED\"] = 2] = \"DISABLED\";\n    SashState[SashState[\"ENABLED\"] = 3] = \"ENABLED\";\n})(SashState || (SashState = {}));\nexport var LayoutPriority;\n(function (LayoutPriority) {\n    LayoutPriority[\"Low\"] = \"low\";\n    LayoutPriority[\"High\"] = \"high\";\n    LayoutPriority[\"Normal\"] = \"normal\";\n})(LayoutPriority || (LayoutPriority = {}));\nexport var Sizing;\n(function (Sizing) {\n    Sizing.Distribute = { type: 'distribute' };\n    function Split(index) {\n        return { type: 'split', index };\n    }\n    Sizing.Split = Split;\n    function Invisible(cachedVisibleSize) {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n    Sizing.Invisible = Invisible;\n})(Sizing || (Sizing = {}));\nexport class Splitview {\n    get contentSize() {\n        return this._contentSize;\n    }\n    get size() {\n        return this._size;\n    }\n    set size(value) {\n        this._size = value;\n    }\n    get orthogonalSize() {\n        return this._orthogonalSize;\n    }\n    set orthogonalSize(value) {\n        this._orthogonalSize = value;\n    }\n    get length() {\n        return this.viewItems.length;\n    }\n    get proportions() {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(value) {\n        this._orientation = value;\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n        removeClasses(this.element, 'dv-horizontal', 'dv-vertical');\n        this.element.classList.add(this.orientation == Orientation.HORIZONTAL\n            ? 'dv-horizontal'\n            : 'dv-vertical');\n    }\n    get minimumSize() {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n    get maximumSize() {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n    get startSnappingEnabled() {\n        return this._startSnappingEnabled;\n    }\n    set startSnappingEnabled(startSnappingEnabled) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    get endSnappingEnabled() {\n        return this._endSnappingEnabled;\n    }\n    set endSnappingEnabled(endSnappingEnabled) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        toggleClass(this.element, 'dv-splitview-disabled', value);\n    }\n    get margin() {\n        return this._margin;\n    }\n    set margin(value) {\n        this._margin = value;\n        toggleClass(this.element, 'dv-splitview-has-margin', value !== 0);\n    }\n    constructor(container, options) {\n        var _a, _b;\n        this.container = container;\n        this.viewItems = [];\n        this.sashes = [];\n        this._size = 0;\n        this._orthogonalSize = 0;\n        this._contentSize = 0;\n        this._proportions = undefined;\n        this._startSnappingEnabled = true;\n        this._endSnappingEnabled = true;\n        this._disabled = false;\n        this._margin = 0;\n        this._onDidSashEnd = new Emitter();\n        this.onDidSashEnd = this._onDidSashEnd.event;\n        this._onDidAddView = new Emitter();\n        this.onDidAddView = this._onDidAddView.event;\n        this._onDidRemoveView = new Emitter();\n        this.onDidRemoveView = this._onDidRemoveView.event;\n        this.resize = (index, delta, sizes = this.viewItems.map((x) => x.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) => {\n            if (index < 0 || index > this.viewItems.length) {\n                return 0;\n            }\n            const upIndexes = range(index, -1);\n            const downIndexes = range(index + 1, this.viewItems.length);\n            //\n            if (highPriorityIndexes) {\n                for (const i of highPriorityIndexes) {\n                    pushToStart(upIndexes, i);\n                    pushToStart(downIndexes, i);\n                }\n            }\n            if (lowPriorityIndexes) {\n                for (const i of lowPriorityIndexes) {\n                    pushToEnd(upIndexes, i);\n                    pushToEnd(downIndexes, i);\n                }\n            }\n            //\n            const upItems = upIndexes.map((i) => this.viewItems[i]);\n            const upSizes = upIndexes.map((i) => sizes[i]);\n            //\n            const downItems = downIndexes.map((i) => this.viewItems[i]);\n            const downSizes = downIndexes.map((i) => sizes[i]);\n            //\n            const minDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].minimumSize - sizes[i], 0);\n            const maxDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].maximumSize - sizes[i], 0);\n            //\n            const maxDeltaDown = downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].minimumSize, 0);\n            const minDeltaDown = downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].maximumSize, 0);\n            //\n            const minDelta = Math.max(minDeltaUp, minDeltaDown);\n            const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n            //\n            let snapped = false;\n            if (snapBefore) {\n                const snapView = this.viewItems[snapBefore.index];\n                const visible = delta >= snapBefore.limitDelta;\n                snapped = visible !== snapView.visible;\n                snapView.setVisible(visible, snapBefore.size);\n            }\n            if (!snapped && snapAfter) {\n                const snapView = this.viewItems[snapAfter.index];\n                const visible = delta < snapAfter.limitDelta;\n                snapped = visible !== snapView.visible;\n                snapView.setVisible(visible, snapAfter.size);\n            }\n            if (snapped) {\n                return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n            }\n            //\n            const tentativeDelta = clamp(delta, minDelta, maxDelta);\n            let actualDelta = 0;\n            //\n            let deltaUp = tentativeDelta;\n            for (let i = 0; i < upItems.length; i++) {\n                const item = upItems[i];\n                const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n                const viewDelta = size - upSizes[i];\n                actualDelta += viewDelta;\n                deltaUp -= viewDelta;\n                item.size = size;\n            }\n            //\n            let deltaDown = actualDelta;\n            for (let i = 0; i < downItems.length; i++) {\n                const item = downItems[i];\n                const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n                const viewDelta = size - downSizes[i];\n                deltaDown += viewDelta;\n                item.size = size;\n            }\n            //\n            return delta;\n        };\n        this._orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : Orientation.VERTICAL;\n        this.element = this.createContainer();\n        this.margin = (_b = options.margin) !== null && _b !== void 0 ? _b : 0;\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n        this.container.appendChild(this.element);\n        this.style(options.styles);\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing = viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                    ? viewDescriptor.size\n                    : {\n                        type: 'invisible',\n                        cachedVisibleSize: viewDescriptor.size,\n                    };\n                const view = viewDescriptor.view;\n                this.addView(view, sizing, index, true\n                // true skip layout\n                );\n            });\n            // Initialize content size and proportions for first layout\n            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n    style(styles) {\n        if ((styles === null || styles === void 0 ? void 0 : styles.separatorBorder) === 'transparent') {\n            removeClasses(this.element, 'dv-separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        }\n        else {\n            addClasses(this.element, 'dv-separator-border');\n            if (styles === null || styles === void 0 ? void 0 : styles.separatorBorder) {\n                this.element.style.setProperty('--dv-separator-border', styles.separatorBorder);\n            }\n        }\n    }\n    isViewVisible(index) {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n    setViewVisible(index, visible) {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n        const viewItem = this.viewItems[index];\n        viewItem.setVisible(visible, viewItem.size);\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n    getViewSize(index) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n        return this.viewItems[index].size;\n    }\n    resizeView(index, size) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this._size));\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n    getViews() {\n        return this.viewItems.map((x) => x.view);\n    }\n    onDidChange(item, size) {\n        const index = this.viewItems.indexOf(item);\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n        item.size = size;\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n    addView(view, size = { type: 'distribute' }, index = this.viewItems.length, skipLayout) {\n        const container = document.createElement('div');\n        container.className = 'dv-view';\n        container.appendChild(view.element);\n        let viewSize;\n        if (typeof size === 'number') {\n            viewSize = size;\n        }\n        else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        }\n        else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        }\n        else {\n            viewSize = view.minimumSize;\n        }\n        const disposable = view.onDidChange((newSize) => this.onDidChange(viewItem, newSize.size));\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        }\n        else {\n            this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n        }\n        this.viewItems.splice(index, 0, viewItem);\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'dv-sash';\n            const onPointerStart = (event) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n                const iframes = disableIframePointEvents();\n                const start = this._orientation === Orientation.HORIZONTAL\n                    ? event.clientX\n                    : event.clientY;\n                const sashIndex = firstIndex(this.sashes, (s) => s.container === sash);\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n                //\n                let snapBefore;\n                let snapAfter;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n                const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n                const maxDeltaDown = downIndexes.length === 0\n                    ? Number.POSITIVE_INFINITY\n                    : downIndexes.reduce((r, i) => r +\n                        (sizes[i] - this.viewItems[i].minimumSize), 0);\n                const minDeltaDown = downIndexes.length === 0\n                    ? Number.NEGATIVE_INFINITY\n                    : downIndexes.reduce((r, i) => r +\n                        (sizes[i] -\n                            this.viewItems[i].viewMaximumSize), 0);\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n                const onPointerMove = (event) => {\n                    const current = this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n                    const delta = current - start;\n                    this.resize(sashIndex, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n                    iframes.release();\n                    this.saveProportions();\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n                    this._onDidSashEnd.fire(undefined);\n                };\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n            sash.addEventListener('pointerdown', onPointerStart);\n            const sashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n        if (!skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n        this._onDidAddView.fire(view);\n    }\n    distributeViewSizes() {\n        const flexibleViewItems = [];\n        let flexibleSize = 0;\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);\n        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n    removeView(index, sizing, skipLayout = false) {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n        if (!skipLayout) {\n            this.relayout();\n        }\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n        this._onDidRemoveView.fire(viewItem.view);\n        return viewItem.view;\n    }\n    getViewCachedVisibleSize(index) {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n    moveView(from, to) {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing = typeof cachedVisibleSize === 'undefined'\n            ? this.getViewSize(from)\n            : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n    layout(size, orthogonalSize) {\n        const previousSize = Math.max(this.size, this._contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);\n            const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);\n            this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        }\n        else {\n            let total = 0;\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n                if (typeof proportion === 'number') {\n                    total += proportion;\n                }\n                else {\n                    size -= item.size;\n                }\n            }\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n                if (typeof proportion === 'number' && total > 0) {\n                    item.size = clamp(Math.round((proportion * size) / total), item.minimumSize, item.maximumSize);\n                }\n            }\n        }\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n    relayout(lowPriorityIndexes, highPriorityIndexes) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        this.resize(this.viewItems.length - 1, this._size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n    distributeEmptySpace(lowPriorityIndex) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);\n        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n            const viewDelta = size - item.size;\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n    saveProportions() {\n        if (this.proportionalLayout && this._contentSize > 0) {\n            this._proportions = this.viewItems.map((i) => i.visible ? i.size / this._contentSize : undefined);\n        }\n    }\n    /**\n     * Margin explain:\n     *\n     * For `n` views in a splitview there will be `n-1` margins `m`.\n     *\n     * To fit the margins each view must reduce in size by `(m * (n - 1)) / n`.\n     *\n     * For each view `i` the offet must be adjusted by `m * i/(n - 1)`.\n     */\n    layoutViews() {\n        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        this.updateSashEnablement();\n        if (this.viewItems.length === 0) {\n            return;\n        }\n        const visibleViewItems = this.viewItems.filter((i) => i.visible);\n        const sashCount = Math.max(0, visibleViewItems.length - 1);\n        const marginReducedSize = (this.margin * sashCount) / Math.max(1, visibleViewItems.length);\n        let totalLeftOffset = 0;\n        const viewLeftOffsets = [];\n        const sashWidth = 4; // hardcoded in css\n        const runningVisiblePanelCount = this.viewItems.reduce((arr, viewItem, i) => {\n            const flag = viewItem.visible ? 1 : 0;\n            if (i === 0) {\n                arr.push(flag);\n            }\n            else {\n                arr.push(arr[i - 1] + flag);\n            }\n            return arr;\n        }, []);\n        // calculate both view and cash positions\n        this.viewItems.forEach((view, i) => {\n            totalLeftOffset += this.viewItems[i].size;\n            viewLeftOffsets.push(totalLeftOffset);\n            const size = view.visible ? view.size - marginReducedSize : 0;\n            const visiblePanelsBeforeThisView = Math.max(0, runningVisiblePanelCount[i] - 1);\n            const offset = i === 0 || visiblePanelsBeforeThisView === 0\n                ? 0\n                : viewLeftOffsets[i - 1] +\n                    (visiblePanelsBeforeThisView / sashCount) *\n                        marginReducedSize;\n            if (i < this.viewItems.length - 1) {\n                // calculate sash position\n                const newSize = view.visible\n                    ? offset + size - sashWidth / 2 + this.margin / 2\n                    : offset;\n                if (this._orientation === Orientation.HORIZONTAL) {\n                    this.sashes[i].container.style.left = `${newSize}px`;\n                    this.sashes[i].container.style.top = `0px`;\n                }\n                if (this._orientation === Orientation.VERTICAL) {\n                    this.sashes[i].container.style.left = `0px`;\n                    this.sashes[i].container.style.top = `${newSize}px`;\n                }\n            }\n            // calculate view position\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${size}px`;\n                view.container.style.left = `${offset}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${size}px`;\n                view.container.style.top = `${offset}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n            view.view.layout(view.size - marginReducedSize, this._orthogonalSize);\n        });\n    }\n    findFirstSnapIndex(indexes) {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (!viewItem.visible) {\n                continue;\n            }\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0) {\n                return undefined;\n            }\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n        return undefined;\n    }\n    updateSashEnablement() {\n        let previous = false;\n        const collapsesDown = this.viewItems.map((i) => (previous = i.size - i.minimumSize > 0 || previous));\n        previous = false;\n        const expandsDown = this.viewItems.map((i) => (previous = i.maximumSize - i.size > 0 || previous));\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                const snappedBefore = typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter = typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n                if (snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                }\n                else if (snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this._contentSize || this.endSnappingEnabled)) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                }\n                else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            }\n            else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            }\n            else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            }\n            else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n    updateSash(sash, state) {\n        toggleClass(sash.container, 'dv-disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'dv-enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'dv-maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'dv-minimum', state === SashState.MINIMUM);\n    }\n    createViewContainer() {\n        const element = document.createElement('div');\n        element.className = 'dv-view-container';\n        return element;\n    }\n    createSashContainer() {\n        const element = document.createElement('div');\n        element.className = 'dv-sash-container';\n        return element;\n    }\n    createContainer() {\n        const element = document.createElement('div');\n        const orientationClassname = this._orientation === Orientation.HORIZONTAL\n            ? 'dv-horizontal'\n            : 'dv-vertical';\n        element.className = `dv-split-view-container ${orientationClassname}`;\n        return element;\n    }\n    dispose() {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n        this.element.remove();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}