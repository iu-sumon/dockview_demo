{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\nimport { Splitview, Orientation, LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { LeafNode } from './leafNode';\nimport { CompositeDisposable, Disposable } from '../lifecycle';\nexport class BranchNode extends CompositeDisposable {\n  get width() {\n    return this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;\n  }\n  get height() {\n    return this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;\n  }\n  get minimumSize() {\n    return this.children.length === 0 ? 0 : Math.max(...this.children.map((c, index) => this.splitview.isViewVisible(index) ? c.minimumOrthogonalSize : 0));\n  }\n  get maximumSize() {\n    return Math.min(...this.children.map((c, index) => this.splitview.isViewVisible(index) ? c.maximumOrthogonalSize : Number.POSITIVE_INFINITY));\n  }\n  get minimumOrthogonalSize() {\n    return this.splitview.minimumSize;\n  }\n  get maximumOrthogonalSize() {\n    return this.splitview.maximumSize;\n  }\n  get orthogonalSize() {\n    return this._orthogonalSize;\n  }\n  get size() {\n    return this._size;\n  }\n  get minimumWidth() {\n    return this.orientation === Orientation.HORIZONTAL ? this.minimumOrthogonalSize : this.minimumSize;\n  }\n  get minimumHeight() {\n    return this.orientation === Orientation.HORIZONTAL ? this.minimumSize : this.minimumOrthogonalSize;\n  }\n  get maximumWidth() {\n    return this.orientation === Orientation.HORIZONTAL ? this.maximumOrthogonalSize : this.maximumSize;\n  }\n  get maximumHeight() {\n    return this.orientation === Orientation.HORIZONTAL ? this.maximumSize : this.maximumOrthogonalSize;\n  }\n  get priority() {\n    if (this.children.length === 0) {\n      return LayoutPriority.Normal;\n    }\n    const priorities = this.children.map(c => typeof c.priority === 'undefined' ? LayoutPriority.Normal : c.priority);\n    if (priorities.some(p => p === LayoutPriority.High)) {\n      return LayoutPriority.High;\n    } else if (priorities.some(p => p === LayoutPriority.Low)) {\n      return LayoutPriority.Low;\n    }\n    return LayoutPriority.Normal;\n  }\n  get disabled() {\n    return this.splitview.disabled;\n  }\n  set disabled(value) {\n    this.splitview.disabled = value;\n  }\n  get margin() {\n    return this.splitview.margin;\n  }\n  set margin(value) {\n    this.splitview.margin = value;\n    this.children.forEach(child => {\n      if (child instanceof BranchNode) {\n        child.margin = value;\n      }\n    });\n  }\n  constructor(orientation, proportionalLayout, styles, size, orthogonalSize, disabled, margin, childDescriptors) {\n    super();\n    this.orientation = orientation;\n    this.proportionalLayout = proportionalLayout;\n    this.styles = styles;\n    this._childrenDisposable = Disposable.NONE;\n    this.children = [];\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n    this._onDidVisibilityChange = new Emitter();\n    this.onDidVisibilityChange = this._onDidVisibilityChange.event;\n    this._orthogonalSize = orthogonalSize;\n    this._size = size;\n    this.element = document.createElement('div');\n    this.element.className = 'dv-branch-node';\n    if (!childDescriptors) {\n      this.splitview = new Splitview(this.element, {\n        orientation: this.orientation,\n        proportionalLayout,\n        styles,\n        margin\n      });\n      this.splitview.layout(this.size, this.orthogonalSize);\n    } else {\n      const descriptor = {\n        views: childDescriptors.map(childDescriptor => {\n          return {\n            view: childDescriptor.node,\n            size: childDescriptor.node.size,\n            visible: childDescriptor.node instanceof LeafNode && childDescriptor.visible !== undefined ? childDescriptor.visible : true\n          };\n        }),\n        size: this.orthogonalSize\n      };\n      this.children = childDescriptors.map(c => c.node);\n      this.splitview = new Splitview(this.element, {\n        orientation: this.orientation,\n        descriptor,\n        proportionalLayout,\n        styles,\n        margin\n      });\n    }\n    this.disabled = disabled;\n    this.addDisposables(this._onDidChange, this._onDidVisibilityChange, this.splitview.onDidSashEnd(() => {\n      this._onDidChange.fire({});\n    }));\n    this.setupChildrenEvents();\n  }\n  setVisible(_visible) {\n    // noop\n  }\n  isChildVisible(index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error('Invalid index');\n    }\n    return this.splitview.isViewVisible(index);\n  }\n  setChildVisible(index, visible) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error('Invalid index');\n    }\n    if (this.splitview.isViewVisible(index) === visible) {\n      return;\n    }\n    const wereAllChildrenHidden = this.splitview.contentSize === 0;\n    this.splitview.setViewVisible(index, visible);\n    // }\n    const areAllChildrenHidden = this.splitview.contentSize === 0;\n    // If all children are hidden then the parent should hide the entire splitview\n    // If the entire splitview is hidden then the parent should show the splitview when a child is shown\n    if (visible && wereAllChildrenHidden || !visible && areAllChildrenHidden) {\n      this._onDidVisibilityChange.fire({\n        visible\n      });\n    }\n  }\n  moveChild(from, to) {\n    if (from === to) {\n      return;\n    }\n    if (from < 0 || from >= this.children.length) {\n      throw new Error('Invalid from index');\n    }\n    if (from < to) {\n      to--;\n    }\n    this.splitview.moveView(from, to);\n    const child = this._removeChild(from);\n    this._addChild(child, to);\n  }\n  getChildSize(index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error('Invalid index');\n    }\n    return this.splitview.getViewSize(index);\n  }\n  resizeChild(index, size) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error('Invalid index');\n    }\n    this.splitview.resizeView(index, size);\n  }\n  layout(size, orthogonalSize) {\n    this._size = orthogonalSize;\n    this._orthogonalSize = size;\n    this.splitview.layout(orthogonalSize, size);\n  }\n  addChild(node, size, index, skipLayout) {\n    if (index < 0 || index > this.children.length) {\n      throw new Error('Invalid index');\n    }\n    this.splitview.addView(node, size, index, skipLayout);\n    this._addChild(node, index);\n  }\n  getChildCachedVisibleSize(index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error('Invalid index');\n    }\n    return this.splitview.getViewCachedVisibleSize(index);\n  }\n  removeChild(index, sizing) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error('Invalid index');\n    }\n    this.splitview.removeView(index, sizing);\n    return this._removeChild(index);\n  }\n  _addChild(node, index) {\n    this.children.splice(index, 0, node);\n    this.setupChildrenEvents();\n  }\n  _removeChild(index) {\n    const [child] = this.children.splice(index, 1);\n    this.setupChildrenEvents();\n    return child;\n  }\n  setupChildrenEvents() {\n    this._childrenDisposable.dispose();\n    this._childrenDisposable = new CompositeDisposable(Event.any(...this.children.map(c => c.onDidChange))(e => {\n      /**\n       * indicate a change has occured to allows any re-rendering but don't bubble\n       * event because that was specific to this branch\n       */\n      this._onDidChange.fire({\n        size: e.orthogonalSize\n      });\n    }), ...this.children.map((c, i) => {\n      if (c instanceof BranchNode) {\n        return c.onDidVisibilityChange(({\n          visible\n        }) => {\n          this.setChildVisible(i, visible);\n        });\n      }\n      return Disposable.NONE;\n    }));\n  }\n  dispose() {\n    this._childrenDisposable.dispose();\n    this.splitview.dispose();\n    this.children.forEach(child => child.dispose());\n    super.dispose();\n  }\n}","map":{"version":3,"names":["Splitview","Orientation","LayoutPriority","Emitter","Event","LeafNode","CompositeDisposable","Disposable","BranchNode","width","orientation","HORIZONTAL","size","orthogonalSize","height","minimumSize","children","length","Math","max","map","c","index","splitview","isViewVisible","minimumOrthogonalSize","maximumSize","min","maximumOrthogonalSize","Number","POSITIVE_INFINITY","_orthogonalSize","_size","minimumWidth","minimumHeight","maximumWidth","maximumHeight","priority","Normal","priorities","some","p","High","Low","disabled","value","margin","forEach","child","constructor","proportionalLayout","styles","childDescriptors","_childrenDisposable","NONE","_onDidChange","onDidChange","event","_onDidVisibilityChange","onDidVisibilityChange","element","document","createElement","className","layout","descriptor","views","childDescriptor","view","node","visible","undefined","addDisposables","onDidSashEnd","fire","setupChildrenEvents","setVisible","_visible","isChildVisible","Error","setChildVisible","wereAllChildrenHidden","contentSize","setViewVisible","areAllChildrenHidden","moveChild","from","to","moveView","_removeChild","_addChild","getChildSize","getViewSize","resizeChild","resizeView","addChild","skipLayout","addView","getChildCachedVisibleSize","getViewCachedVisibleSize","removeChild","sizing","removeView","splice","dispose","any","e","i"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/gridview/branchNode.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\nimport { Splitview, Orientation, LayoutPriority, } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { LeafNode } from './leafNode';\nimport { CompositeDisposable, Disposable } from '../lifecycle';\nexport class BranchNode extends CompositeDisposable {\n    get width() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n    get height() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n    get minimumSize() {\n        return this.children.length === 0\n            ? 0\n            : Math.max(...this.children.map((c, index) => this.splitview.isViewVisible(index)\n                ? c.minimumOrthogonalSize\n                : 0));\n    }\n    get maximumSize() {\n        return Math.min(...this.children.map((c, index) => this.splitview.isViewVisible(index)\n            ? c.maximumOrthogonalSize\n            : Number.POSITIVE_INFINITY));\n    }\n    get minimumOrthogonalSize() {\n        return this.splitview.minimumSize;\n    }\n    get maximumOrthogonalSize() {\n        return this.splitview.maximumSize;\n    }\n    get orthogonalSize() {\n        return this._orthogonalSize;\n    }\n    get size() {\n        return this._size;\n    }\n    get minimumWidth() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n    get minimumHeight() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n    get maximumWidth() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n    get maximumHeight() {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n    get priority() {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n        const priorities = this.children.map((c) => typeof c.priority === 'undefined'\n            ? LayoutPriority.Normal\n            : c.priority);\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        }\n        else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n        return LayoutPriority.Normal;\n    }\n    get disabled() {\n        return this.splitview.disabled;\n    }\n    set disabled(value) {\n        this.splitview.disabled = value;\n    }\n    get margin() {\n        return this.splitview.margin;\n    }\n    set margin(value) {\n        this.splitview.margin = value;\n        this.children.forEach((child) => {\n            if (child instanceof BranchNode) {\n                child.margin = value;\n            }\n        });\n    }\n    constructor(orientation, proportionalLayout, styles, size, orthogonalSize, disabled, margin, childDescriptors) {\n        super();\n        this.orientation = orientation;\n        this.proportionalLayout = proportionalLayout;\n        this.styles = styles;\n        this._childrenDisposable = Disposable.NONE;\n        this.children = [];\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._onDidVisibilityChange = new Emitter();\n        this.onDidVisibilityChange = this._onDidVisibilityChange.event;\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'dv-branch-node';\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n                margin,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        }\n        else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible: childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                            ? childDescriptor.visible\n                            : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n                styles,\n                margin,\n            });\n        }\n        this.disabled = disabled;\n        this.addDisposables(this._onDidChange, this._onDidVisibilityChange, this.splitview.onDidSashEnd(() => {\n            this._onDidChange.fire({});\n        }));\n        this.setupChildrenEvents();\n    }\n    setVisible(_visible) {\n        // noop\n    }\n    isChildVisible(index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n        return this.splitview.isViewVisible(index);\n    }\n    setChildVisible(index, visible) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n        const wereAllChildrenHidden = this.splitview.contentSize === 0;\n        this.splitview.setViewVisible(index, visible);\n        // }\n        const areAllChildrenHidden = this.splitview.contentSize === 0;\n        // If all children are hidden then the parent should hide the entire splitview\n        // If the entire splitview is hidden then the parent should show the splitview when a child is shown\n        if ((visible && wereAllChildrenHidden) ||\n            (!visible && areAllChildrenHidden)) {\n            this._onDidVisibilityChange.fire({ visible });\n        }\n    }\n    moveChild(from, to) {\n        if (from === to) {\n            return;\n        }\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n        if (from < to) {\n            to--;\n        }\n        this.splitview.moveView(from, to);\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n    getChildSize(index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n        return this.splitview.getViewSize(index);\n    }\n    resizeChild(index, size) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n        this.splitview.resizeView(index, size);\n    }\n    layout(size, orthogonalSize) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n        this.splitview.layout(orthogonalSize, size);\n    }\n    addChild(node, size, index, skipLayout) {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n    getChildCachedVisibleSize(index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n    removeChild(index, sizing) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n    _addChild(node, index) {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n    _removeChild(index) {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n        return child;\n    }\n    setupChildrenEvents() {\n        this._childrenDisposable.dispose();\n        this._childrenDisposable = new CompositeDisposable(Event.any(...this.children.map((c) => c.onDidChange))((e) => {\n            /**\n             * indicate a change has occured to allows any re-rendering but don't bubble\n             * event because that was specific to this branch\n             */\n            this._onDidChange.fire({ size: e.orthogonalSize });\n        }), ...this.children.map((c, i) => {\n            if (c instanceof BranchNode) {\n                return c.onDidVisibilityChange(({ visible }) => {\n                    this.setChildVisible(i, visible);\n                });\n            }\n            return Disposable.NONE;\n        }));\n    }\n    dispose() {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n        super.dispose();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}