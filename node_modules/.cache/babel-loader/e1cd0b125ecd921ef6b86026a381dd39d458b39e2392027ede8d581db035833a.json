{"ast":null,"code":"import { Emitter, Event, AsapEvent } from '../events';\nimport { getGridLocation, Gridview } from './gridview';\nimport { Disposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { Sizing } from '../splitview/splitview';\nimport { Resizable } from '../resizable';\nimport { Classnames } from '../dom';\nconst nextLayoutId = sequentialNumberGenerator();\nexport function toTarget(direction) {\n  switch (direction) {\n    case 'left':\n      return 'left';\n    case 'right':\n      return 'right';\n    case 'above':\n      return 'top';\n    case 'below':\n      return 'bottom';\n    case 'within':\n    default:\n      return 'center';\n  }\n}\nexport class BaseGrid extends Resizable {\n  get id() {\n    return this._id;\n  }\n  get size() {\n    return this._groups.size;\n  }\n  get groups() {\n    return Array.from(this._groups.values()).map(_ => _.value);\n  }\n  get width() {\n    return this.gridview.width;\n  }\n  get height() {\n    return this.gridview.height;\n  }\n  get minimumHeight() {\n    return this.gridview.minimumHeight;\n  }\n  get maximumHeight() {\n    return this.gridview.maximumHeight;\n  }\n  get minimumWidth() {\n    return this.gridview.minimumWidth;\n  }\n  get maximumWidth() {\n    return this.gridview.maximumWidth;\n  }\n  get activeGroup() {\n    return this._activeGroup;\n  }\n  get locked() {\n    return this.gridview.locked;\n  }\n  set locked(value) {\n    this.gridview.locked = value;\n  }\n  constructor(container, options) {\n    var _a;\n    super(document.createElement('div'), options.disableAutoResizing);\n    this._id = nextLayoutId.next();\n    this._groups = new Map();\n    this._onDidRemove = new Emitter();\n    this.onDidRemove = this._onDidRemove.event;\n    this._onDidAdd = new Emitter();\n    this.onDidAdd = this._onDidAdd.event;\n    this._onDidMaximizedChange = new Emitter();\n    this.onDidMaximizedChange = this._onDidMaximizedChange.event;\n    this._onDidActiveChange = new Emitter();\n    this.onDidActiveChange = this._onDidActiveChange.event;\n    this._bufferOnDidLayoutChange = new AsapEvent();\n    this.onDidLayoutChange = this._bufferOnDidLayoutChange.onEvent;\n    this._onDidViewVisibilityChangeMicroTaskQueue = new AsapEvent();\n    this.onDidViewVisibilityChangeMicroTaskQueue = this._onDidViewVisibilityChangeMicroTaskQueue.onEvent;\n    this.element.style.height = '100%';\n    this.element.style.width = '100%';\n    this._classNames = new Classnames(this.element);\n    this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');\n    // the container is owned by the third-party, do not modify/delete it\n    container.appendChild(this.element);\n    this.gridview = new Gridview(!!options.proportionalLayout, options.styles, options.orientation, options.locked, options.margin);\n    this.gridview.locked = !!options.locked;\n    this.element.appendChild(this.gridview.element);\n    this.layout(0, 0, true); // set some elements height/widths\n    this.addDisposables(this.gridview.onDidMaximizedNodeChange(event => {\n      this._onDidMaximizedChange.fire({\n        panel: event.view,\n        isMaximized: event.isMaximized\n      });\n    }), this.gridview.onDidViewVisibilityChange(() => this._onDidViewVisibilityChangeMicroTaskQueue.fire()), this.onDidViewVisibilityChangeMicroTaskQueue(() => {\n      this.layout(this.width, this.height, true);\n    }), Disposable.from(() => {\n      var _a;\n      (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.element);\n    }), this.gridview.onDidChange(() => {\n      this._bufferOnDidLayoutChange.fire();\n    }), Event.any(this.onDidAdd, this.onDidRemove, this.onDidActiveChange)(() => {\n      this._bufferOnDidLayoutChange.fire();\n    }), this._onDidMaximizedChange, this._onDidViewVisibilityChangeMicroTaskQueue, this._bufferOnDidLayoutChange);\n  }\n  setVisible(panel, visible) {\n    this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    this._bufferOnDidLayoutChange.fire();\n  }\n  isVisible(panel) {\n    return this.gridview.isViewVisible(getGridLocation(panel.element));\n  }\n  updateOptions(options) {\n    var _a, _b, _c, _d;\n    if (typeof options.proportionalLayout === 'boolean') {\n      // this.gridview.proportionalLayout = options.proportionalLayout; // not supported\n    }\n    if (options.orientation) {\n      this.gridview.orientation = options.orientation;\n    }\n    if ('styles' in options) {\n      // this.gridview.styles = options.styles; // not supported\n    }\n    if ('disableResizing' in options) {\n      this.disableResizing = (_a = options.disableAutoResizing) !== null && _a !== void 0 ? _a : false;\n    }\n    if ('locked' in options) {\n      this.locked = (_b = options.locked) !== null && _b !== void 0 ? _b : false;\n    }\n    if ('margin' in options) {\n      this.gridview.margin = (_c = options.margin) !== null && _c !== void 0 ? _c : 0;\n    }\n    if ('className' in options) {\n      this._classNames.setClassNames((_d = options.className) !== null && _d !== void 0 ? _d : '');\n    }\n  }\n  maximizeGroup(panel) {\n    this.gridview.maximizeView(panel);\n    this.doSetGroupActive(panel);\n  }\n  isMaximizedGroup(panel) {\n    return this.gridview.maximizedView() === panel;\n  }\n  exitMaximizedGroup() {\n    this.gridview.exitMaximizedView();\n  }\n  hasMaximizedGroup() {\n    return this.gridview.hasMaximizedView();\n  }\n  doAddGroup(group, location = [0], size) {\n    this.gridview.addView(group, size !== null && size !== void 0 ? size : Sizing.Distribute, location);\n    this._onDidAdd.fire(group);\n  }\n  doRemoveGroup(group, options) {\n    if (!this._groups.has(group.id)) {\n      throw new Error('invalid operation');\n    }\n    const item = this._groups.get(group.id);\n    const view = this.gridview.remove(group, Sizing.Distribute);\n    if (item && !(options === null || options === void 0 ? void 0 : options.skipDispose)) {\n      item.disposable.dispose();\n      item.value.dispose();\n      this._groups.delete(group.id);\n      this._onDidRemove.fire(group);\n    }\n    if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {\n      const groups = Array.from(this._groups.values());\n      this.doSetGroupActive(groups.length > 0 ? groups[0].value : undefined);\n    }\n    return view;\n  }\n  getPanel(id) {\n    var _a;\n    return (_a = this._groups.get(id)) === null || _a === void 0 ? void 0 : _a.value;\n  }\n  doSetGroupActive(group) {\n    if (this._activeGroup === group) {\n      return;\n    }\n    if (this._activeGroup) {\n      this._activeGroup.setActive(false);\n    }\n    if (group) {\n      group.setActive(true);\n    }\n    this._activeGroup = group;\n    this._onDidActiveChange.fire(group);\n  }\n  removeGroup(group) {\n    this.doRemoveGroup(group);\n  }\n  moveToNext(options) {\n    var _a;\n    if (!options) {\n      options = {};\n    }\n    if (!options.group) {\n      if (!this.activeGroup) {\n        return;\n      }\n      options.group = this.activeGroup;\n    }\n    const location = getGridLocation(options.group.element);\n    const next = (_a = this.gridview.next(location)) === null || _a === void 0 ? void 0 : _a.view;\n    this.doSetGroupActive(next);\n  }\n  moveToPrevious(options) {\n    var _a;\n    if (!options) {\n      options = {};\n    }\n    if (!options.group) {\n      if (!this.activeGroup) {\n        return;\n      }\n      options.group = this.activeGroup;\n    }\n    const location = getGridLocation(options.group.element);\n    const next = (_a = this.gridview.previous(location)) === null || _a === void 0 ? void 0 : _a.view;\n    this.doSetGroupActive(next);\n  }\n  layout(width, height, forceResize) {\n    const different = forceResize || width !== this.width || height !== this.height;\n    if (!different) {\n      return;\n    }\n    this.gridview.element.style.height = `${height}px`;\n    this.gridview.element.style.width = `${width}px`;\n    this.gridview.layout(width, height);\n  }\n  dispose() {\n    this._onDidActiveChange.dispose();\n    this._onDidAdd.dispose();\n    this._onDidRemove.dispose();\n    for (const group of this.groups) {\n      group.dispose();\n    }\n    this.gridview.dispose();\n    super.dispose();\n  }\n}","map":{"version":3,"names":["Emitter","Event","AsapEvent","getGridLocation","Gridview","Disposable","sequentialNumberGenerator","Sizing","Resizable","Classnames","nextLayoutId","toTarget","direction","BaseGrid","id","_id","size","_groups","groups","Array","from","values","map","_","value","width","gridview","height","minimumHeight","maximumHeight","minimumWidth","maximumWidth","activeGroup","_activeGroup","locked","constructor","container","options","_a","document","createElement","disableAutoResizing","next","Map","_onDidRemove","onDidRemove","event","_onDidAdd","onDidAdd","_onDidMaximizedChange","onDidMaximizedChange","_onDidActiveChange","onDidActiveChange","_bufferOnDidLayoutChange","onDidLayoutChange","onEvent","_onDidViewVisibilityChangeMicroTaskQueue","onDidViewVisibilityChangeMicroTaskQueue","element","style","_classNames","setClassNames","className","appendChild","proportionalLayout","styles","orientation","margin","layout","addDisposables","onDidMaximizedNodeChange","fire","panel","view","isMaximized","onDidViewVisibilityChange","parentElement","removeChild","onDidChange","any","setVisible","visible","setViewVisible","isVisible","isViewVisible","updateOptions","_b","_c","_d","disableResizing","maximizeGroup","maximizeView","doSetGroupActive","isMaximizedGroup","maximizedView","exitMaximizedGroup","exitMaximizedView","hasMaximizedGroup","hasMaximizedView","doAddGroup","group","location","addView","Distribute","doRemoveGroup","has","Error","item","get","remove","skipDispose","disposable","dispose","delete","skipActive","length","undefined","getPanel","setActive","removeGroup","moveToNext","moveToPrevious","previous","forceResize","different"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js"],"sourcesContent":["import { Emitter, Event, AsapEvent } from '../events';\nimport { getGridLocation, Gridview } from './gridview';\nimport { Disposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { Sizing } from '../splitview/splitview';\nimport { Resizable } from '../resizable';\nimport { Classnames } from '../dom';\nconst nextLayoutId = sequentialNumberGenerator();\nexport function toTarget(direction) {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\nexport class BaseGrid extends Resizable {\n    get id() {\n        return this._id;\n    }\n    get size() {\n        return this._groups.size;\n    }\n    get groups() {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n    get width() {\n        return this.gridview.width;\n    }\n    get height() {\n        return this.gridview.height;\n    }\n    get minimumHeight() {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight() {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth() {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth() {\n        return this.gridview.maximumWidth;\n    }\n    get activeGroup() {\n        return this._activeGroup;\n    }\n    get locked() {\n        return this.gridview.locked;\n    }\n    set locked(value) {\n        this.gridview.locked = value;\n    }\n    constructor(container, options) {\n        var _a;\n        super(document.createElement('div'), options.disableAutoResizing);\n        this._id = nextLayoutId.next();\n        this._groups = new Map();\n        this._onDidRemove = new Emitter();\n        this.onDidRemove = this._onDidRemove.event;\n        this._onDidAdd = new Emitter();\n        this.onDidAdd = this._onDidAdd.event;\n        this._onDidMaximizedChange = new Emitter();\n        this.onDidMaximizedChange = this._onDidMaximizedChange.event;\n        this._onDidActiveChange = new Emitter();\n        this.onDidActiveChange = this._onDidActiveChange.event;\n        this._bufferOnDidLayoutChange = new AsapEvent();\n        this.onDidLayoutChange = this._bufferOnDidLayoutChange.onEvent;\n        this._onDidViewVisibilityChangeMicroTaskQueue = new AsapEvent();\n        this.onDidViewVisibilityChangeMicroTaskQueue = this._onDidViewVisibilityChangeMicroTaskQueue.onEvent;\n        this.element.style.height = '100%';\n        this.element.style.width = '100%';\n        this._classNames = new Classnames(this.element);\n        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');\n        // the container is owned by the third-party, do not modify/delete it\n        container.appendChild(this.element);\n        this.gridview = new Gridview(!!options.proportionalLayout, options.styles, options.orientation, options.locked, options.margin);\n        this.gridview.locked = !!options.locked;\n        this.element.appendChild(this.gridview.element);\n        this.layout(0, 0, true); // set some elements height/widths\n        this.addDisposables(this.gridview.onDidMaximizedNodeChange((event) => {\n            this._onDidMaximizedChange.fire({\n                panel: event.view,\n                isMaximized: event.isMaximized,\n            });\n        }), this.gridview.onDidViewVisibilityChange(() => this._onDidViewVisibilityChangeMicroTaskQueue.fire()), this.onDidViewVisibilityChangeMicroTaskQueue(() => {\n            this.layout(this.width, this.height, true);\n        }), Disposable.from(() => {\n            var _a;\n            (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.element);\n        }), this.gridview.onDidChange(() => {\n            this._bufferOnDidLayoutChange.fire();\n        }), Event.any(this.onDidAdd, this.onDidRemove, this.onDidActiveChange)(() => {\n            this._bufferOnDidLayoutChange.fire();\n        }), this._onDidMaximizedChange, this._onDidViewVisibilityChangeMicroTaskQueue, this._bufferOnDidLayoutChange);\n    }\n    setVisible(panel, visible) {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._bufferOnDidLayoutChange.fire();\n    }\n    isVisible(panel) {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n    updateOptions(options) {\n        var _a, _b, _c, _d;\n        if (typeof options.proportionalLayout === 'boolean') {\n            // this.gridview.proportionalLayout = options.proportionalLayout; // not supported\n        }\n        if (options.orientation) {\n            this.gridview.orientation = options.orientation;\n        }\n        if ('styles' in options) {\n            // this.gridview.styles = options.styles; // not supported\n        }\n        if ('disableResizing' in options) {\n            this.disableResizing = (_a = options.disableAutoResizing) !== null && _a !== void 0 ? _a : false;\n        }\n        if ('locked' in options) {\n            this.locked = (_b = options.locked) !== null && _b !== void 0 ? _b : false;\n        }\n        if ('margin' in options) {\n            this.gridview.margin = (_c = options.margin) !== null && _c !== void 0 ? _c : 0;\n        }\n        if ('className' in options) {\n            this._classNames.setClassNames((_d = options.className) !== null && _d !== void 0 ? _d : '');\n        }\n    }\n    maximizeGroup(panel) {\n        this.gridview.maximizeView(panel);\n        this.doSetGroupActive(panel);\n    }\n    isMaximizedGroup(panel) {\n        return this.gridview.maximizedView() === panel;\n    }\n    exitMaximizedGroup() {\n        this.gridview.exitMaximizedView();\n    }\n    hasMaximizedGroup() {\n        return this.gridview.hasMaximizedView();\n    }\n    doAddGroup(group, location = [0], size) {\n        this.gridview.addView(group, size !== null && size !== void 0 ? size : Sizing.Distribute, location);\n        this._onDidAdd.fire(group);\n    }\n    doRemoveGroup(group, options) {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n        const item = this._groups.get(group.id);\n        const view = this.gridview.remove(group, Sizing.Distribute);\n        if (item && !(options === null || options === void 0 ? void 0 : options.skipDispose)) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n            this._onDidRemove.fire(group);\n        }\n        if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n            this.doSetGroupActive(groups.length > 0 ? groups[0].value : undefined);\n        }\n        return view;\n    }\n    getPanel(id) {\n        var _a;\n        return (_a = this._groups.get(id)) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    doSetGroupActive(group) {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n        }\n        if (group) {\n            group.setActive(true);\n        }\n        this._activeGroup = group;\n        this._onDidActiveChange.fire(group);\n    }\n    removeGroup(group) {\n        this.doRemoveGroup(group);\n    }\n    moveToNext(options) {\n        var _a;\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n        const location = getGridLocation(options.group.element);\n        const next = (_a = this.gridview.next(location)) === null || _a === void 0 ? void 0 : _a.view;\n        this.doSetGroupActive(next);\n    }\n    moveToPrevious(options) {\n        var _a;\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n        const location = getGridLocation(options.group.element);\n        const next = (_a = this.gridview.previous(location)) === null || _a === void 0 ? void 0 : _a.view;\n        this.doSetGroupActive(next);\n    }\n    layout(width, height, forceResize) {\n        const different = forceResize || width !== this.width || height !== this.height;\n        if (!different) {\n            return;\n        }\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n        this.gridview.layout(width, height);\n    }\n    dispose() {\n        this._onDidActiveChange.dispose();\n        this._onDidAdd.dispose();\n        this._onDidRemove.dispose();\n        for (const group of this.groups) {\n            group.dispose();\n        }\n        this.gridview.dispose();\n        super.dispose();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}