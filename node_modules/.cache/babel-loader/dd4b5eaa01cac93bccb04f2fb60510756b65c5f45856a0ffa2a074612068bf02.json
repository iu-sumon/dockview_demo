{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DockviewDisposable } from 'dockview-core';\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge = (props, ref) => {\n  const [_, triggerRender] = React.useState();\n  const _props = React.useRef(props.componentProps);\n  React.useImperativeHandle(ref, () => ({\n    update: componentProps => {\n      _props.current = Object.assign(Object.assign({}, _props.current), componentProps);\n      /**\n       * setting a arbitrary piece of state within this component will\n       * trigger a re-render.\n       * we use this rather than updating through a prop since we can\n       * pass a ref into the vanilla-js world.\n       */\n      triggerRender(Date.now());\n    }\n  }), []);\n  return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n  let value = 1;\n  return {\n    next: () => `dockview_react_portal_key_${(value++).toString()}`\n  };\n})();\nexport const ReactPartContext = React.createContext({});\nexport class ReactPart {\n  constructor(parent, portalStore, component, parameters, context) {\n    this.parent = parent;\n    this.portalStore = portalStore;\n    this.component = component;\n    this.parameters = parameters;\n    this.context = context;\n    this._initialProps = {};\n    this.disposed = false;\n    this.createPortal();\n  }\n  update(props) {\n    if (this.disposed) {\n      throw new Error('invalid operation: resource is already disposed');\n    }\n    if (!this.componentInstance) {\n      // if the component is yet to be mounted store the props\n      this._initialProps = Object.assign(Object.assign({}, this._initialProps), props);\n    } else {\n      this.componentInstance.update(props);\n    }\n  }\n  createPortal() {\n    if (this.disposed) {\n      throw new Error('invalid operation: resource is already disposed');\n    }\n    if (!isReactComponent(this.component)) {\n      /**\n       * we know this isn't a React.FunctionComponent so throw an error here.\n       * if we do not intercept then React library will throw a very obsure error\n       * for the same reason... at least at this point we will emit a sensible stacktrace.\n       */\n      throw new Error('Dockview: Only React.memo(...), React.ForwardRef(...) and functional components are accepted as components');\n    }\n    const bridgeComponent = React.createElement(React.forwardRef(ReactComponentBridge), {\n      component: this.component,\n      componentProps: this.parameters,\n      ref: element => {\n        this.componentInstance = element;\n        if (Object.keys(this._initialProps).length > 0) {\n          this.componentInstance.update(this._initialProps);\n          this._initialProps = {}; // don't keep a reference to the users object once no longer required\n        }\n      }\n    });\n    const node = this.context ? React.createElement(ReactPartContext.Provider, {\n      value: this.context\n    }, bridgeComponent) : bridgeComponent;\n    const portal = ReactDOM.createPortal(node, this.parent, uniquePortalKeyGenerator.next());\n    this.ref = {\n      portal,\n      disposable: this.portalStore.addPortal(portal)\n    };\n  }\n  dispose() {\n    var _a;\n    (_a = this.ref) === null || _a === void 0 ? void 0 : _a.disposable.dispose();\n    this.disposed = true;\n  }\n}\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle = () => {\n  const [portals, setPortals] = React.useState([]);\n  React.useDebugValue(`Portal count: ${portals.length}`);\n  const addPortal = React.useCallback(portal => {\n    setPortals(existingPortals => [...existingPortals, portal]);\n    let disposed = false;\n    return DockviewDisposable.from(() => {\n      if (disposed) {\n        throw new Error('invalid operation: resource already disposed');\n      }\n      disposed = true;\n      setPortals(existingPortals => existingPortals.filter(p => p !== portal));\n    });\n  }, []);\n  return [portals, addPortal];\n};\nexport function isReactComponent(component) {\n  /**\n   * Yes, we could use \"react-is\" but that would introduce an unwanted peer dependency\n   * so for now we will check in a rather crude fashion...\n   */\n  return typeof component === 'function' /** Functional Componnts */ || !!(component === null || component === void 0 ? void 0 : component.$$typeof) /** React.memo(...) Components */;\n}","map":{"version":3,"names":["React","ReactDOM","DockviewDisposable","ReactComponentBridge","props","ref","_","triggerRender","useState","_props","useRef","componentProps","useImperativeHandle","update","current","Object","assign","Date","now","createElement","component","displayName","uniquePortalKeyGenerator","value","next","toString","ReactPartContext","createContext","ReactPart","constructor","parent","portalStore","parameters","context","_initialProps","disposed","createPortal","Error","componentInstance","isReactComponent","bridgeComponent","forwardRef","element","keys","length","node","Provider","portal","disposable","addPortal","dispose","_a","usePortalsLifecycle","portals","setPortals","useDebugValue","useCallback","existingPortals","from","filter","p","$$typeof"],"sources":["E:/dockview.demo/node_modules/dockview/dist/esm/react.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DockviewDisposable, } from 'dockview-core';\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge = (props, ref) => {\n    const [_, triggerRender] = React.useState();\n    const _props = React.useRef(props.componentProps);\n    React.useImperativeHandle(ref, () => ({\n        update: (componentProps) => {\n            _props.current = Object.assign(Object.assign({}, _props.current), componentProps);\n            /**\n             * setting a arbitrary piece of state within this component will\n             * trigger a re-render.\n             * we use this rather than updating through a prop since we can\n             * pass a ref into the vanilla-js world.\n             */\n            triggerRender(Date.now());\n        },\n    }), []);\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\nexport const ReactPartContext = React.createContext({});\nexport class ReactPart {\n    constructor(parent, portalStore, component, parameters, context) {\n        this.parent = parent;\n        this.portalStore = portalStore;\n        this.component = component;\n        this.parameters = parameters;\n        this.context = context;\n        this._initialProps = {};\n        this.disposed = false;\n        this.createPortal();\n    }\n    update(props) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = Object.assign(Object.assign({}, this._initialProps), props);\n        }\n        else {\n            this.componentInstance.update(props);\n        }\n    }\n    createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n        if (!isReactComponent(this.component)) {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept then React library will throw a very obsure error\n             * for the same reason... at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error('Dockview: Only React.memo(...), React.ForwardRef(...) and functional components are accepted as components');\n        }\n        const bridgeComponent = React.createElement(React.forwardRef(ReactComponentBridge), {\n            component: this\n                .component,\n            componentProps: this.parameters,\n            ref: (element) => {\n                this.componentInstance = element;\n                if (Object.keys(this._initialProps).length > 0) {\n                    this.componentInstance.update(this._initialProps);\n                    this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                }\n            },\n        });\n        const node = this.context\n            ? React.createElement(ReactPartContext.Provider, { value: this.context }, bridgeComponent)\n            : bridgeComponent;\n        const portal = ReactDOM.createPortal(node, this.parent, uniquePortalKeyGenerator.next());\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n    dispose() {\n        var _a;\n        (_a = this.ref) === null || _a === void 0 ? void 0 : _a.disposable.dispose();\n        this.disposed = true;\n    }\n}\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle = () => {\n    const [portals, setPortals] = React.useState([]);\n    React.useDebugValue(`Portal count: ${portals.length}`);\n    const addPortal = React.useCallback((portal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return DockviewDisposable.from(() => {\n            if (disposed) {\n                throw new Error('invalid operation: resource already disposed');\n            }\n            disposed = true;\n            setPortals((existingPortals) => existingPortals.filter((p) => p !== portal));\n        });\n    }, []);\n    return [portals, addPortal];\n};\nexport function isReactComponent(component) {\n    /**\n     * Yes, we could use \"react-is\" but that would introduce an unwanted peer dependency\n     * so for now we will check in a rather crude fashion...\n     */\n    return (typeof component === 'function' /** Functional Componnts */ ||\n        !!(component === null || component === void 0 ? void 0 : component.$$typeof) /** React.memo(...) Components */);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}