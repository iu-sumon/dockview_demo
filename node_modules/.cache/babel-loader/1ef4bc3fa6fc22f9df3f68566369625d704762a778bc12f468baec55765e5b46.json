{"ast":null,"code":"import { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { Orientation, Sizing, Splitview } from './splitview';\nimport { Emitter } from '../events';\nimport { Resizable } from '../resizable';\nimport { Classnames } from '../dom';\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent extends Resizable {\n  get panels() {\n    return this.splitview.getViews();\n  }\n  get options() {\n    return this._options;\n  }\n  get length() {\n    return this._panels.size;\n  }\n  get orientation() {\n    return this.splitview.orientation;\n  }\n  get splitview() {\n    return this._splitview;\n  }\n  set splitview(value) {\n    if (this._splitview) {\n      this._splitview.dispose();\n    }\n    this._splitview = value;\n    this._splitviewChangeDisposable.value = new CompositeDisposable(this._splitview.onDidSashEnd(() => {\n      this._onDidLayoutChange.fire(undefined);\n    }), this._splitview.onDidAddView(e => this._onDidAddView.fire(e)), this._splitview.onDidRemoveView(e => this._onDidRemoveView.fire(e)));\n  }\n  get minimumSize() {\n    return this.splitview.minimumSize;\n  }\n  get maximumSize() {\n    return this.splitview.maximumSize;\n  }\n  get height() {\n    return this.splitview.orientation === Orientation.HORIZONTAL ? this.splitview.orthogonalSize : this.splitview.size;\n  }\n  get width() {\n    return this.splitview.orientation === Orientation.HORIZONTAL ? this.splitview.size : this.splitview.orthogonalSize;\n  }\n  constructor(container, options) {\n    var _a;\n    super(document.createElement('div'), options.disableAutoResizing);\n    this._splitviewChangeDisposable = new MutableDisposable();\n    this._panels = new Map();\n    this._onDidLayoutfromJSON = new Emitter();\n    this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;\n    this._onDidAddView = new Emitter();\n    this.onDidAddView = this._onDidAddView.event;\n    this._onDidRemoveView = new Emitter();\n    this.onDidRemoveView = this._onDidRemoveView.event;\n    this._onDidLayoutChange = new Emitter();\n    this.onDidLayoutChange = this._onDidLayoutChange.event;\n    this.element.style.height = '100%';\n    this.element.style.width = '100%';\n    this._classNames = new Classnames(this.element);\n    this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');\n    // the container is owned by the third-party, do not modify/delete it\n    container.appendChild(this.element);\n    this._options = options;\n    this.splitview = new Splitview(this.element, options);\n    this.addDisposables(this._onDidAddView, this._onDidLayoutfromJSON, this._onDidRemoveView, this._onDidLayoutChange);\n  }\n  updateOptions(options) {\n    var _a, _b;\n    if ('className' in options) {\n      this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');\n    }\n    if ('disableResizing' in options) {\n      this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;\n    }\n    if (typeof options.orientation === 'string') {\n      this.splitview.orientation = options.orientation;\n    }\n    this._options = Object.assign(Object.assign({}, this.options), options);\n    this.splitview.layout(this.splitview.size, this.splitview.orthogonalSize);\n  }\n  focus() {\n    var _a;\n    (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.focus();\n  }\n  movePanel(from, to) {\n    this.splitview.moveView(from, to);\n  }\n  setVisible(panel, visible) {\n    const index = this.panels.indexOf(panel);\n    this.splitview.setViewVisible(index, visible);\n  }\n  setActive(panel, skipFocus) {\n    this._activePanel = panel;\n    this.panels.filter(v => v !== panel).forEach(v => {\n      v.api._onDidActiveChange.fire({\n        isActive: false\n      });\n      if (!skipFocus) {\n        v.focus();\n      }\n    });\n    panel.api._onDidActiveChange.fire({\n      isActive: true\n    });\n    if (!skipFocus) {\n      panel.focus();\n    }\n  }\n  removePanel(panel, sizing) {\n    const item = this._panels.get(panel.id);\n    if (!item) {\n      throw new Error(`unknown splitview panel ${panel.id}`);\n    }\n    item.dispose();\n    this._panels.delete(panel.id);\n    const index = this.panels.findIndex(_ => _ === panel);\n    const removedView = this.splitview.removeView(index, sizing);\n    removedView.dispose();\n    const panels = this.panels;\n    if (panels.length > 0) {\n      this.setActive(panels[panels.length - 1]);\n    }\n  }\n  getPanel(id) {\n    return this.panels.find(view => view.id === id);\n  }\n  addPanel(options) {\n    var _a;\n    if (this._panels.has(options.id)) {\n      throw new Error(`panel ${options.id} already exists`);\n    }\n    const view = this.options.createComponent({\n      id: options.id,\n      name: options.component\n    });\n    view.orientation = this.splitview.orientation;\n    view.init({\n      params: (_a = options.params) !== null && _a !== void 0 ? _a : {},\n      minimumSize: options.minimumSize,\n      maximumSize: options.maximumSize,\n      snap: options.snap,\n      priority: options.priority,\n      accessor: this\n    });\n    const size = typeof options.size === 'number' ? options.size : Sizing.Distribute;\n    const index = typeof options.index === 'number' ? options.index : undefined;\n    this.splitview.addView(view, size, index);\n    this.doAddView(view);\n    this.setActive(view);\n    return view;\n  }\n  layout(width, height) {\n    const [size, orthogonalSize] = this.splitview.orientation === Orientation.HORIZONTAL ? [width, height] : [height, width];\n    this.splitview.layout(size, orthogonalSize);\n  }\n  doAddView(view) {\n    const disposable = view.api.onDidFocusChange(event => {\n      if (!event.isFocused) {\n        return;\n      }\n      this.setActive(view, true);\n    });\n    this._panels.set(view.id, disposable);\n  }\n  toJSON() {\n    var _a;\n    const views = this.splitview.getViews().map((view, i) => {\n      const size = this.splitview.getViewSize(i);\n      return {\n        size,\n        data: view.toJSON(),\n        snap: !!view.snap,\n        priority: view.priority\n      };\n    });\n    return {\n      views,\n      activeView: (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.id,\n      size: this.splitview.size,\n      orientation: this.splitview.orientation\n    };\n  }\n  fromJSON(serializedSplitview) {\n    this.clear();\n    const {\n      views,\n      orientation,\n      size,\n      activeView\n    } = serializedSplitview;\n    const queue = [];\n    // take note of the existing dimensions\n    const width = this.width;\n    const height = this.height;\n    this.splitview = new Splitview(this.element, {\n      orientation,\n      proportionalLayout: this.options.proportionalLayout,\n      descriptor: {\n        size,\n        views: views.map(view => {\n          const data = view.data;\n          if (this._panels.has(data.id)) {\n            throw new Error(`panel ${data.id} already exists`);\n          }\n          const panel = this.options.createComponent({\n            id: data.id,\n            name: data.component\n          });\n          queue.push(() => {\n            var _a;\n            panel.init({\n              params: (_a = data.params) !== null && _a !== void 0 ? _a : {},\n              minimumSize: data.minimumSize,\n              maximumSize: data.maximumSize,\n              snap: view.snap,\n              priority: view.priority,\n              accessor: this\n            });\n          });\n          panel.orientation = orientation;\n          this.doAddView(panel);\n          setTimeout(() => {\n            // the original onDidAddView events are missed since they are fired before we can subcribe to them\n            this._onDidAddView.fire(panel);\n          }, 0);\n          return {\n            size: view.size,\n            view: panel\n          };\n        })\n      }\n    });\n    this.layout(width, height);\n    queue.forEach(f => f());\n    if (typeof activeView === 'string') {\n      const panel = this.getPanel(activeView);\n      if (panel) {\n        this.setActive(panel);\n      }\n    }\n    this._onDidLayoutfromJSON.fire();\n  }\n  clear() {\n    for (const disposable of this._panels.values()) {\n      disposable.dispose();\n    }\n    this._panels.clear();\n    while (this.splitview.length > 0) {\n      const view = this.splitview.removeView(0, Sizing.Distribute, true);\n      view.dispose();\n    }\n  }\n  dispose() {\n    for (const disposable of this._panels.values()) {\n      disposable.dispose();\n    }\n    this._panels.clear();\n    const views = this.splitview.getViews();\n    this._splitviewChangeDisposable.dispose();\n    this.splitview.dispose();\n    for (const view of views) {\n      view.dispose();\n    }\n    this.element.remove();\n    super.dispose();\n  }\n}","map":{"version":3,"names":["CompositeDisposable","MutableDisposable","Orientation","Sizing","Splitview","Emitter","Resizable","Classnames","SplitviewComponent","panels","splitview","getViews","options","_options","length","_panels","size","orientation","_splitview","value","dispose","_splitviewChangeDisposable","onDidSashEnd","_onDidLayoutChange","fire","undefined","onDidAddView","e","_onDidAddView","onDidRemoveView","_onDidRemoveView","minimumSize","maximumSize","height","HORIZONTAL","orthogonalSize","width","constructor","container","_a","document","createElement","disableAutoResizing","Map","_onDidLayoutfromJSON","onDidLayoutFromJSON","event","onDidLayoutChange","element","style","_classNames","setClassNames","className","appendChild","addDisposables","updateOptions","_b","disableResizing","Object","assign","layout","focus","_activePanel","movePanel","from","to","moveView","setVisible","panel","visible","index","indexOf","setViewVisible","setActive","skipFocus","filter","v","forEach","api","_onDidActiveChange","isActive","removePanel","sizing","item","get","id","Error","delete","findIndex","_","removedView","removeView","getPanel","find","view","addPanel","has","createComponent","name","component","init","params","snap","priority","accessor","Distribute","addView","doAddView","disposable","onDidFocusChange","isFocused","set","toJSON","views","map","i","getViewSize","data","activeView","fromJSON","serializedSplitview","clear","queue","proportionalLayout","descriptor","push","setTimeout","f","values","remove"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js"],"sourcesContent":["import { CompositeDisposable, MutableDisposable, } from '../lifecycle';\nimport { Orientation, Sizing, Splitview, } from './splitview';\nimport { Emitter } from '../events';\nimport { Resizable } from '../resizable';\nimport { Classnames } from '../dom';\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent extends Resizable {\n    get panels() {\n        return this.splitview.getViews();\n    }\n    get options() {\n        return this._options;\n    }\n    get length() {\n        return this._panels.size;\n    }\n    get orientation() {\n        return this.splitview.orientation;\n    }\n    get splitview() {\n        return this._splitview;\n    }\n    set splitview(value) {\n        if (this._splitview) {\n            this._splitview.dispose();\n        }\n        this._splitview = value;\n        this._splitviewChangeDisposable.value = new CompositeDisposable(this._splitview.onDidSashEnd(() => {\n            this._onDidLayoutChange.fire(undefined);\n        }), this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)), this._splitview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));\n    }\n    get minimumSize() {\n        return this.splitview.minimumSize;\n    }\n    get maximumSize() {\n        return this.splitview.maximumSize;\n    }\n    get height() {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n    get width() {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n    constructor(container, options) {\n        var _a;\n        super(document.createElement('div'), options.disableAutoResizing);\n        this._splitviewChangeDisposable = new MutableDisposable();\n        this._panels = new Map();\n        this._onDidLayoutfromJSON = new Emitter();\n        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;\n        this._onDidAddView = new Emitter();\n        this.onDidAddView = this._onDidAddView.event;\n        this._onDidRemoveView = new Emitter();\n        this.onDidRemoveView = this._onDidRemoveView.event;\n        this._onDidLayoutChange = new Emitter();\n        this.onDidLayoutChange = this._onDidLayoutChange.event;\n        this.element.style.height = '100%';\n        this.element.style.width = '100%';\n        this._classNames = new Classnames(this.element);\n        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');\n        // the container is owned by the third-party, do not modify/delete it\n        container.appendChild(this.element);\n        this._options = options;\n        this.splitview = new Splitview(this.element, options);\n        this.addDisposables(this._onDidAddView, this._onDidLayoutfromJSON, this._onDidRemoveView, this._onDidLayoutChange);\n    }\n    updateOptions(options) {\n        var _a, _b;\n        if ('className' in options) {\n            this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');\n        }\n        if ('disableResizing' in options) {\n            this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;\n        }\n        if (typeof options.orientation === 'string') {\n            this.splitview.orientation = options.orientation;\n        }\n        this._options = Object.assign(Object.assign({}, this.options), options);\n        this.splitview.layout(this.splitview.size, this.splitview.orthogonalSize);\n    }\n    focus() {\n        var _a;\n        (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    movePanel(from, to) {\n        this.splitview.moveView(from, to);\n    }\n    setVisible(panel, visible) {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n    setActive(panel, skipFocus) {\n        this._activePanel = panel;\n        this.panels\n            .filter((v) => v !== panel)\n            .forEach((v) => {\n            v.api._onDidActiveChange.fire({ isActive: false });\n            if (!skipFocus) {\n                v.focus();\n            }\n        });\n        panel.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            panel.focus();\n        }\n    }\n    removePanel(panel, sizing) {\n        const item = this._panels.get(panel.id);\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n        item.dispose();\n        this._panels.delete(panel.id);\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n    getPanel(id) {\n        return this.panels.find((view) => view.id === id);\n    }\n    addPanel(options) {\n        var _a;\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n        const view = this.options.createComponent({\n            id: options.id,\n            name: options.component,\n        });\n        view.orientation = this.splitview.orientation;\n        view.init({\n            params: (_a = options.params) !== null && _a !== void 0 ? _a : {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n        const size = typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index = typeof options.index === 'number' ? options.index : undefined;\n        this.splitview.addView(view, size, index);\n        this.doAddView(view);\n        this.setActive(view);\n        return view;\n    }\n    layout(width, height) {\n        const [size, orthogonalSize] = this.splitview.orientation === Orientation.HORIZONTAL\n            ? [width, height]\n            : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n    doAddView(view) {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n        this._panels.set(view.id, disposable);\n    }\n    toJSON() {\n        var _a;\n        const views = this.splitview\n            .getViews()\n            .map((view, i) => {\n            const size = this.splitview.getViewSize(i);\n            return {\n                size,\n                data: view.toJSON(),\n                snap: !!view.snap,\n                priority: view.priority,\n            };\n        });\n        return {\n            views,\n            activeView: (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n    fromJSON(serializedSplitview) {\n        this.clear();\n        const { views, orientation, size, activeView } = serializedSplitview;\n        const queue = [];\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n                    const panel = this.options.createComponent({\n                        id: data.id,\n                        name: data.component,\n                    });\n                    queue.push(() => {\n                        var _a;\n                        panel.init({\n                            params: (_a = data.params) !== null && _a !== void 0 ? _a : {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n                    panel.orientation = orientation;\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n        this.layout(width, height);\n        queue.forEach((f) => f());\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n        this._onDidLayoutfromJSON.fire();\n    }\n    clear() {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n        this._panels.clear();\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n    dispose() {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n        this._panels.clear();\n        const views = this.splitview.getViews();\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n        for (const view of views) {\n            view.dispose();\n        }\n        this.element.remove();\n        super.dispose();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}