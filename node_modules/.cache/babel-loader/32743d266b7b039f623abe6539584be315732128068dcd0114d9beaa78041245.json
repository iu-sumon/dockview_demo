{"ast":null,"code":"import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport { getPaneData, LocalSelectionTransfer, PaneTransfer } from '../dnd/dataTransfer';\nimport { Droptarget } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { PaneviewUnhandledDragOverEvent } from './options';\nimport { PaneviewPanel } from './paneviewPanel';\nexport class DraggablePaneviewPanel extends PaneviewPanel {\n  constructor(options) {\n    super({\n      id: options.id,\n      component: options.component,\n      headerComponent: options.headerComponent,\n      orientation: options.orientation,\n      isExpanded: options.isExpanded,\n      isHeaderVisible: true,\n      headerSize: options.headerSize,\n      minimumBodySize: options.minimumBodySize,\n      maximumBodySize: options.maximumBodySize\n    });\n    this._onDidDrop = new Emitter();\n    this.onDidDrop = this._onDidDrop.event;\n    this._onUnhandledDragOverEvent = new Emitter();\n    this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;\n    this.accessor = options.accessor;\n    this.addDisposables(this._onDidDrop, this._onUnhandledDragOverEvent);\n    if (!options.disableDnd) {\n      this.initDragFeatures();\n    }\n  }\n  initDragFeatures() {\n    if (!this.header) {\n      return;\n    }\n    const id = this.id;\n    const accessorId = this.accessor.id;\n    this.header.draggable = true;\n    this.handler = new class PaneDragHandler extends DragHandler {\n      getData() {\n        LocalSelectionTransfer.getInstance().setData([new PaneTransfer(accessorId, id)], PaneTransfer.prototype);\n        return {\n          dispose: () => {\n            LocalSelectionTransfer.getInstance().clearData(PaneTransfer.prototype);\n          }\n        };\n      }\n    }(this.header);\n    this.target = new Droptarget(this.element, {\n      acceptedTargetZones: ['top', 'bottom'],\n      overlayModel: {\n        activationSize: {\n          type: 'percentage',\n          value: 50\n        }\n      },\n      canDisplayOverlay: (event, position) => {\n        const data = getPaneData();\n        if (data) {\n          if (data.paneId !== this.id && data.viewId === this.accessor.id) {\n            return true;\n          }\n        }\n        const firedEvent = new PaneviewUnhandledDragOverEvent(event, position, getPaneData, this);\n        this._onUnhandledDragOverEvent.fire(firedEvent);\n        return firedEvent.isAccepted;\n      }\n    });\n    this.addDisposables(this._onDidDrop, this.handler, this.target, this.target.onDrop(event => {\n      this.onDrop(event);\n    }));\n  }\n  onDrop(event) {\n    const data = getPaneData();\n    if (!data || data.viewId !== this.accessor.id) {\n      // if there is no local drag event for this panel\n      // or if the drag event was creating by another Paneview instance\n      this._onDidDrop.fire(Object.assign(Object.assign({}, event), {\n        panel: this,\n        api: new PaneviewApi(this.accessor),\n        getData: getPaneData\n      }));\n      return;\n    }\n    const containerApi = this._params.containerApi;\n    const panelId = data.paneId;\n    const existingPanel = containerApi.getPanel(panelId);\n    if (!existingPanel) {\n      // if the panel doesn't exist\n      this._onDidDrop.fire(Object.assign(Object.assign({}, event), {\n        panel: this,\n        getData: getPaneData,\n        api: new PaneviewApi(this.accessor)\n      }));\n      return;\n    }\n    const allPanels = containerApi.panels;\n    const fromIndex = allPanels.indexOf(existingPanel);\n    let toIndex = containerApi.panels.indexOf(this);\n    if (event.position === 'left' || event.position === 'top') {\n      toIndex = Math.max(0, toIndex - 1);\n    }\n    if (event.position === 'right' || event.position === 'bottom') {\n      if (fromIndex > toIndex) {\n        toIndex++;\n      }\n      toIndex = Math.min(allPanels.length - 1, toIndex);\n    }\n    containerApi.movePanel(fromIndex, toIndex);\n  }\n}","map":{"version":3,"names":["PaneviewApi","DragHandler","getPaneData","LocalSelectionTransfer","PaneTransfer","Droptarget","Emitter","PaneviewUnhandledDragOverEvent","PaneviewPanel","DraggablePaneviewPanel","constructor","options","id","component","headerComponent","orientation","isExpanded","isHeaderVisible","headerSize","minimumBodySize","maximumBodySize","_onDidDrop","onDidDrop","event","_onUnhandledDragOverEvent","onUnhandledDragOverEvent","accessor","addDisposables","disableDnd","initDragFeatures","header","accessorId","draggable","handler","PaneDragHandler","getData","getInstance","setData","prototype","dispose","clearData","target","element","acceptedTargetZones","overlayModel","activationSize","type","value","canDisplayOverlay","position","data","paneId","viewId","firedEvent","fire","isAccepted","onDrop","Object","assign","panel","api","containerApi","_params","panelId","existingPanel","getPanel","allPanels","panels","fromIndex","indexOf","toIndex","Math","max","min","length","movePanel"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js"],"sourcesContent":["import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport { getPaneData, LocalSelectionTransfer, PaneTransfer, } from '../dnd/dataTransfer';\nimport { Droptarget } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { PaneviewUnhandledDragOverEvent, } from './options';\nimport { PaneviewPanel, } from './paneviewPanel';\nexport class DraggablePaneviewPanel extends PaneviewPanel {\n    constructor(options) {\n        super({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            orientation: options.orientation,\n            isExpanded: options.isExpanded,\n            isHeaderVisible: true,\n            headerSize: options.headerSize,\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n        });\n        this._onDidDrop = new Emitter();\n        this.onDidDrop = this._onDidDrop.event;\n        this._onUnhandledDragOverEvent = new Emitter();\n        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;\n        this.accessor = options.accessor;\n        this.addDisposables(this._onDidDrop, this._onUnhandledDragOverEvent);\n        if (!options.disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n    initDragFeatures() {\n        if (!this.header) {\n            return;\n        }\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData() {\n                LocalSelectionTransfer.getInstance().setData([new PaneTransfer(accessorId, id)], PaneTransfer.prototype);\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(PaneTransfer.prototype);\n                    },\n                };\n            }\n        })(this.header);\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event, position) => {\n                const data = getPaneData();\n                if (data) {\n                    if (data.paneId !== this.id &&\n                        data.viewId === this.accessor.id) {\n                        return true;\n                    }\n                }\n                const firedEvent = new PaneviewUnhandledDragOverEvent(event, position, getPaneData, this);\n                this._onUnhandledDragOverEvent.fire(firedEvent);\n                return firedEvent.isAccepted;\n            },\n        });\n        this.addDisposables(this._onDidDrop, this.handler, this.target, this.target.onDrop((event) => {\n            this.onDrop(event);\n        }));\n    }\n    onDrop(event) {\n        const data = getPaneData();\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire(Object.assign(Object.assign({}, event), { panel: this, api: new PaneviewApi(this.accessor), getData: getPaneData }));\n            return;\n        }\n        const containerApi = this._params\n            .containerApi;\n        const panelId = data.paneId;\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire(Object.assign(Object.assign({}, event), { panel: this, getData: getPaneData, api: new PaneviewApi(this.accessor) }));\n            return;\n        }\n        const allPanels = containerApi.panels;\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}