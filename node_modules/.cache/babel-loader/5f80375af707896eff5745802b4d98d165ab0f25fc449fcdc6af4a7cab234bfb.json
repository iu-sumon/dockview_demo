{"ast":null,"code":"import { BasePanelView } from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { Orientation } from './splitview';\nimport { Emitter } from '../events';\nexport class SplitviewPanel extends BasePanelView {\n  get priority() {\n    return this._priority;\n  }\n  set orientation(value) {\n    this._orientation = value;\n  }\n  get orientation() {\n    return this._orientation;\n  }\n  get minimumSize() {\n    const size = typeof this._minimumSize === 'function' ? this._minimumSize() : this._minimumSize;\n    if (size !== this._evaluatedMinimumSize) {\n      this._evaluatedMinimumSize = size;\n      this.updateConstraints();\n    }\n    return size;\n  }\n  get maximumSize() {\n    const size = typeof this._maximumSize === 'function' ? this._maximumSize() : this._maximumSize;\n    if (size !== this._evaluatedMaximumSize) {\n      this._evaluatedMaximumSize = size;\n      this.updateConstraints();\n    }\n    return size;\n  }\n  get snap() {\n    return this._snap;\n  }\n  constructor(id, componentName) {\n    super(id, componentName, new SplitviewPanelApiImpl(id, componentName));\n    this._evaluatedMinimumSize = 0;\n    this._evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n    this._minimumSize = 0;\n    this._maximumSize = Number.POSITIVE_INFINITY;\n    this._snap = false;\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n    this.api.initialize(this);\n    this.addDisposables(this._onDidChange, this.api.onWillVisibilityChange(event => {\n      const {\n        isVisible\n      } = event;\n      const {\n        accessor\n      } = this._params;\n      accessor.setVisible(this, isVisible);\n    }), this.api.onActiveChange(() => {\n      const {\n        accessor\n      } = this._params;\n      accessor.setActive(this);\n    }), this.api.onDidConstraintsChangeInternal(event => {\n      if (typeof event.minimumSize === 'number' || typeof event.minimumSize === 'function') {\n        this._minimumSize = event.minimumSize;\n      }\n      if (typeof event.maximumSize === 'number' || typeof event.maximumSize === 'function') {\n        this._maximumSize = event.maximumSize;\n      }\n      this.updateConstraints();\n    }), this.api.onDidSizeChange(event => {\n      this._onDidChange.fire({\n        size: event.size\n      });\n    }));\n  }\n  setVisible(isVisible) {\n    this.api._onDidVisibilityChange.fire({\n      isVisible\n    });\n  }\n  setActive(isActive) {\n    this.api._onDidActiveChange.fire({\n      isActive\n    });\n  }\n  layout(size, orthogonalSize) {\n    const [width, height] = this.orientation === Orientation.HORIZONTAL ? [size, orthogonalSize] : [orthogonalSize, size];\n    super.layout(width, height);\n  }\n  init(parameters) {\n    super.init(parameters);\n    this._priority = parameters.priority;\n    if (parameters.minimumSize) {\n      this._minimumSize = parameters.minimumSize;\n    }\n    if (parameters.maximumSize) {\n      this._maximumSize = parameters.maximumSize;\n    }\n    if (parameters.snap) {\n      this._snap = parameters.snap;\n    }\n  }\n  toJSON() {\n    const maximum = value => value === Number.MAX_SAFE_INTEGER || value === Number.POSITIVE_INFINITY ? undefined : value;\n    const minimum = value => value <= 0 ? undefined : value;\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      minimumSize: minimum(this.minimumSize),\n      maximumSize: maximum(this.maximumSize)\n    });\n  }\n  updateConstraints() {\n    this.api._onDidConstraintsChange.fire({\n      maximumSize: this._evaluatedMaximumSize,\n      minimumSize: this._evaluatedMinimumSize\n    });\n  }\n}","map":{"version":3,"names":["BasePanelView","SplitviewPanelApiImpl","Orientation","Emitter","SplitviewPanel","priority","_priority","orientation","value","_orientation","minimumSize","size","_minimumSize","_evaluatedMinimumSize","updateConstraints","maximumSize","_maximumSize","_evaluatedMaximumSize","snap","_snap","constructor","id","componentName","Number","POSITIVE_INFINITY","_onDidChange","onDidChange","event","api","initialize","addDisposables","onWillVisibilityChange","isVisible","accessor","_params","setVisible","onActiveChange","setActive","onDidConstraintsChangeInternal","onDidSizeChange","fire","_onDidVisibilityChange","isActive","_onDidActiveChange","layout","orthogonalSize","width","height","HORIZONTAL","init","parameters","toJSON","maximum","MAX_SAFE_INTEGER","undefined","minimum","Object","assign","_onDidConstraintsChange"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/splitview/splitviewPanel.js"],"sourcesContent":["import { BasePanelView, } from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { Orientation } from './splitview';\nimport { Emitter } from '../events';\nexport class SplitviewPanel extends BasePanelView {\n    get priority() {\n        return this._priority;\n    }\n    set orientation(value) {\n        this._orientation = value;\n    }\n    get orientation() {\n        return this._orientation;\n    }\n    get minimumSize() {\n        const size = typeof this._minimumSize === 'function'\n            ? this._minimumSize()\n            : this._minimumSize;\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n        return size;\n    }\n    get maximumSize() {\n        const size = typeof this._maximumSize === 'function'\n            ? this._maximumSize()\n            : this._maximumSize;\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n        return size;\n    }\n    get snap() {\n        return this._snap;\n    }\n    constructor(id, componentName) {\n        super(id, componentName, new SplitviewPanelApiImpl(id, componentName));\n        this._evaluatedMinimumSize = 0;\n        this._evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n        this._minimumSize = 0;\n        this._maximumSize = Number.POSITIVE_INFINITY;\n        this._snap = false;\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this.api.initialize(this);\n        this.addDisposables(this._onDidChange, this.api.onWillVisibilityChange((event) => {\n            const { isVisible } = event;\n            const { accessor } = this._params;\n            accessor.setVisible(this, isVisible);\n        }), this.api.onActiveChange(() => {\n            const { accessor } = this._params;\n            accessor.setActive(this);\n        }), this.api.onDidConstraintsChangeInternal((event) => {\n            if (typeof event.minimumSize === 'number' ||\n                typeof event.minimumSize === 'function') {\n                this._minimumSize = event.minimumSize;\n            }\n            if (typeof event.maximumSize === 'number' ||\n                typeof event.maximumSize === 'function') {\n                this._maximumSize = event.maximumSize;\n            }\n            this.updateConstraints();\n        }), this.api.onDidSizeChange((event) => {\n            this._onDidChange.fire({ size: event.size });\n        }));\n    }\n    setVisible(isVisible) {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n    setActive(isActive) {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n    layout(size, orthogonalSize) {\n        const [width, height] = this.orientation === Orientation.HORIZONTAL\n            ? [size, orthogonalSize]\n            : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n    init(parameters) {\n        super.init(parameters);\n        this._priority = parameters.priority;\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n    toJSON() {\n        const maximum = (value) => value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n            ? undefined\n            : value;\n        const minimum = (value) => (value <= 0 ? undefined : value);\n        return Object.assign(Object.assign({}, super.toJSON()), { minimumSize: minimum(this.minimumSize), maximumSize: maximum(this.maximumSize) });\n    }\n    updateConstraints() {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}