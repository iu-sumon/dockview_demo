{"ast":null,"code":"import { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\nexport class GroupDragHandler extends DragHandler {\n  constructor(element, accessor, group) {\n    super(element);\n    this.accessor = accessor;\n    this.group = group;\n    this.panelTransfer = LocalSelectionTransfer.getInstance();\n    this.addDisposables(addDisposableListener(element, 'pointerdown', e => {\n      if (e.shiftKey) {\n        /**\n         * You cannot call e.preventDefault() because that will prevent drag events from firing\n         * but we also need to stop any group overlay drag events from occuring\n         * Use a custom event marker that can be checked by the overlay drag events\n         */\n        quasiPreventDefault(e);\n      }\n    }, true));\n  }\n  isCancelled(_event) {\n    if (this.group.api.location.type === 'floating' && !_event.shiftKey) {\n      return true;\n    }\n    return false;\n  }\n  getData(dragEvent) {\n    const dataTransfer = dragEvent.dataTransfer;\n    this.panelTransfer.setData([new PanelTransfer(this.accessor.id, this.group.id, null)], PanelTransfer.prototype);\n    const style = window.getComputedStyle(this.el);\n    const bgColor = style.getPropertyValue('--dv-activegroup-visiblepanel-tab-background-color');\n    const color = style.getPropertyValue('--dv-activegroup-visiblepanel-tab-color');\n    if (dataTransfer) {\n      const ghostElement = document.createElement('div');\n      ghostElement.style.backgroundColor = bgColor;\n      ghostElement.style.color = color;\n      ghostElement.style.padding = '2px 8px';\n      ghostElement.style.height = '24px';\n      ghostElement.style.fontSize = '11px';\n      ghostElement.style.lineHeight = '20px';\n      ghostElement.style.borderRadius = '12px';\n      ghostElement.style.position = 'absolute';\n      ghostElement.style.pointerEvents = 'none';\n      ghostElement.style.top = '-9999px';\n      ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n      addGhostImage(dataTransfer, ghostElement, {\n        y: -10,\n        x: 30\n      });\n    }\n    return {\n      dispose: () => {\n        this.panelTransfer.clearData(PanelTransfer.prototype);\n      }\n    };\n  }\n}","map":{"version":3,"names":["quasiPreventDefault","addDisposableListener","DragHandler","LocalSelectionTransfer","PanelTransfer","addGhostImage","GroupDragHandler","constructor","element","accessor","group","panelTransfer","getInstance","addDisposables","e","shiftKey","isCancelled","_event","api","location","type","getData","dragEvent","dataTransfer","setData","id","prototype","style","window","getComputedStyle","el","bgColor","getPropertyValue","color","ghostElement","document","createElement","backgroundColor","padding","height","fontSize","lineHeight","borderRadius","position","pointerEvents","top","textContent","size","y","x","dispose","clearData"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/dnd/groupDragHandler.js"],"sourcesContent":["import { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\nexport class GroupDragHandler extends DragHandler {\n    constructor(element, accessor, group) {\n        super(element);\n        this.accessor = accessor;\n        this.group = group;\n        this.panelTransfer = LocalSelectionTransfer.getInstance();\n        this.addDisposables(addDisposableListener(element, 'pointerdown', (e) => {\n            if (e.shiftKey) {\n                /**\n                 * You cannot call e.preventDefault() because that will prevent drag events from firing\n                 * but we also need to stop any group overlay drag events from occuring\n                 * Use a custom event marker that can be checked by the overlay drag events\n                 */\n                quasiPreventDefault(e);\n            }\n        }, true));\n    }\n    isCancelled(_event) {\n        if (this.group.api.location.type === 'floating' && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n    getData(dragEvent) {\n        const dataTransfer = dragEvent.dataTransfer;\n        this.panelTransfer.setData([new PanelTransfer(this.accessor.id, this.group.id, null)], PanelTransfer.prototype);\n        const style = window.getComputedStyle(this.el);\n        const bgColor = style.getPropertyValue('--dv-activegroup-visiblepanel-tab-background-color');\n        const color = style.getPropertyValue('--dv-activegroup-visiblepanel-tab-color');\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.style.pointerEvents = 'none';\n            ghostElement.style.top = '-9999px';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n            addGhostImage(dataTransfer, ghostElement, { y: -10, x: 30 });\n        }\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,QAAQ;AAC5C,SAASC,qBAAqB,QAAQ,WAAW;AACjD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,sBAAsB,EAAEC,aAAa,QAAQ,gBAAgB;AACtE,SAASC,aAAa,QAAQ,SAAS;AACvC,OAAO,MAAMC,gBAAgB,SAASJ,WAAW,CAAC;EAC9CK,WAAWA,CAACC,OAAO,EAAEC,QAAQ,EAAEC,KAAK,EAAE;IAClC,KAAK,CAACF,OAAO,CAAC;IACd,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,aAAa,GAAGR,sBAAsB,CAACS,WAAW,CAAC,CAAC;IACzD,IAAI,CAACC,cAAc,CAACZ,qBAAqB,CAACO,OAAO,EAAE,aAAa,EAAGM,CAAC,IAAK;MACrE,IAAIA,CAAC,CAACC,QAAQ,EAAE;QACZ;AAChB;AACA;AACA;AACA;QACgBf,mBAAmB,CAACc,CAAC,CAAC;MAC1B;IACJ,CAAC,EAAE,IAAI,CAAC,CAAC;EACb;EACAE,WAAWA,CAACC,MAAM,EAAE;IAChB,IAAI,IAAI,CAACP,KAAK,CAACQ,GAAG,CAACC,QAAQ,CAACC,IAAI,KAAK,UAAU,IAAI,CAACH,MAAM,CAACF,QAAQ,EAAE;MACjE,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EACAM,OAAOA,CAACC,SAAS,EAAE;IACf,MAAMC,YAAY,GAAGD,SAAS,CAACC,YAAY;IAC3C,IAAI,CAACZ,aAAa,CAACa,OAAO,CAAC,CAAC,IAAIpB,aAAa,CAAC,IAAI,CAACK,QAAQ,CAACgB,EAAE,EAAE,IAAI,CAACf,KAAK,CAACe,EAAE,EAAE,IAAI,CAAC,CAAC,EAAErB,aAAa,CAACsB,SAAS,CAAC;IAC/G,MAAMC,KAAK,GAAGC,MAAM,CAACC,gBAAgB,CAAC,IAAI,CAACC,EAAE,CAAC;IAC9C,MAAMC,OAAO,GAAGJ,KAAK,CAACK,gBAAgB,CAAC,oDAAoD,CAAC;IAC5F,MAAMC,KAAK,GAAGN,KAAK,CAACK,gBAAgB,CAAC,yCAAyC,CAAC;IAC/E,IAAIT,YAAY,EAAE;MACd,MAAMW,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAClDF,YAAY,CAACP,KAAK,CAACU,eAAe,GAAGN,OAAO;MAC5CG,YAAY,CAACP,KAAK,CAACM,KAAK,GAAGA,KAAK;MAChCC,YAAY,CAACP,KAAK,CAACW,OAAO,GAAG,SAAS;MACtCJ,YAAY,CAACP,KAAK,CAACY,MAAM,GAAG,MAAM;MAClCL,YAAY,CAACP,KAAK,CAACa,QAAQ,GAAG,MAAM;MACpCN,YAAY,CAACP,KAAK,CAACc,UAAU,GAAG,MAAM;MACtCP,YAAY,CAACP,KAAK,CAACe,YAAY,GAAG,MAAM;MACxCR,YAAY,CAACP,KAAK,CAACgB,QAAQ,GAAG,UAAU;MACxCT,YAAY,CAACP,KAAK,CAACiB,aAAa,GAAG,MAAM;MACzCV,YAAY,CAACP,KAAK,CAACkB,GAAG,GAAG,SAAS;MAClCX,YAAY,CAACY,WAAW,GAAG,oBAAoB,IAAI,CAACpC,KAAK,CAACqC,IAAI,GAAG;MACjE1C,aAAa,CAACkB,YAAY,EAAEW,YAAY,EAAE;QAAEc,CAAC,EAAE,CAAC,EAAE;QAAEC,CAAC,EAAE;MAAG,CAAC,CAAC;IAChE;IACA,OAAO;MACHC,OAAO,EAAEA,CAAA,KAAM;QACX,IAAI,CAACvC,aAAa,CAACwC,SAAS,CAAC/C,aAAa,CAACsB,SAAS,CAAC;MACzD;IACJ,CAAC;EACL;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}