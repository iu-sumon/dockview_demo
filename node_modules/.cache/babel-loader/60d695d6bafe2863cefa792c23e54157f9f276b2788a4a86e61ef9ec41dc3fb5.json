{"ast":null,"code":"import { disableIframePointEvents } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nexport class DragHandler extends CompositeDisposable {\n  constructor(el) {\n    super();\n    this.el = el;\n    this.dataDisposable = new MutableDisposable();\n    this.pointerEventsDisposable = new MutableDisposable();\n    this._onDragStart = new Emitter();\n    this.onDragStart = this._onDragStart.event;\n    this.addDisposables(this._onDragStart, this.dataDisposable, this.pointerEventsDisposable);\n    this.configure();\n  }\n  isCancelled(_event) {\n    return false;\n  }\n  configure() {\n    this.addDisposables(this._onDragStart, addDisposableListener(this.el, 'dragstart', event => {\n      if (event.defaultPrevented || this.isCancelled(event)) {\n        event.preventDefault();\n        return;\n      }\n      const iframes = disableIframePointEvents();\n      this.pointerEventsDisposable.value = {\n        dispose: () => {\n          iframes.release();\n        }\n      };\n      this.el.classList.add('dv-dragged');\n      setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n      this.dataDisposable.value = this.getData(event);\n      this._onDragStart.fire(event);\n      if (event.dataTransfer) {\n        event.dataTransfer.effectAllowed = 'move';\n        const hasData = event.dataTransfer.items.length > 0;\n        if (!hasData) {\n          /**\n           * Although this is not used by dockview many third party dnd libraries will check\n           * dataTransfer.types to determine valid drag events.\n           *\n           * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n           * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n           * dnd logic. You can see the code at\n          P    * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n           */\n          event.dataTransfer.setData('text/plain', '');\n        }\n      }\n    }), addDisposableListener(this.el, 'dragend', () => {\n      this.pointerEventsDisposable.dispose();\n      setTimeout(() => {\n        this.dataDisposable.dispose(); // allow the data to be read by other handlers before disposing\n      }, 0);\n    }));\n  }\n}","map":{"version":3,"names":["disableIframePointEvents","addDisposableListener","Emitter","CompositeDisposable","MutableDisposable","DragHandler","constructor","el","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","event","addDisposables","configure","isCancelled","_event","defaultPrevented","preventDefault","iframes","value","dispose","release","classList","add","setTimeout","remove","getData","fire","dataTransfer","effectAllowed","hasData","items","length","setData"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js"],"sourcesContent":["import { disableIframePointEvents } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport { CompositeDisposable, MutableDisposable, } from '../lifecycle';\nexport class DragHandler extends CompositeDisposable {\n    constructor(el) {\n        super();\n        this.el = el;\n        this.dataDisposable = new MutableDisposable();\n        this.pointerEventsDisposable = new MutableDisposable();\n        this._onDragStart = new Emitter();\n        this.onDragStart = this._onDragStart.event;\n        this.addDisposables(this._onDragStart, this.dataDisposable, this.pointerEventsDisposable);\n        this.configure();\n    }\n    isCancelled(_event) {\n        return false;\n    }\n    configure() {\n        this.addDisposables(this._onDragStart, addDisposableListener(this.el, 'dragstart', (event) => {\n            if (event.defaultPrevented || this.isCancelled(event)) {\n                event.preventDefault();\n                return;\n            }\n            const iframes = disableIframePointEvents();\n            this.pointerEventsDisposable.value = {\n                dispose: () => {\n                    iframes.release();\n                },\n            };\n            this.el.classList.add('dv-dragged');\n            setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n            this.dataDisposable.value = this.getData(event);\n            this._onDragStart.fire(event);\n            if (event.dataTransfer) {\n                event.dataTransfer.effectAllowed = 'move';\n                const hasData = event.dataTransfer.items.length > 0;\n                if (!hasData) {\n                    /**\n                     * Although this is not used by dockview many third party dnd libraries will check\n                     * dataTransfer.types to determine valid drag events.\n                     *\n                     * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                     * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                     * dnd logic. You can see the code at\n                 P    * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                     */\n                    event.dataTransfer.setData('text/plain', '');\n                }\n            }\n        }), addDisposableListener(this.el, 'dragend', () => {\n            this.pointerEventsDisposable.dispose();\n            setTimeout(() => {\n                this.dataDisposable.dispose(); // allow the data to be read by other handlers before disposing\n            }, 0);\n        }));\n    }\n}\n"],"mappings":"AAAA,SAASA,wBAAwB,QAAQ,QAAQ;AACjD,SAASC,qBAAqB,EAAEC,OAAO,QAAQ,WAAW;AAC1D,SAASC,mBAAmB,EAAEC,iBAAiB,QAAS,cAAc;AACtE,OAAO,MAAMC,WAAW,SAASF,mBAAmB,CAAC;EACjDG,WAAWA,CAACC,EAAE,EAAE;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,cAAc,GAAG,IAAIJ,iBAAiB,CAAC,CAAC;IAC7C,IAAI,CAACK,uBAAuB,GAAG,IAAIL,iBAAiB,CAAC,CAAC;IACtD,IAAI,CAACM,YAAY,GAAG,IAAIR,OAAO,CAAC,CAAC;IACjC,IAAI,CAACS,WAAW,GAAG,IAAI,CAACD,YAAY,CAACE,KAAK;IAC1C,IAAI,CAACC,cAAc,CAAC,IAAI,CAACH,YAAY,EAAE,IAAI,CAACF,cAAc,EAAE,IAAI,CAACC,uBAAuB,CAAC;IACzF,IAAI,CAACK,SAAS,CAAC,CAAC;EACpB;EACAC,WAAWA,CAACC,MAAM,EAAE;IAChB,OAAO,KAAK;EAChB;EACAF,SAASA,CAAA,EAAG;IACR,IAAI,CAACD,cAAc,CAAC,IAAI,CAACH,YAAY,EAAET,qBAAqB,CAAC,IAAI,CAACM,EAAE,EAAE,WAAW,EAAGK,KAAK,IAAK;MAC1F,IAAIA,KAAK,CAACK,gBAAgB,IAAI,IAAI,CAACF,WAAW,CAACH,KAAK,CAAC,EAAE;QACnDA,KAAK,CAACM,cAAc,CAAC,CAAC;QACtB;MACJ;MACA,MAAMC,OAAO,GAAGnB,wBAAwB,CAAC,CAAC;MAC1C,IAAI,CAACS,uBAAuB,CAACW,KAAK,GAAG;QACjCC,OAAO,EAAEA,CAAA,KAAM;UACXF,OAAO,CAACG,OAAO,CAAC,CAAC;QACrB;MACJ,CAAC;MACD,IAAI,CAACf,EAAE,CAACgB,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC;MACnCC,UAAU,CAAC,MAAM,IAAI,CAAClB,EAAE,CAACgB,SAAS,CAACG,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;MAC3D,IAAI,CAAClB,cAAc,CAACY,KAAK,GAAG,IAAI,CAACO,OAAO,CAACf,KAAK,CAAC;MAC/C,IAAI,CAACF,YAAY,CAACkB,IAAI,CAAChB,KAAK,CAAC;MAC7B,IAAIA,KAAK,CAACiB,YAAY,EAAE;QACpBjB,KAAK,CAACiB,YAAY,CAACC,aAAa,GAAG,MAAM;QACzC,MAAMC,OAAO,GAAGnB,KAAK,CAACiB,YAAY,CAACG,KAAK,CAACC,MAAM,GAAG,CAAC;QACnD,IAAI,CAACF,OAAO,EAAE;UACV;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;UACoBnB,KAAK,CAACiB,YAAY,CAACK,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;QAChD;MACJ;IACJ,CAAC,CAAC,EAAEjC,qBAAqB,CAAC,IAAI,CAACM,EAAE,EAAE,SAAS,EAAE,MAAM;MAChD,IAAI,CAACE,uBAAuB,CAACY,OAAO,CAAC,CAAC;MACtCI,UAAU,CAAC,MAAM;QACb,IAAI,CAACjB,cAAc,CAACa,OAAO,CAAC,CAAC,CAAC,CAAC;MACnC,CAAC,EAAE,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;EACP;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}