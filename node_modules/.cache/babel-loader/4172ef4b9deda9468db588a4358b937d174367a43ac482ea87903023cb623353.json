{"ast":null,"code":"class TransferObject {}\nexport class PanelTransfer extends TransferObject {\n  constructor(viewId, groupId, panelId) {\n    super();\n    this.viewId = viewId;\n    this.groupId = groupId;\n    this.panelId = panelId;\n  }\n}\nexport class PaneTransfer extends TransferObject {\n  constructor(viewId, paneId) {\n    super();\n    this.viewId = viewId;\n    this.paneId = paneId;\n  }\n}\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer {\n  constructor() {\n    // protect against external instantiation\n  }\n  static getInstance() {\n    return LocalSelectionTransfer.INSTANCE;\n  }\n  hasData(proto) {\n    return proto && proto === this.proto;\n  }\n  clearData(proto) {\n    if (this.hasData(proto)) {\n      this.proto = undefined;\n      this.data = undefined;\n    }\n  }\n  getData(proto) {\n    if (this.hasData(proto)) {\n      return this.data;\n    }\n    return undefined;\n  }\n  setData(data, proto) {\n    if (proto) {\n      this.data = data;\n      this.proto = proto;\n    }\n  }\n}\nLocalSelectionTransfer.INSTANCE = new LocalSelectionTransfer();\nexport function getPanelData() {\n  const panelTransfer = LocalSelectionTransfer.getInstance();\n  const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n  if (!isPanelEvent) {\n    return undefined;\n  }\n  return panelTransfer.getData(PanelTransfer.prototype)[0];\n}\nexport function getPaneData() {\n  const paneTransfer = LocalSelectionTransfer.getInstance();\n  const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n  if (!isPanelEvent) {\n    return undefined;\n  }\n  return paneTransfer.getData(PaneTransfer.prototype)[0];\n}","map":{"version":3,"names":["TransferObject","PanelTransfer","constructor","viewId","groupId","panelId","PaneTransfer","paneId","LocalSelectionTransfer","getInstance","INSTANCE","hasData","proto","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","isPanelEvent","prototype","getPaneData","paneTransfer"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/dnd/dataTransfer.js"],"sourcesContent":["class TransferObject {\n}\nexport class PanelTransfer extends TransferObject {\n    constructor(viewId, groupId, panelId) {\n        super();\n        this.viewId = viewId;\n        this.groupId = groupId;\n        this.panelId = panelId;\n    }\n}\nexport class PaneTransfer extends TransferObject {\n    constructor(viewId, paneId) {\n        super();\n        this.viewId = viewId;\n        this.paneId = paneId;\n    }\n}\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer {\n    constructor() {\n        // protect against external instantiation\n    }\n    static getInstance() {\n        return LocalSelectionTransfer.INSTANCE;\n    }\n    hasData(proto) {\n        return proto && proto === this.proto;\n    }\n    clearData(proto) {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n    getData(proto) {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n        return undefined;\n    }\n    setData(data, proto) {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\nLocalSelectionTransfer.INSTANCE = new LocalSelectionTransfer();\nexport function getPanelData() {\n    const panelTransfer = LocalSelectionTransfer.getInstance();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n    if (!isPanelEvent) {\n        return undefined;\n    }\n    return panelTransfer.getData(PanelTransfer.prototype)[0];\n}\nexport function getPaneData() {\n    const paneTransfer = LocalSelectionTransfer.getInstance();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n    if (!isPanelEvent) {\n        return undefined;\n    }\n    return paneTransfer.getData(PaneTransfer.prototype)[0];\n}\n"],"mappings":"AAAA,MAAMA,cAAc,CAAC;AAErB,OAAO,MAAMC,aAAa,SAASD,cAAc,CAAC;EAC9CE,WAAWA,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE;IAClC,KAAK,CAAC,CAAC;IACP,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;AACJ;AACA,OAAO,MAAMC,YAAY,SAASN,cAAc,CAAC;EAC7CE,WAAWA,CAACC,MAAM,EAAEI,MAAM,EAAE;IACxB,KAAK,CAAC,CAAC;IACP,IAAI,CAACJ,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,MAAM,GAAGA,MAAM;EACxB;AACJ;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,CAAC;EAChCN,WAAWA,CAAA,EAAG;IACV;EAAA;EAEJ,OAAOO,WAAWA,CAAA,EAAG;IACjB,OAAOD,sBAAsB,CAACE,QAAQ;EAC1C;EACAC,OAAOA,CAACC,KAAK,EAAE;IACX,OAAOA,KAAK,IAAIA,KAAK,KAAK,IAAI,CAACA,KAAK;EACxC;EACAC,SAASA,CAACD,KAAK,EAAE;IACb,IAAI,IAAI,CAACD,OAAO,CAACC,KAAK,CAAC,EAAE;MACrB,IAAI,CAACA,KAAK,GAAGE,SAAS;MACtB,IAAI,CAACC,IAAI,GAAGD,SAAS;IACzB;EACJ;EACAE,OAAOA,CAACJ,KAAK,EAAE;IACX,IAAI,IAAI,CAACD,OAAO,CAACC,KAAK,CAAC,EAAE;MACrB,OAAO,IAAI,CAACG,IAAI;IACpB;IACA,OAAOD,SAAS;EACpB;EACAG,OAAOA,CAACF,IAAI,EAAEH,KAAK,EAAE;IACjB,IAAIA,KAAK,EAAE;MACP,IAAI,CAACG,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACH,KAAK,GAAGA,KAAK;IACtB;EACJ;AACJ;AACAJ,sBAAsB,CAACE,QAAQ,GAAG,IAAIF,sBAAsB,CAAC,CAAC;AAC9D,OAAO,SAASU,YAAYA,CAAA,EAAG;EAC3B,MAAMC,aAAa,GAAGX,sBAAsB,CAACC,WAAW,CAAC,CAAC;EAC1D,MAAMW,YAAY,GAAGD,aAAa,CAACR,OAAO,CAACV,aAAa,CAACoB,SAAS,CAAC;EACnE,IAAI,CAACD,YAAY,EAAE;IACf,OAAON,SAAS;EACpB;EACA,OAAOK,aAAa,CAACH,OAAO,CAACf,aAAa,CAACoB,SAAS,CAAC,CAAC,CAAC,CAAC;AAC5D;AACA,OAAO,SAASC,WAAWA,CAAA,EAAG;EAC1B,MAAMC,YAAY,GAAGf,sBAAsB,CAACC,WAAW,CAAC,CAAC;EACzD,MAAMW,YAAY,GAAGG,YAAY,CAACZ,OAAO,CAACL,YAAY,CAACe,SAAS,CAAC;EACjE,IAAI,CAACD,YAAY,EAAE;IACf,OAAON,SAAS;EACpB;EACA,OAAOS,YAAY,CAACP,OAAO,CAACV,YAAY,CAACe,SAAS,CAAC,CAAC,CAAC,CAAC;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}