{"ast":null,"code":"import { Splitview, Orientation } from '../splitview/splitview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { Emitter } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nexport class Paneview extends CompositeDisposable {\n  get onDidAddView() {\n    return this.splitview.onDidAddView;\n  }\n  get onDidRemoveView() {\n    return this.splitview.onDidRemoveView;\n  }\n  get minimumSize() {\n    return this.splitview.minimumSize;\n  }\n  get maximumSize() {\n    return this.splitview.maximumSize;\n  }\n  get orientation() {\n    return this.splitview.orientation;\n  }\n  get size() {\n    return this.splitview.size;\n  }\n  get orthogonalSize() {\n    return this.splitview.orthogonalSize;\n  }\n  constructor(container, options) {\n    var _a;\n    super();\n    this.paneItems = [];\n    this.skipAnimation = false;\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n    this._orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : Orientation.VERTICAL;\n    this.element = document.createElement('div');\n    this.element.className = 'dv-pane-container';\n    container.appendChild(this.element);\n    this.splitview = new Splitview(this.element, {\n      orientation: this._orientation,\n      proportionalLayout: false,\n      descriptor: options.descriptor\n    });\n    // if we've added views from the descriptor we need to\n    // add the panes to our Pane array and setup animation\n    this.getPanes().forEach(pane => {\n      const disposable = new CompositeDisposable(pane.onDidChangeExpansionState(() => {\n        this.setupAnimation();\n        this._onDidChange.fire(undefined);\n      }));\n      const paneItem = {\n        pane,\n        disposable: {\n          dispose: () => {\n            disposable.dispose();\n          }\n        }\n      };\n      this.paneItems.push(paneItem);\n      pane.orthogonalSize = this.splitview.orthogonalSize;\n    });\n    this.addDisposables(this._onDidChange, this.splitview.onDidSashEnd(() => {\n      this._onDidChange.fire(undefined);\n    }), this.splitview.onDidAddView(() => {\n      this._onDidChange.fire();\n    }), this.splitview.onDidRemoveView(() => {\n      this._onDidChange.fire();\n    }));\n  }\n  setViewVisible(index, visible) {\n    this.splitview.setViewVisible(index, visible);\n  }\n  addPane(pane, size, index = this.splitview.length, skipLayout = false) {\n    const disposable = pane.onDidChangeExpansionState(() => {\n      this.setupAnimation();\n      this._onDidChange.fire(undefined);\n    });\n    const paneItem = {\n      pane,\n      disposable: {\n        dispose: () => {\n          disposable.dispose();\n        }\n      }\n    };\n    this.paneItems.splice(index, 0, paneItem);\n    pane.orthogonalSize = this.splitview.orthogonalSize;\n    this.splitview.addView(pane, size, index, skipLayout);\n  }\n  getViewSize(index) {\n    return this.splitview.getViewSize(index);\n  }\n  getPanes() {\n    return this.splitview.getViews();\n  }\n  removePane(index, options = {\n    skipDispose: false\n  }) {\n    const paneItem = this.paneItems.splice(index, 1)[0];\n    this.splitview.removeView(index);\n    if (!options.skipDispose) {\n      paneItem.disposable.dispose();\n      paneItem.pane.dispose();\n    }\n    return paneItem;\n  }\n  moveView(from, to) {\n    if (from === to) {\n      return;\n    }\n    const view = this.removePane(from, {\n      skipDispose: true\n    });\n    this.skipAnimation = true;\n    try {\n      this.addPane(view.pane, view.pane.size, to, false);\n    } finally {\n      this.skipAnimation = false;\n    }\n  }\n  layout(size, orthogonalSize) {\n    this.splitview.layout(size, orthogonalSize);\n  }\n  setupAnimation() {\n    if (this.skipAnimation) {\n      return;\n    }\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n      this.animationTimer = undefined;\n    }\n    addClasses(this.element, 'dv-animated');\n    this.animationTimer = setTimeout(() => {\n      this.animationTimer = undefined;\n      removeClasses(this.element, 'dv-animated');\n    }, 200);\n  }\n  dispose() {\n    super.dispose();\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n      this.animationTimer = undefined;\n    }\n    this.paneItems.forEach(paneItem => {\n      paneItem.disposable.dispose();\n      paneItem.pane.dispose();\n    });\n    this.paneItems = [];\n    this.splitview.dispose();\n    this.element.remove();\n  }\n}","map":{"version":3,"names":["Splitview","Orientation","CompositeDisposable","Emitter","addClasses","removeClasses","Paneview","onDidAddView","splitview","onDidRemoveView","minimumSize","maximumSize","orientation","size","orthogonalSize","constructor","container","options","_a","paneItems","skipAnimation","_onDidChange","onDidChange","event","_orientation","VERTICAL","element","document","createElement","className","appendChild","proportionalLayout","descriptor","getPanes","forEach","pane","disposable","onDidChangeExpansionState","setupAnimation","fire","undefined","paneItem","dispose","push","addDisposables","onDidSashEnd","setViewVisible","index","visible","addPane","length","skipLayout","splice","addView","getViewSize","getViews","removePane","skipDispose","removeView","moveView","from","to","view","layout","animationTimer","clearTimeout","setTimeout","remove"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/paneview/paneview.js"],"sourcesContent":["import { Splitview, Orientation, } from '../splitview/splitview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { Emitter } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nexport class Paneview extends CompositeDisposable {\n    get onDidAddView() {\n        return this.splitview.onDidAddView;\n    }\n    get onDidRemoveView() {\n        return this.splitview.onDidRemoveView;\n    }\n    get minimumSize() {\n        return this.splitview.minimumSize;\n    }\n    get maximumSize() {\n        return this.splitview.maximumSize;\n    }\n    get orientation() {\n        return this.splitview.orientation;\n    }\n    get size() {\n        return this.splitview.size;\n    }\n    get orthogonalSize() {\n        return this.splitview.orthogonalSize;\n    }\n    constructor(container, options) {\n        var _a;\n        super();\n        this.paneItems = [];\n        this.skipAnimation = false;\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : Orientation.VERTICAL;\n        this.element = document.createElement('div');\n        this.element.className = 'dv-pane-container';\n        container.appendChild(this.element);\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(pane.onDidChangeExpansionState(() => {\n                this.setupAnimation();\n                this._onDidChange.fire(undefined);\n            }));\n            const paneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n        this.addDisposables(this._onDidChange, this.splitview.onDidSashEnd(() => {\n            this._onDidChange.fire(undefined);\n        }), this.splitview.onDidAddView(() => {\n            this._onDidChange.fire();\n        }), this.splitview.onDidRemoveView(() => {\n            this._onDidChange.fire();\n        }));\n    }\n    setViewVisible(index, visible) {\n        this.splitview.setViewVisible(index, visible);\n    }\n    addPane(pane, size, index = this.splitview.length, skipLayout = false) {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n        const paneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n        this.paneItems.splice(index, 0, paneItem);\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n    getViewSize(index) {\n        return this.splitview.getViewSize(index);\n    }\n    getPanes() {\n        return this.splitview.getViews();\n    }\n    removePane(index, options = { skipDispose: false }) {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n        return paneItem;\n    }\n    moveView(from, to) {\n        if (from === to) {\n            return;\n        }\n        const view = this.removePane(from, { skipDispose: true });\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        }\n        finally {\n            this.skipAnimation = false;\n        }\n    }\n    layout(size, orthogonalSize) {\n        this.splitview.layout(size, orthogonalSize);\n    }\n    setupAnimation() {\n        if (this.skipAnimation) {\n            return;\n        }\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n        addClasses(this.element, 'dv-animated');\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'dv-animated');\n        }, 200);\n    }\n    dispose() {\n        super.dispose();\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}