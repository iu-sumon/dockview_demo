{"ast":null,"code":"import { getRelativeLocation, getGridLocation } from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { BaseGrid, toTarget } from './baseComponentGridview';\nimport { Emitter } from '../events';\nexport class GridviewComponent extends BaseGrid {\n  get orientation() {\n    return this.gridview.orientation;\n  }\n  set orientation(value) {\n    this.gridview.orientation = value;\n  }\n  get options() {\n    return this._options;\n  }\n  get deserializer() {\n    return this._deserializer;\n  }\n  set deserializer(value) {\n    this._deserializer = value;\n  }\n  constructor(container, options) {\n    var _a;\n    super(container, {\n      proportionalLayout: (_a = options.proportionalLayout) !== null && _a !== void 0 ? _a : true,\n      orientation: options.orientation,\n      styles: options.hideBorders ? {\n        separatorBorder: 'transparent'\n      } : undefined,\n      disableAutoResizing: options.disableAutoResizing,\n      className: options.className\n    });\n    this._onDidLayoutfromJSON = new Emitter();\n    this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;\n    this._onDidRemoveGroup = new Emitter();\n    this.onDidRemoveGroup = this._onDidRemoveGroup.event;\n    this._onDidAddGroup = new Emitter();\n    this.onDidAddGroup = this._onDidAddGroup.event;\n    this._onDidActiveGroupChange = new Emitter();\n    this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n    this._options = options;\n    this.addDisposables(this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this.onDidAdd(event => {\n      this._onDidAddGroup.fire(event);\n    }), this.onDidRemove(event => {\n      this._onDidRemoveGroup.fire(event);\n    }), this.onDidActiveChange(event => {\n      this._onDidActiveGroupChange.fire(event);\n    }));\n  }\n  updateOptions(options) {\n    super.updateOptions(options);\n    const hasOrientationChanged = typeof options.orientation === 'string' && this.gridview.orientation !== options.orientation;\n    this._options = Object.assign(Object.assign({}, this.options), options);\n    if (hasOrientationChanged) {\n      this.gridview.orientation = options.orientation;\n    }\n    this.layout(this.gridview.width, this.gridview.height, true);\n  }\n  removePanel(panel) {\n    this.removeGroup(panel);\n  }\n  /**\n   * Serialize the current state of the layout\n   *\n   * @returns A JSON respresentation of the layout\n   */\n  toJSON() {\n    var _a;\n    const data = this.gridview.serialize();\n    return {\n      grid: data,\n      activePanel: (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.id\n    };\n  }\n  setVisible(panel, visible) {\n    this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n  }\n  setActive(panel) {\n    this._groups.forEach((value, _key) => {\n      value.value.setActive(panel === value.value);\n    });\n  }\n  focus() {\n    var _a;\n    (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.focus();\n  }\n  fromJSON(serializedGridview) {\n    this.clear();\n    const {\n      grid,\n      activePanel\n    } = serializedGridview;\n    try {\n      const queue = [];\n      // take note of the existing dimensions\n      const width = this.width;\n      const height = this.height;\n      this.gridview.deserialize(grid, {\n        fromJSON: node => {\n          const {\n            data\n          } = node;\n          const view = this.options.createComponent({\n            id: data.id,\n            name: data.component\n          });\n          queue.push(() => view.init({\n            params: data.params,\n            minimumWidth: data.minimumWidth,\n            maximumWidth: data.maximumWidth,\n            minimumHeight: data.minimumHeight,\n            maximumHeight: data.maximumHeight,\n            priority: data.priority,\n            snap: !!data.snap,\n            accessor: this,\n            isVisible: node.visible\n          }));\n          this._onDidAddGroup.fire(view);\n          this.registerPanel(view);\n          return view;\n        }\n      });\n      this.layout(width, height, true);\n      queue.forEach(f => f());\n      if (typeof activePanel === 'string') {\n        const panel = this.getPanel(activePanel);\n        if (panel) {\n          this.doSetGroupActive(panel);\n        }\n      }\n    } catch (err) {\n      /**\n       * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n       * the underlying HTMLElement existing in the Gridview.\n       */\n      for (const group of this.groups) {\n        group.dispose();\n        this._groups.delete(group.id);\n        this._onDidRemoveGroup.fire(group);\n      }\n      // fires clean-up events and clears the underlying HTML gridview.\n      this.clear();\n      /**\n       * even though we have cleaned-up we still want to inform the caller of their error\n       * and we'll do this through re-throwing the original error since afterall you would\n       * expect trying to load a corrupted layout to result in an error and not silently fail...\n       */\n      throw err;\n    }\n    this._onDidLayoutfromJSON.fire();\n  }\n  clear() {\n    const hasActiveGroup = this.activeGroup;\n    const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n    for (const group of groups) {\n      group.disposable.dispose();\n      this.doRemoveGroup(group.value, {\n        skipActive: true\n      });\n    }\n    if (hasActiveGroup) {\n      this.doSetGroupActive(undefined);\n    }\n    this.gridview.clear();\n  }\n  movePanel(panel, options) {\n    var _a;\n    let relativeLocation;\n    const removedPanel = this.gridview.remove(panel);\n    const referenceGroup = (_a = this._groups.get(options.reference)) === null || _a === void 0 ? void 0 : _a.value;\n    if (!referenceGroup) {\n      throw new Error(`reference group ${options.reference} does not exist`);\n    }\n    const target = toTarget(options.direction);\n    if (target === 'center') {\n      throw new Error(`${target} not supported as an option`);\n    } else {\n      const location = getGridLocation(referenceGroup.element);\n      relativeLocation = getRelativeLocation(this.gridview.orientation, location, target);\n    }\n    this.doAddGroup(removedPanel, relativeLocation, options.size);\n  }\n  addPanel(options) {\n    var _a, _b, _c, _d;\n    let relativeLocation = (_a = options.location) !== null && _a !== void 0 ? _a : [0];\n    if ((_b = options.position) === null || _b === void 0 ? void 0 : _b.referencePanel) {\n      const referenceGroup = (_c = this._groups.get(options.position.referencePanel)) === null || _c === void 0 ? void 0 : _c.value;\n      if (!referenceGroup) {\n        throw new Error(`reference group ${options.position.referencePanel} does not exist`);\n      }\n      const target = toTarget(options.position.direction);\n      if (target === 'center') {\n        throw new Error(`${target} not supported as an option`);\n      } else {\n        const location = getGridLocation(referenceGroup.element);\n        relativeLocation = getRelativeLocation(this.gridview.orientation, location, target);\n      }\n    }\n    const view = this.options.createComponent({\n      id: options.id,\n      name: options.component\n    });\n    view.init({\n      params: (_d = options.params) !== null && _d !== void 0 ? _d : {},\n      minimumWidth: options.minimumWidth,\n      maximumWidth: options.maximumWidth,\n      minimumHeight: options.minimumHeight,\n      maximumHeight: options.maximumHeight,\n      priority: options.priority,\n      snap: !!options.snap,\n      accessor: this,\n      isVisible: true\n    });\n    this.registerPanel(view);\n    this.doAddGroup(view, relativeLocation, options.size);\n    this.doSetGroupActive(view);\n    return view;\n  }\n  registerPanel(panel) {\n    const disposable = new CompositeDisposable(panel.api.onDidFocusChange(event => {\n      if (!event.isFocused) {\n        return;\n      }\n      this._groups.forEach(groupItem => {\n        const group = groupItem.value;\n        if (group !== panel) {\n          group.setActive(false);\n        } else {\n          group.setActive(true);\n        }\n      });\n    }));\n    this._groups.set(panel.id, {\n      value: panel,\n      disposable\n    });\n  }\n  moveGroup(referenceGroup, groupId, target) {\n    const sourceGroup = this.getPanel(groupId);\n    if (!sourceGroup) {\n      throw new Error('invalid operation');\n    }\n    const referenceLocation = getGridLocation(referenceGroup.element);\n    const targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, target);\n    const [targetParentLocation, to] = tail(targetLocation);\n    const sourceLocation = getGridLocation(sourceGroup.element);\n    const [sourceParentLocation, from] = tail(sourceLocation);\n    if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n      // special case when 'swapping' two views within same grid location\n      // if a group has one tab - we are essentially moving the 'group'\n      // which is equivalent to swapping two views in this case\n      this.gridview.moveView(sourceParentLocation, from, to);\n      return;\n    }\n    // source group will become empty so delete the group\n    const targetGroup = this.doRemoveGroup(sourceGroup, {\n      skipActive: true,\n      skipDispose: true\n    });\n    // after deleting the group we need to re-evaulate the ref location\n    const updatedReferenceLocation = getGridLocation(referenceGroup.element);\n    const location = getRelativeLocation(this.gridview.orientation, updatedReferenceLocation, target);\n    this.doAddGroup(targetGroup, location);\n  }\n  removeGroup(group) {\n    super.removeGroup(group);\n  }\n  dispose() {\n    super.dispose();\n    this._onDidLayoutfromJSON.dispose();\n  }\n}","map":{"version":3,"names":["getRelativeLocation","getGridLocation","tail","sequenceEquals","CompositeDisposable","BaseGrid","toTarget","Emitter","GridviewComponent","orientation","gridview","value","options","_options","deserializer","_deserializer","constructor","container","_a","proportionalLayout","styles","hideBorders","separatorBorder","undefined","disableAutoResizing","className","_onDidLayoutfromJSON","onDidLayoutFromJSON","event","_onDidRemoveGroup","onDidRemoveGroup","_onDidAddGroup","onDidAddGroup","_onDidActiveGroupChange","onDidActiveGroupChange","addDisposables","onDidAdd","fire","onDidRemove","onDidActiveChange","updateOptions","hasOrientationChanged","Object","assign","layout","width","height","removePanel","panel","removeGroup","toJSON","data","serialize","grid","activePanel","activeGroup","id","setVisible","visible","setViewVisible","element","setActive","_groups","forEach","_key","focus","fromJSON","serializedGridview","clear","queue","deserialize","node","view","createComponent","name","component","push","init","params","minimumWidth","maximumWidth","minimumHeight","maximumHeight","priority","snap","accessor","isVisible","registerPanel","f","getPanel","doSetGroupActive","err","group","groups","dispose","delete","hasActiveGroup","Array","from","values","disposable","doRemoveGroup","skipActive","movePanel","relativeLocation","removedPanel","remove","referenceGroup","get","reference","Error","target","direction","location","doAddGroup","size","addPanel","_b","_c","_d","position","referencePanel","api","onDidFocusChange","isFocused","groupItem","set","moveGroup","groupId","sourceGroup","referenceLocation","targetLocation","targetParentLocation","to","sourceLocation","sourceParentLocation","moveView","targetGroup","skipDispose","updatedReferenceLocation"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js"],"sourcesContent":["import { getRelativeLocation, getGridLocation, } from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { BaseGrid, toTarget, } from './baseComponentGridview';\nimport { Emitter } from '../events';\nexport class GridviewComponent extends BaseGrid {\n    get orientation() {\n        return this.gridview.orientation;\n    }\n    set orientation(value) {\n        this.gridview.orientation = value;\n    }\n    get options() {\n        return this._options;\n    }\n    get deserializer() {\n        return this._deserializer;\n    }\n    set deserializer(value) {\n        this._deserializer = value;\n    }\n    constructor(container, options) {\n        var _a;\n        super(container, {\n            proportionalLayout: (_a = options.proportionalLayout) !== null && _a !== void 0 ? _a : true,\n            orientation: options.orientation,\n            styles: options.hideBorders\n                ? { separatorBorder: 'transparent' }\n                : undefined,\n            disableAutoResizing: options.disableAutoResizing,\n            className: options.className,\n        });\n        this._onDidLayoutfromJSON = new Emitter();\n        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;\n        this._onDidRemoveGroup = new Emitter();\n        this.onDidRemoveGroup = this._onDidRemoveGroup.event;\n        this._onDidAddGroup = new Emitter();\n        this.onDidAddGroup = this._onDidAddGroup.event;\n        this._onDidActiveGroupChange = new Emitter();\n        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n        this._options = options;\n        this.addDisposables(this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this.onDidAdd((event) => {\n            this._onDidAddGroup.fire(event);\n        }), this.onDidRemove((event) => {\n            this._onDidRemoveGroup.fire(event);\n        }), this.onDidActiveChange((event) => {\n            this._onDidActiveGroupChange.fire(event);\n        }));\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        const hasOrientationChanged = typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        this._options = Object.assign(Object.assign({}, this.options), options);\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation;\n        }\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n    removePanel(panel) {\n        this.removeGroup(panel);\n    }\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON() {\n        var _a;\n        const data = this.gridview.serialize();\n        return {\n            grid: data,\n            activePanel: (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.id,\n        };\n    }\n    setVisible(panel, visible) {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n    setActive(panel) {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n    focus() {\n        var _a;\n        (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    fromJSON(serializedGridview) {\n        this.clear();\n        const { grid, activePanel } = serializedGridview;\n        try {\n            const queue = [];\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = this.options.createComponent({\n                        id: data.id,\n                        name: data.component,\n                    });\n                    queue.push(() => view.init({\n                        params: data.params,\n                        minimumWidth: data.minimumWidth,\n                        maximumWidth: data.maximumWidth,\n                        minimumHeight: data.minimumHeight,\n                        maximumHeight: data.maximumHeight,\n                        priority: data.priority,\n                        snap: !!data.snap,\n                        accessor: this,\n                        isVisible: node.visible,\n                    }));\n                    this._onDidAddGroup.fire(view);\n                    this.registerPanel(view);\n                    return view;\n                },\n            });\n            this.layout(width, height, true);\n            queue.forEach((f) => f());\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        }\n        catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n        this._onDidLayoutfromJSON.fire();\n    }\n    clear() {\n        const hasActiveGroup = this.activeGroup;\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n        this.gridview.clear();\n    }\n    movePanel(panel, options) {\n        var _a;\n        let relativeLocation;\n        const removedPanel = this.gridview.remove(panel);\n        const referenceGroup = (_a = this._groups.get(options.reference)) === null || _a === void 0 ? void 0 : _a.value;\n        if (!referenceGroup) {\n            throw new Error(`reference group ${options.reference} does not exist`);\n        }\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        }\n        else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(this.gridview.orientation, location, target);\n        }\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n    addPanel(options) {\n        var _a, _b, _c, _d;\n        let relativeLocation = (_a = options.location) !== null && _a !== void 0 ? _a : [0];\n        if ((_b = options.position) === null || _b === void 0 ? void 0 : _b.referencePanel) {\n            const referenceGroup = (_c = this._groups.get(options.position.referencePanel)) === null || _c === void 0 ? void 0 : _c.value;\n            if (!referenceGroup) {\n                throw new Error(`reference group ${options.position.referencePanel} does not exist`);\n            }\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            }\n            else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(this.gridview.orientation, location, target);\n            }\n        }\n        const view = this.options.createComponent({\n            id: options.id,\n            name: options.component,\n        });\n        view.init({\n            params: (_d = options.params) !== null && _d !== void 0 ? _d : {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n        this.registerPanel(view);\n        this.doAddGroup(view, relativeLocation, options.size);\n        this.doSetGroupActive(view);\n        return view;\n    }\n    registerPanel(panel) {\n        const disposable = new CompositeDisposable(panel.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this._groups.forEach((groupItem) => {\n                const group = groupItem.value;\n                if (group !== panel) {\n                    group.setActive(false);\n                }\n                else {\n                    group.setActive(true);\n                }\n            });\n        }));\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n    moveGroup(referenceGroup, groupId, target) {\n        const sourceGroup = this.getPanel(groupId);\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, target);\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n            return;\n        }\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(referenceGroup.element);\n        const location = getRelativeLocation(this.gridview.orientation, updatedReferenceLocation, target);\n        this.doAddGroup(targetGroup, location);\n    }\n    removeGroup(group) {\n        super.removeGroup(group);\n    }\n    dispose() {\n        super.dispose();\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,eAAe,QAAS,YAAY;AAClE,SAASC,IAAI,EAAEC,cAAc,QAAQ,UAAU;AAC/C,SAASC,mBAAmB,QAAQ,cAAc;AAClD,SAASC,QAAQ,EAAEC,QAAQ,QAAS,yBAAyB;AAC7D,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAO,MAAMC,iBAAiB,SAASH,QAAQ,CAAC;EAC5C,IAAII,WAAWA,CAAA,EAAG;IACd,OAAO,IAAI,CAACC,QAAQ,CAACD,WAAW;EACpC;EACA,IAAIA,WAAWA,CAACE,KAAK,EAAE;IACnB,IAAI,CAACD,QAAQ,CAACD,WAAW,GAAGE,KAAK;EACrC;EACA,IAAIC,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACC,QAAQ;EACxB;EACA,IAAIC,YAAYA,CAAA,EAAG;IACf,OAAO,IAAI,CAACC,aAAa;EAC7B;EACA,IAAID,YAAYA,CAACH,KAAK,EAAE;IACpB,IAAI,CAACI,aAAa,GAAGJ,KAAK;EAC9B;EACAK,WAAWA,CAACC,SAAS,EAAEL,OAAO,EAAE;IAC5B,IAAIM,EAAE;IACN,KAAK,CAACD,SAAS,EAAE;MACbE,kBAAkB,EAAE,CAACD,EAAE,GAAGN,OAAO,CAACO,kBAAkB,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI;MAC3FT,WAAW,EAAEG,OAAO,CAACH,WAAW;MAChCW,MAAM,EAAER,OAAO,CAACS,WAAW,GACrB;QAAEC,eAAe,EAAE;MAAc,CAAC,GAClCC,SAAS;MACfC,mBAAmB,EAAEZ,OAAO,CAACY,mBAAmB;MAChDC,SAAS,EAAEb,OAAO,CAACa;IACvB,CAAC,CAAC;IACF,IAAI,CAACC,oBAAoB,GAAG,IAAInB,OAAO,CAAC,CAAC;IACzC,IAAI,CAACoB,mBAAmB,GAAG,IAAI,CAACD,oBAAoB,CAACE,KAAK;IAC1D,IAAI,CAACC,iBAAiB,GAAG,IAAItB,OAAO,CAAC,CAAC;IACtC,IAAI,CAACuB,gBAAgB,GAAG,IAAI,CAACD,iBAAiB,CAACD,KAAK;IACpD,IAAI,CAACG,cAAc,GAAG,IAAIxB,OAAO,CAAC,CAAC;IACnC,IAAI,CAACyB,aAAa,GAAG,IAAI,CAACD,cAAc,CAACH,KAAK;IAC9C,IAAI,CAACK,uBAAuB,GAAG,IAAI1B,OAAO,CAAC,CAAC;IAC5C,IAAI,CAAC2B,sBAAsB,GAAG,IAAI,CAACD,uBAAuB,CAACL,KAAK;IAChE,IAAI,CAACf,QAAQ,GAAGD,OAAO;IACvB,IAAI,CAACuB,cAAc,CAAC,IAAI,CAACJ,cAAc,EAAE,IAAI,CAACF,iBAAiB,EAAE,IAAI,CAACI,uBAAuB,EAAE,IAAI,CAACG,QAAQ,CAAER,KAAK,IAAK;MACpH,IAAI,CAACG,cAAc,CAACM,IAAI,CAACT,KAAK,CAAC;IACnC,CAAC,CAAC,EAAE,IAAI,CAACU,WAAW,CAAEV,KAAK,IAAK;MAC5B,IAAI,CAACC,iBAAiB,CAACQ,IAAI,CAACT,KAAK,CAAC;IACtC,CAAC,CAAC,EAAE,IAAI,CAACW,iBAAiB,CAAEX,KAAK,IAAK;MAClC,IAAI,CAACK,uBAAuB,CAACI,IAAI,CAACT,KAAK,CAAC;IAC5C,CAAC,CAAC,CAAC;EACP;EACAY,aAAaA,CAAC5B,OAAO,EAAE;IACnB,KAAK,CAAC4B,aAAa,CAAC5B,OAAO,CAAC;IAC5B,MAAM6B,qBAAqB,GAAG,OAAO7B,OAAO,CAACH,WAAW,KAAK,QAAQ,IACjE,IAAI,CAACC,QAAQ,CAACD,WAAW,KAAKG,OAAO,CAACH,WAAW;IACrD,IAAI,CAACI,QAAQ,GAAG6B,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC/B,OAAO,CAAC,EAAEA,OAAO,CAAC;IACvE,IAAI6B,qBAAqB,EAAE;MACvB,IAAI,CAAC/B,QAAQ,CAACD,WAAW,GAAGG,OAAO,CAACH,WAAW;IACnD;IACA,IAAI,CAACmC,MAAM,CAAC,IAAI,CAAClC,QAAQ,CAACmC,KAAK,EAAE,IAAI,CAACnC,QAAQ,CAACoC,MAAM,EAAE,IAAI,CAAC;EAChE;EACAC,WAAWA,CAACC,KAAK,EAAE;IACf,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;EACIE,MAAMA,CAAA,EAAG;IACL,IAAIhC,EAAE;IACN,MAAMiC,IAAI,GAAG,IAAI,CAACzC,QAAQ,CAAC0C,SAAS,CAAC,CAAC;IACtC,OAAO;MACHC,IAAI,EAAEF,IAAI;MACVG,WAAW,EAAE,CAACpC,EAAE,GAAG,IAAI,CAACqC,WAAW,MAAM,IAAI,IAAIrC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACsC;IACjF,CAAC;EACL;EACAC,UAAUA,CAACT,KAAK,EAAEU,OAAO,EAAE;IACvB,IAAI,CAAChD,QAAQ,CAACiD,cAAc,CAAC1D,eAAe,CAAC+C,KAAK,CAACY,OAAO,CAAC,EAAEF,OAAO,CAAC;EACzE;EACAG,SAASA,CAACb,KAAK,EAAE;IACb,IAAI,CAACc,OAAO,CAACC,OAAO,CAAC,CAACpD,KAAK,EAAEqD,IAAI,KAAK;MAClCrD,KAAK,CAACA,KAAK,CAACkD,SAAS,CAACb,KAAK,KAAKrC,KAAK,CAACA,KAAK,CAAC;IAChD,CAAC,CAAC;EACN;EACAsD,KAAKA,CAAA,EAAG;IACJ,IAAI/C,EAAE;IACN,CAACA,EAAE,GAAG,IAAI,CAACqC,WAAW,MAAM,IAAI,IAAIrC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC+C,KAAK,CAAC,CAAC;EAC3E;EACAC,QAAQA,CAACC,kBAAkB,EAAE;IACzB,IAAI,CAACC,KAAK,CAAC,CAAC;IACZ,MAAM;MAAEf,IAAI;MAAEC;IAAY,CAAC,GAAGa,kBAAkB;IAChD,IAAI;MACA,MAAME,KAAK,GAAG,EAAE;MAChB;MACA,MAAMxB,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1B,IAAI,CAACpC,QAAQ,CAAC4D,WAAW,CAACjB,IAAI,EAAE;QAC5Ba,QAAQ,EAAGK,IAAI,IAAK;UAChB,MAAM;YAAEpB;UAAK,CAAC,GAAGoB,IAAI;UACrB,MAAMC,IAAI,GAAG,IAAI,CAAC5D,OAAO,CAAC6D,eAAe,CAAC;YACtCjB,EAAE,EAAEL,IAAI,CAACK,EAAE;YACXkB,IAAI,EAAEvB,IAAI,CAACwB;UACf,CAAC,CAAC;UACFN,KAAK,CAACO,IAAI,CAAC,MAAMJ,IAAI,CAACK,IAAI,CAAC;YACvBC,MAAM,EAAE3B,IAAI,CAAC2B,MAAM;YACnBC,YAAY,EAAE5B,IAAI,CAAC4B,YAAY;YAC/BC,YAAY,EAAE7B,IAAI,CAAC6B,YAAY;YAC/BC,aAAa,EAAE9B,IAAI,CAAC8B,aAAa;YACjCC,aAAa,EAAE/B,IAAI,CAAC+B,aAAa;YACjCC,QAAQ,EAAEhC,IAAI,CAACgC,QAAQ;YACvBC,IAAI,EAAE,CAAC,CAACjC,IAAI,CAACiC,IAAI;YACjBC,QAAQ,EAAE,IAAI;YACdC,SAAS,EAAEf,IAAI,CAACb;UACpB,CAAC,CAAC,CAAC;UACH,IAAI,CAAC3B,cAAc,CAACM,IAAI,CAACmC,IAAI,CAAC;UAC9B,IAAI,CAACe,aAAa,CAACf,IAAI,CAAC;UACxB,OAAOA,IAAI;QACf;MACJ,CAAC,CAAC;MACF,IAAI,CAAC5B,MAAM,CAACC,KAAK,EAAEC,MAAM,EAAE,IAAI,CAAC;MAChCuB,KAAK,CAACN,OAAO,CAAEyB,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAC;MACzB,IAAI,OAAOlC,WAAW,KAAK,QAAQ,EAAE;QACjC,MAAMN,KAAK,GAAG,IAAI,CAACyC,QAAQ,CAACnC,WAAW,CAAC;QACxC,IAAIN,KAAK,EAAE;UACP,IAAI,CAAC0C,gBAAgB,CAAC1C,KAAK,CAAC;QAChC;MACJ;IACJ,CAAC,CACD,OAAO2C,GAAG,EAAE;MACR;AACZ;AACA;AACA;MACY,KAAK,MAAMC,KAAK,IAAI,IAAI,CAACC,MAAM,EAAE;QAC7BD,KAAK,CAACE,OAAO,CAAC,CAAC;QACf,IAAI,CAAChC,OAAO,CAACiC,MAAM,CAACH,KAAK,CAACpC,EAAE,CAAC;QAC7B,IAAI,CAAC3B,iBAAiB,CAACQ,IAAI,CAACuD,KAAK,CAAC;MACtC;MACA;MACA,IAAI,CAACxB,KAAK,CAAC,CAAC;MACZ;AACZ;AACA;AACA;AACA;MACY,MAAMuB,GAAG;IACb;IACA,IAAI,CAACjE,oBAAoB,CAACW,IAAI,CAAC,CAAC;EACpC;EACA+B,KAAKA,CAAA,EAAG;IACJ,MAAM4B,cAAc,GAAG,IAAI,CAACzC,WAAW;IACvC,MAAMsC,MAAM,GAAGI,KAAK,CAACC,IAAI,CAAC,IAAI,CAACpC,OAAO,CAACqC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,KAAK,MAAMP,KAAK,IAAIC,MAAM,EAAE;MACxBD,KAAK,CAACQ,UAAU,CAACN,OAAO,CAAC,CAAC;MAC1B,IAAI,CAACO,aAAa,CAACT,KAAK,CAACjF,KAAK,EAAE;QAAE2F,UAAU,EAAE;MAAK,CAAC,CAAC;IACzD;IACA,IAAIN,cAAc,EAAE;MAChB,IAAI,CAACN,gBAAgB,CAACnE,SAAS,CAAC;IACpC;IACA,IAAI,CAACb,QAAQ,CAAC0D,KAAK,CAAC,CAAC;EACzB;EACAmC,SAASA,CAACvD,KAAK,EAAEpC,OAAO,EAAE;IACtB,IAAIM,EAAE;IACN,IAAIsF,gBAAgB;IACpB,MAAMC,YAAY,GAAG,IAAI,CAAC/F,QAAQ,CAACgG,MAAM,CAAC1D,KAAK,CAAC;IAChD,MAAM2D,cAAc,GAAG,CAACzF,EAAE,GAAG,IAAI,CAAC4C,OAAO,CAAC8C,GAAG,CAAChG,OAAO,CAACiG,SAAS,CAAC,MAAM,IAAI,IAAI3F,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACP,KAAK;IAC/G,IAAI,CAACgG,cAAc,EAAE;MACjB,MAAM,IAAIG,KAAK,CAAC,mBAAmBlG,OAAO,CAACiG,SAAS,iBAAiB,CAAC;IAC1E;IACA,MAAME,MAAM,GAAGzG,QAAQ,CAACM,OAAO,CAACoG,SAAS,CAAC;IAC1C,IAAID,MAAM,KAAK,QAAQ,EAAE;MACrB,MAAM,IAAID,KAAK,CAAC,GAAGC,MAAM,6BAA6B,CAAC;IAC3D,CAAC,MACI;MACD,MAAME,QAAQ,GAAGhH,eAAe,CAAC0G,cAAc,CAAC/C,OAAO,CAAC;MACxD4C,gBAAgB,GAAGxG,mBAAmB,CAAC,IAAI,CAACU,QAAQ,CAACD,WAAW,EAAEwG,QAAQ,EAAEF,MAAM,CAAC;IACvF;IACA,IAAI,CAACG,UAAU,CAACT,YAAY,EAAED,gBAAgB,EAAE5F,OAAO,CAACuG,IAAI,CAAC;EACjE;EACAC,QAAQA,CAACxG,OAAO,EAAE;IACd,IAAIM,EAAE,EAAEmG,EAAE,EAAEC,EAAE,EAAEC,EAAE;IAClB,IAAIf,gBAAgB,GAAG,CAACtF,EAAE,GAAGN,OAAO,CAACqG,QAAQ,MAAM,IAAI,IAAI/F,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC,CAAC;IACnF,IAAI,CAACmG,EAAE,GAAGzG,OAAO,CAAC4G,QAAQ,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,cAAc,EAAE;MAChF,MAAMd,cAAc,GAAG,CAACW,EAAE,GAAG,IAAI,CAACxD,OAAO,CAAC8C,GAAG,CAAChG,OAAO,CAAC4G,QAAQ,CAACC,cAAc,CAAC,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC3G,KAAK;MAC7H,IAAI,CAACgG,cAAc,EAAE;QACjB,MAAM,IAAIG,KAAK,CAAC,mBAAmBlG,OAAO,CAAC4G,QAAQ,CAACC,cAAc,iBAAiB,CAAC;MACxF;MACA,MAAMV,MAAM,GAAGzG,QAAQ,CAACM,OAAO,CAAC4G,QAAQ,CAACR,SAAS,CAAC;MACnD,IAAID,MAAM,KAAK,QAAQ,EAAE;QACrB,MAAM,IAAID,KAAK,CAAC,GAAGC,MAAM,6BAA6B,CAAC;MAC3D,CAAC,MACI;QACD,MAAME,QAAQ,GAAGhH,eAAe,CAAC0G,cAAc,CAAC/C,OAAO,CAAC;QACxD4C,gBAAgB,GAAGxG,mBAAmB,CAAC,IAAI,CAACU,QAAQ,CAACD,WAAW,EAAEwG,QAAQ,EAAEF,MAAM,CAAC;MACvF;IACJ;IACA,MAAMvC,IAAI,GAAG,IAAI,CAAC5D,OAAO,CAAC6D,eAAe,CAAC;MACtCjB,EAAE,EAAE5C,OAAO,CAAC4C,EAAE;MACdkB,IAAI,EAAE9D,OAAO,CAAC+D;IAClB,CAAC,CAAC;IACFH,IAAI,CAACK,IAAI,CAAC;MACNC,MAAM,EAAE,CAACyC,EAAE,GAAG3G,OAAO,CAACkE,MAAM,MAAM,IAAI,IAAIyC,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC;MACjExC,YAAY,EAAEnE,OAAO,CAACmE,YAAY;MAClCC,YAAY,EAAEpE,OAAO,CAACoE,YAAY;MAClCC,aAAa,EAAErE,OAAO,CAACqE,aAAa;MACpCC,aAAa,EAAEtE,OAAO,CAACsE,aAAa;MACpCC,QAAQ,EAAEvE,OAAO,CAACuE,QAAQ;MAC1BC,IAAI,EAAE,CAAC,CAACxE,OAAO,CAACwE,IAAI;MACpBC,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAE;IACf,CAAC,CAAC;IACF,IAAI,CAACC,aAAa,CAACf,IAAI,CAAC;IACxB,IAAI,CAAC0C,UAAU,CAAC1C,IAAI,EAAEgC,gBAAgB,EAAE5F,OAAO,CAACuG,IAAI,CAAC;IACrD,IAAI,CAACzB,gBAAgB,CAAClB,IAAI,CAAC;IAC3B,OAAOA,IAAI;EACf;EACAe,aAAaA,CAACvC,KAAK,EAAE;IACjB,MAAMoD,UAAU,GAAG,IAAIhG,mBAAmB,CAAC4C,KAAK,CAAC0E,GAAG,CAACC,gBAAgB,CAAE/F,KAAK,IAAK;MAC7E,IAAI,CAACA,KAAK,CAACgG,SAAS,EAAE;QAClB;MACJ;MACA,IAAI,CAAC9D,OAAO,CAACC,OAAO,CAAE8D,SAAS,IAAK;QAChC,MAAMjC,KAAK,GAAGiC,SAAS,CAAClH,KAAK;QAC7B,IAAIiF,KAAK,KAAK5C,KAAK,EAAE;UACjB4C,KAAK,CAAC/B,SAAS,CAAC,KAAK,CAAC;QAC1B,CAAC,MACI;UACD+B,KAAK,CAAC/B,SAAS,CAAC,IAAI,CAAC;QACzB;MACJ,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IACH,IAAI,CAACC,OAAO,CAACgE,GAAG,CAAC9E,KAAK,CAACQ,EAAE,EAAE;MACvB7C,KAAK,EAAEqC,KAAK;MACZoD;IACJ,CAAC,CAAC;EACN;EACA2B,SAASA,CAACpB,cAAc,EAAEqB,OAAO,EAAEjB,MAAM,EAAE;IACvC,MAAMkB,WAAW,GAAG,IAAI,CAACxC,QAAQ,CAACuC,OAAO,CAAC;IAC1C,IAAI,CAACC,WAAW,EAAE;MACd,MAAM,IAAInB,KAAK,CAAC,mBAAmB,CAAC;IACxC;IACA,MAAMoB,iBAAiB,GAAGjI,eAAe,CAAC0G,cAAc,CAAC/C,OAAO,CAAC;IACjE,MAAMuE,cAAc,GAAGnI,mBAAmB,CAAC,IAAI,CAACU,QAAQ,CAACD,WAAW,EAAEyH,iBAAiB,EAAEnB,MAAM,CAAC;IAChG,MAAM,CAACqB,oBAAoB,EAAEC,EAAE,CAAC,GAAGnI,IAAI,CAACiI,cAAc,CAAC;IACvD,MAAMG,cAAc,GAAGrI,eAAe,CAACgI,WAAW,CAACrE,OAAO,CAAC;IAC3D,MAAM,CAAC2E,oBAAoB,EAAErC,IAAI,CAAC,GAAGhG,IAAI,CAACoI,cAAc,CAAC;IACzD,IAAInI,cAAc,CAACoI,oBAAoB,EAAEH,oBAAoB,CAAC,EAAE;MAC5D;MACA;MACA;MACA,IAAI,CAAC1H,QAAQ,CAAC8H,QAAQ,CAACD,oBAAoB,EAAErC,IAAI,EAAEmC,EAAE,CAAC;MACtD;IACJ;IACA;IACA,MAAMI,WAAW,GAAG,IAAI,CAACpC,aAAa,CAAC4B,WAAW,EAAE;MAChD3B,UAAU,EAAE,IAAI;MAChBoC,WAAW,EAAE;IACjB,CAAC,CAAC;IACF;IACA,MAAMC,wBAAwB,GAAG1I,eAAe,CAAC0G,cAAc,CAAC/C,OAAO,CAAC;IACxE,MAAMqD,QAAQ,GAAGjH,mBAAmB,CAAC,IAAI,CAACU,QAAQ,CAACD,WAAW,EAAEkI,wBAAwB,EAAE5B,MAAM,CAAC;IACjG,IAAI,CAACG,UAAU,CAACuB,WAAW,EAAExB,QAAQ,CAAC;EAC1C;EACAhE,WAAWA,CAAC2C,KAAK,EAAE;IACf,KAAK,CAAC3C,WAAW,CAAC2C,KAAK,CAAC;EAC5B;EACAE,OAAOA,CAAA,EAAG;IACN,KAAK,CAACA,OAAO,CAAC,CAAC;IACf,IAAI,CAACpE,oBAAoB,CAACoE,OAAO,CAAC,CAAC;EACvC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}