{"ast":null,"code":"export class SplitviewApi {\n  /**\n   * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n   */\n  get minimumSize() {\n    return this.component.minimumSize;\n  }\n  /**\n   * The maximum size the component can reach where size is measured in the direction of orientation provided.\n   */\n  get maximumSize() {\n    return this.component.maximumSize;\n  }\n  /**\n   * Width of the component.\n   */\n  get width() {\n    return this.component.width;\n  }\n  /**\n   * Height of the component.\n   */\n  get height() {\n    return this.component.height;\n  }\n  /**\n   * The current number of panels.\n   */\n  get length() {\n    return this.component.length;\n  }\n  /**\n   * The current orientation of the component.\n   */\n  get orientation() {\n    return this.component.orientation;\n  }\n  /**\n   * The list of current panels.\n   */\n  get panels() {\n    return this.component.panels;\n  }\n  /**\n   * Invoked after a layout is loaded through the `fromJSON` method.\n   */\n  get onDidLayoutFromJSON() {\n    return this.component.onDidLayoutFromJSON;\n  }\n  /**\n   * Invoked whenever any aspect of the layout changes.\n   * If listening to this event it may be worth debouncing ouputs.\n   */\n  get onDidLayoutChange() {\n    return this.component.onDidLayoutChange;\n  }\n  /**\n   * Invoked when a view is added.\n   */\n  get onDidAddView() {\n    return this.component.onDidAddView;\n  }\n  /**\n   * Invoked when a view is removed.\n   */\n  get onDidRemoveView() {\n    return this.component.onDidRemoveView;\n  }\n  constructor(component) {\n    this.component = component;\n  }\n  /**\n   * Removes an existing panel and optionally provide a `Sizing` method\n   * for the subsequent resize.\n   */\n  removePanel(panel, sizing) {\n    this.component.removePanel(panel, sizing);\n  }\n  /**\n   * Focus the component.\n   */\n  focus() {\n    this.component.focus();\n  }\n  /**\n   * Get the reference to a panel given it's `string` id.\n   */\n  getPanel(id) {\n    return this.component.getPanel(id);\n  }\n  /**\n   * Layout the panel with a width and height.\n   */\n  layout(width, height) {\n    return this.component.layout(width, height);\n  }\n  /**\n   * Add a new panel and return the created instance.\n   */\n  addPanel(options) {\n    return this.component.addPanel(options);\n  }\n  /**\n   * Move a panel given it's current and desired index.\n   */\n  movePanel(from, to) {\n    this.component.movePanel(from, to);\n  }\n  /**\n   * Deserialize a layout to built a splitivew.\n   */\n  fromJSON(data) {\n    this.component.fromJSON(data);\n  }\n  /** Serialize a layout */\n  toJSON() {\n    return this.component.toJSON();\n  }\n  /**\n   * Remove all panels and clear the component.\n   */\n  clear() {\n    this.component.clear();\n  }\n  /**\n   * Update configuratable options.\n   */\n  updateOptions(options) {\n    this.component.updateOptions(options);\n  }\n  /**\n   * Release resources and teardown component. Do not call when using framework versions of dockview.\n   */\n  dispose() {\n    this.component.dispose();\n  }\n}\nexport class PaneviewApi {\n  /**\n   * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n   */\n  get minimumSize() {\n    return this.component.minimumSize;\n  }\n  /**\n   * The maximum size the component can reach where size is measured in the direction of orientation provided.\n   */\n  get maximumSize() {\n    return this.component.maximumSize;\n  }\n  /**\n   * Width of the component.\n   */\n  get width() {\n    return this.component.width;\n  }\n  /**\n   * Height of the component.\n   */\n  get height() {\n    return this.component.height;\n  }\n  /**\n   * All panel objects.\n   */\n  get panels() {\n    return this.component.panels;\n  }\n  /**\n   * Invoked when any layout change occures, an aggregation of many events.\n   */\n  get onDidLayoutChange() {\n    return this.component.onDidLayoutChange;\n  }\n  /**\n   * Invoked after a layout is deserialzied using the `fromJSON` method.\n   */\n  get onDidLayoutFromJSON() {\n    return this.component.onDidLayoutFromJSON;\n  }\n  /**\n   * Invoked when a panel is added. May be called multiple times when moving panels.\n   */\n  get onDidAddView() {\n    return this.component.onDidAddView;\n  }\n  /**\n   * Invoked when a panel is removed. May be called multiple times when moving panels.\n   */\n  get onDidRemoveView() {\n    return this.component.onDidRemoveView;\n  }\n  /**\n   * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n   */\n  get onDidDrop() {\n    return this.component.onDidDrop;\n  }\n  get onUnhandledDragOverEvent() {\n    return this.component.onUnhandledDragOverEvent;\n  }\n  constructor(component) {\n    this.component = component;\n  }\n  /**\n   * Remove a panel given the panel object.\n   */\n  removePanel(panel) {\n    this.component.removePanel(panel);\n  }\n  /**\n   * Get a panel object given a `string` id. May return `undefined`.\n   */\n  getPanel(id) {\n    return this.component.getPanel(id);\n  }\n  /**\n   * Move a panel given it's current and desired index.\n   */\n  movePanel(from, to) {\n    this.component.movePanel(from, to);\n  }\n  /**\n   *  Focus the component. Will try to focus an active panel if one exists.\n   */\n  focus() {\n    this.component.focus();\n  }\n  /**\n   * Force resize the component to an exact width and height. Read about auto-resizing before using.\n   */\n  layout(width, height) {\n    this.component.layout(width, height);\n  }\n  /**\n   * Add a panel and return the created object.\n   */\n  addPanel(options) {\n    return this.component.addPanel(options);\n  }\n  /**\n   * Create a component from a serialized object.\n   */\n  fromJSON(data) {\n    this.component.fromJSON(data);\n  }\n  /**\n   * Create a serialized object of the current component.\n   */\n  toJSON() {\n    return this.component.toJSON();\n  }\n  /**\n   * Reset the component back to an empty and default state.\n   */\n  clear() {\n    this.component.clear();\n  }\n  /**\n   * Update configuratable options.\n   */\n  updateOptions(options) {\n    this.component.updateOptions(options);\n  }\n  /**\n   * Release resources and teardown component. Do not call when using framework versions of dockview.\n   */\n  dispose() {\n    this.component.dispose();\n  }\n}\nexport class GridviewApi {\n  /**\n   * Width of the component.\n   */\n  get width() {\n    return this.component.width;\n  }\n  /**\n   * Height of the component.\n   */\n  get height() {\n    return this.component.height;\n  }\n  /**\n   * Minimum height of the component.\n   */\n  get minimumHeight() {\n    return this.component.minimumHeight;\n  }\n  /**\n   * Maximum height of the component.\n   */\n  get maximumHeight() {\n    return this.component.maximumHeight;\n  }\n  /**\n   * Minimum width of the component.\n   */\n  get minimumWidth() {\n    return this.component.minimumWidth;\n  }\n  /**\n   * Maximum width of the component.\n   */\n  get maximumWidth() {\n    return this.component.maximumWidth;\n  }\n  /**\n   * Invoked when any layout change occures, an aggregation of many events.\n   */\n  get onDidLayoutChange() {\n    return this.component.onDidLayoutChange;\n  }\n  /**\n   * Invoked when a panel is added. May be called multiple times when moving panels.\n   */\n  get onDidAddPanel() {\n    return this.component.onDidAddGroup;\n  }\n  /**\n   * Invoked when a panel is removed. May be called multiple times when moving panels.\n   */\n  get onDidRemovePanel() {\n    return this.component.onDidRemoveGroup;\n  }\n  /**\n   * Invoked when the active panel changes. May be undefined if no panel is active.\n   */\n  get onDidActivePanelChange() {\n    return this.component.onDidActiveGroupChange;\n  }\n  /**\n   * Invoked after a layout is deserialzied using the `fromJSON` method.\n   */\n  get onDidLayoutFromJSON() {\n    return this.component.onDidLayoutFromJSON;\n  }\n  /**\n   * All panel objects.\n   */\n  get panels() {\n    return this.component.groups;\n  }\n  /**\n   * Current orientation. Can be changed after initialization.\n   */\n  get orientation() {\n    return this.component.orientation;\n  }\n  set orientation(value) {\n    this.component.updateOptions({\n      orientation: value\n    });\n  }\n  constructor(component) {\n    this.component = component;\n  }\n  /**\n   *  Focus the component. Will try to focus an active panel if one exists.\n   */\n  focus() {\n    this.component.focus();\n  }\n  /**\n   * Force resize the component to an exact width and height. Read about auto-resizing before using.\n   */\n  layout(width, height, force = false) {\n    this.component.layout(width, height, force);\n  }\n  /**\n   * Add a panel and return the created object.\n   */\n  addPanel(options) {\n    return this.component.addPanel(options);\n  }\n  /**\n   * Remove a panel given the panel object.\n   */\n  removePanel(panel, sizing) {\n    this.component.removePanel(panel, sizing);\n  }\n  /**\n   * Move a panel in a particular direction relative to another panel.\n   */\n  movePanel(panel, options) {\n    this.component.movePanel(panel, options);\n  }\n  /**\n   * Get a panel object given a `string` id. May return `undefined`.\n   */\n  getPanel(id) {\n    return this.component.getPanel(id);\n  }\n  /**\n   * Create a component from a serialized object.\n   */\n  fromJSON(data) {\n    return this.component.fromJSON(data);\n  }\n  /**\n   * Create a serialized object of the current component.\n   */\n  toJSON() {\n    return this.component.toJSON();\n  }\n  /**\n   * Reset the component back to an empty and default state.\n   */\n  clear() {\n    this.component.clear();\n  }\n  updateOptions(options) {\n    this.component.updateOptions(options);\n  }\n  /**\n   * Release resources and teardown component. Do not call when using framework versions of dockview.\n   */\n  dispose() {\n    this.component.dispose();\n  }\n}\nexport class DockviewApi {\n  /**\n   * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n   */\n  get id() {\n    return this.component.id;\n  }\n  /**\n   * Width of the component.\n   */\n  get width() {\n    return this.component.width;\n  }\n  /**\n   * Height of the component.\n   */\n  get height() {\n    return this.component.height;\n  }\n  /**\n   * Minimum height of the component.\n   */\n  get minimumHeight() {\n    return this.component.minimumHeight;\n  }\n  /**\n   * Maximum height of the component.\n   */\n  get maximumHeight() {\n    return this.component.maximumHeight;\n  }\n  /**\n   * Minimum width of the component.\n   */\n  get minimumWidth() {\n    return this.component.minimumWidth;\n  }\n  /**\n   * Maximum width of the component.\n   */\n  get maximumWidth() {\n    return this.component.maximumWidth;\n  }\n  /**\n   * Total number of groups.\n   */\n  get size() {\n    return this.component.size;\n  }\n  /**\n   * Total number of panels.\n   */\n  get totalPanels() {\n    return this.component.totalPanels;\n  }\n  /**\n   * Invoked when the active group changes. May be undefined if no group is active.\n   */\n  get onDidActiveGroupChange() {\n    return this.component.onDidActiveGroupChange;\n  }\n  /**\n   * Invoked when a group is added. May be called multiple times when moving groups.\n   */\n  get onDidAddGroup() {\n    return this.component.onDidAddGroup;\n  }\n  /**\n   * Invoked when a group is removed. May be called multiple times when moving groups.\n   */\n  get onDidRemoveGroup() {\n    return this.component.onDidRemoveGroup;\n  }\n  /**\n   * Invoked when the active panel changes. May be undefined if no panel is active.\n   */\n  get onDidActivePanelChange() {\n    return this.component.onDidActivePanelChange;\n  }\n  /**\n   * Invoked when a panel is added. May be called multiple times when moving panels.\n   */\n  get onDidAddPanel() {\n    return this.component.onDidAddPanel;\n  }\n  /**\n   * Invoked when a panel is removed. May be called multiple times when moving panels.\n   */\n  get onDidRemovePanel() {\n    return this.component.onDidRemovePanel;\n  }\n  get onDidMovePanel() {\n    return this.component.onDidMovePanel;\n  }\n  /**\n   * Invoked after a layout is deserialzied using the `fromJSON` method.\n   */\n  get onDidLayoutFromJSON() {\n    return this.component.onDidLayoutFromJSON;\n  }\n  /**\n   * Invoked when any layout change occures, an aggregation of many events.\n   */\n  get onDidLayoutChange() {\n    return this.component.onDidLayoutChange;\n  }\n  /**\n   * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n   */\n  get onDidDrop() {\n    return this.component.onDidDrop;\n  }\n  /**\n   * Invoked when a Drag'n'Drop event occurs but before dockview handles it giving the user an opportunity to intecept and\n   * prevent the event from occuring using the standard `preventDefault()` syntax.\n   *\n   * Preventing certain events may causes unexpected behaviours, use carefully.\n   */\n  get onWillDrop() {\n    return this.component.onWillDrop;\n  }\n  /**\n   * Invoked before an overlay is shown indicating a drop target.\n   *\n   * Calling `event.preventDefault()` will prevent the overlay being shown and prevent\n   * the any subsequent drop event.\n   */\n  get onWillShowOverlay() {\n    return this.component.onWillShowOverlay;\n  }\n  /**\n   * Invoked before a group is dragged.\n   *\n   * Calling `event.nativeEvent.preventDefault()` will prevent the group drag starting.\n   *\n   */\n  get onWillDragGroup() {\n    return this.component.onWillDragGroup;\n  }\n  /**\n   * Invoked before a panel is dragged.\n   *\n   * Calling `event.nativeEvent.preventDefault()` will prevent the panel drag starting.\n   */\n  get onWillDragPanel() {\n    return this.component.onWillDragPanel;\n  }\n  get onUnhandledDragOverEvent() {\n    return this.component.onUnhandledDragOverEvent;\n  }\n  get onDidPopoutGroupSizeChange() {\n    return this.component.onDidPopoutGroupSizeChange;\n  }\n  get onDidPopoutGroupPositionChange() {\n    return this.component.onDidPopoutGroupPositionChange;\n  }\n  get onDidOpenPopoutWindowFail() {\n    return this.component.onDidOpenPopoutWindowFail;\n  }\n  /**\n   * All panel objects.\n   */\n  get panels() {\n    return this.component.panels;\n  }\n  /**\n   * All group objects.\n   */\n  get groups() {\n    return this.component.groups;\n  }\n  /**\n   *  Active panel object.\n   */\n  get activePanel() {\n    return this.component.activePanel;\n  }\n  /**\n   * Active group object.\n   */\n  get activeGroup() {\n    return this.component.activeGroup;\n  }\n  constructor(component) {\n    this.component = component;\n  }\n  /**\n   *  Focus the component. Will try to focus an active panel if one exists.\n   */\n  focus() {\n    this.component.focus();\n  }\n  /**\n   * Get a panel object given a `string` id. May return `undefined`.\n   */\n  getPanel(id) {\n    return this.component.getGroupPanel(id);\n  }\n  /**\n   * Force resize the component to an exact width and height. Read about auto-resizing before using.\n   */\n  layout(width, height, force = false) {\n    this.component.layout(width, height, force);\n  }\n  /**\n   * Add a panel and return the created object.\n   */\n  addPanel(options) {\n    return this.component.addPanel(options);\n  }\n  /**\n   * Remove a panel given the panel object.\n   */\n  removePanel(panel) {\n    this.component.removePanel(panel);\n  }\n  /**\n   * Add a group and return the created object.\n   */\n  addGroup(options) {\n    return this.component.addGroup(options);\n  }\n  /**\n   * Close all groups and panels.\n   */\n  closeAllGroups() {\n    return this.component.closeAllGroups();\n  }\n  /**\n   * Remove a group and any panels within the group.\n   */\n  removeGroup(group) {\n    this.component.removeGroup(group);\n  }\n  /**\n   * Get a group object given a `string` id. May return undefined.\n   */\n  getGroup(id) {\n    return this.component.getPanel(id);\n  }\n  /**\n   * Add a floating group\n   */\n  addFloatingGroup(item, options) {\n    return this.component.addFloatingGroup(item, options);\n  }\n  /**\n   * Create a component from a serialized object.\n   */\n  fromJSON(data) {\n    this.component.fromJSON(data);\n  }\n  /**\n   * Create a serialized object of the current component.\n   */\n  toJSON() {\n    return this.component.toJSON();\n  }\n  /**\n   * Reset the component back to an empty and default state.\n   */\n  clear() {\n    this.component.clear();\n  }\n  /**\n   * Move the focus progmatically to the next panel or group.\n   */\n  moveToNext(options) {\n    this.component.moveToNext(options);\n  }\n  /**\n   * Move the focus progmatically to the previous panel or group.\n   */\n  moveToPrevious(options) {\n    this.component.moveToPrevious(options);\n  }\n  maximizeGroup(panel) {\n    this.component.maximizeGroup(panel.group);\n  }\n  hasMaximizedGroup() {\n    return this.component.hasMaximizedGroup();\n  }\n  exitMaximizedGroup() {\n    this.component.exitMaximizedGroup();\n  }\n  get onDidMaximizedGroupChange() {\n    return this.component.onDidMaximizedGroupChange;\n  }\n  /**\n   * Add a popout group in a new Window\n   */\n  addPopoutGroup(item, options) {\n    return this.component.addPopoutGroup(item, options);\n  }\n  updateOptions(options) {\n    this.component.updateOptions(options);\n  }\n  /**\n   * Release resources and teardown component. Do not call when using framework versions of dockview.\n   */\n  dispose() {\n    this.component.dispose();\n  }\n}","map":{"version":3,"names":["SplitviewApi","minimumSize","component","maximumSize","width","height","length","orientation","panels","onDidLayoutFromJSON","onDidLayoutChange","onDidAddView","onDidRemoveView","constructor","removePanel","panel","sizing","focus","getPanel","id","layout","addPanel","options","movePanel","from","to","fromJSON","data","toJSON","clear","updateOptions","dispose","PaneviewApi","onDidDrop","onUnhandledDragOverEvent","GridviewApi","minimumHeight","maximumHeight","minimumWidth","maximumWidth","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","value","force","DockviewApi","size","totalPanels","onDidMovePanel","onWillDrop","onWillShowOverlay","onWillDragGroup","onWillDragPanel","onDidPopoutGroupSizeChange","onDidPopoutGroupPositionChange","onDidOpenPopoutWindowFail","activePanel","activeGroup","getGroupPanel","addGroup","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","item","moveToNext","moveToPrevious","maximizeGroup","hasMaximizedGroup","exitMaximizedGroup","onDidMaximizedGroupChange","addPopoutGroup"],"sources":["E:/dockview.demo/node_modules/dockview-core/dist/esm/api/component.api.js"],"sourcesContent":["export class SplitviewApi {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize() {\n        return this.component.minimumSize;\n    }\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize() {\n        return this.component.maximumSize;\n    }\n    /**\n     * Width of the component.\n     */\n    get width() {\n        return this.component.width;\n    }\n    /**\n     * Height of the component.\n     */\n    get height() {\n        return this.component.height;\n    }\n    /**\n     * The current number of panels.\n     */\n    get length() {\n        return this.component.length;\n    }\n    /**\n     * The current orientation of the component.\n     */\n    get orientation() {\n        return this.component.orientation;\n    }\n    /**\n     * The list of current panels.\n     */\n    get panels() {\n        return this.component.panels;\n    }\n    /**\n     * Invoked after a layout is loaded through the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON() {\n        return this.component.onDidLayoutFromJSON;\n    }\n    /**\n     * Invoked whenever any aspect of the layout changes.\n     * If listening to this event it may be worth debouncing ouputs.\n     */\n    get onDidLayoutChange() {\n        return this.component.onDidLayoutChange;\n    }\n    /**\n     * Invoked when a view is added.\n     */\n    get onDidAddView() {\n        return this.component.onDidAddView;\n    }\n    /**\n     * Invoked when a view is removed.\n     */\n    get onDidRemoveView() {\n        return this.component.onDidRemoveView;\n    }\n    constructor(component) {\n        this.component = component;\n    }\n    /**\n     * Removes an existing panel and optionally provide a `Sizing` method\n     * for the subsequent resize.\n     */\n    removePanel(panel, sizing) {\n        this.component.removePanel(panel, sizing);\n    }\n    /**\n     * Focus the component.\n     */\n    focus() {\n        this.component.focus();\n    }\n    /**\n     * Get the reference to a panel given it's `string` id.\n     */\n    getPanel(id) {\n        return this.component.getPanel(id);\n    }\n    /**\n     * Layout the panel with a width and height.\n     */\n    layout(width, height) {\n        return this.component.layout(width, height);\n    }\n    /**\n     * Add a new panel and return the created instance.\n     */\n    addPanel(options) {\n        return this.component.addPanel(options);\n    }\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from, to) {\n        this.component.movePanel(from, to);\n    }\n    /**\n     * Deserialize a layout to built a splitivew.\n     */\n    fromJSON(data) {\n        this.component.fromJSON(data);\n    }\n    /** Serialize a layout */\n    toJSON() {\n        return this.component.toJSON();\n    }\n    /**\n     * Remove all panels and clear the component.\n     */\n    clear() {\n        this.component.clear();\n    }\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options) {\n        this.component.updateOptions(options);\n    }\n    /**\n     * Release resources and teardown component. Do not call when using framework versions of dockview.\n     */\n    dispose() {\n        this.component.dispose();\n    }\n}\nexport class PaneviewApi {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize() {\n        return this.component.minimumSize;\n    }\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize() {\n        return this.component.maximumSize;\n    }\n    /**\n     * Width of the component.\n     */\n    get width() {\n        return this.component.width;\n    }\n    /**\n     * Height of the component.\n     */\n    get height() {\n        return this.component.height;\n    }\n    /**\n     * All panel objects.\n     */\n    get panels() {\n        return this.component.panels;\n    }\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange() {\n        return this.component.onDidLayoutChange;\n    }\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON() {\n        return this.component.onDidLayoutFromJSON;\n    }\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddView() {\n        return this.component.onDidAddView;\n    }\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemoveView() {\n        return this.component.onDidRemoveView;\n    }\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop() {\n        return this.component.onDidDrop;\n    }\n    get onUnhandledDragOverEvent() {\n        return this.component.onUnhandledDragOverEvent;\n    }\n    constructor(component) {\n        this.component = component;\n    }\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel) {\n        this.component.removePanel(panel);\n    }\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id) {\n        return this.component.getPanel(id);\n    }\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from, to) {\n        this.component.movePanel(from, to);\n    }\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus() {\n        this.component.focus();\n    }\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width, height) {\n        this.component.layout(width, height);\n    }\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel(options) {\n        return this.component.addPanel(options);\n    }\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data) {\n        this.component.fromJSON(data);\n    }\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON() {\n        return this.component.toJSON();\n    }\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear() {\n        this.component.clear();\n    }\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options) {\n        this.component.updateOptions(options);\n    }\n    /**\n     * Release resources and teardown component. Do not call when using framework versions of dockview.\n     */\n    dispose() {\n        this.component.dispose();\n    }\n}\nexport class GridviewApi {\n    /**\n     * Width of the component.\n     */\n    get width() {\n        return this.component.width;\n    }\n    /**\n     * Height of the component.\n     */\n    get height() {\n        return this.component.height;\n    }\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight() {\n        return this.component.minimumHeight;\n    }\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight() {\n        return this.component.maximumHeight;\n    }\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth() {\n        return this.component.minimumWidth;\n    }\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth() {\n        return this.component.maximumWidth;\n    }\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange() {\n        return this.component.onDidLayoutChange;\n    }\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel() {\n        return this.component.onDidAddGroup;\n    }\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel() {\n        return this.component.onDidRemoveGroup;\n    }\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange() {\n        return this.component.onDidActiveGroupChange;\n    }\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON() {\n        return this.component.onDidLayoutFromJSON;\n    }\n    /**\n     * All panel objects.\n     */\n    get panels() {\n        return this.component.groups;\n    }\n    /**\n     * Current orientation. Can be changed after initialization.\n     */\n    get orientation() {\n        return this.component.orientation;\n    }\n    set orientation(value) {\n        this.component.updateOptions({ orientation: value });\n    }\n    constructor(component) {\n        this.component = component;\n    }\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus() {\n        this.component.focus();\n    }\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width, height, force = false) {\n        this.component.layout(width, height, force);\n    }\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel(options) {\n        return this.component.addPanel(options);\n    }\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel, sizing) {\n        this.component.removePanel(panel, sizing);\n    }\n    /**\n     * Move a panel in a particular direction relative to another panel.\n     */\n    movePanel(panel, options) {\n        this.component.movePanel(panel, options);\n    }\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id) {\n        return this.component.getPanel(id);\n    }\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data) {\n        return this.component.fromJSON(data);\n    }\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON() {\n        return this.component.toJSON();\n    }\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear() {\n        this.component.clear();\n    }\n    updateOptions(options) {\n        this.component.updateOptions(options);\n    }\n    /**\n     * Release resources and teardown component. Do not call when using framework versions of dockview.\n     */\n    dispose() {\n        this.component.dispose();\n    }\n}\nexport class DockviewApi {\n    /**\n     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n     */\n    get id() {\n        return this.component.id;\n    }\n    /**\n     * Width of the component.\n     */\n    get width() {\n        return this.component.width;\n    }\n    /**\n     * Height of the component.\n     */\n    get height() {\n        return this.component.height;\n    }\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight() {\n        return this.component.minimumHeight;\n    }\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight() {\n        return this.component.maximumHeight;\n    }\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth() {\n        return this.component.minimumWidth;\n    }\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth() {\n        return this.component.maximumWidth;\n    }\n    /**\n     * Total number of groups.\n     */\n    get size() {\n        return this.component.size;\n    }\n    /**\n     * Total number of panels.\n     */\n    get totalPanels() {\n        return this.component.totalPanels;\n    }\n    /**\n     * Invoked when the active group changes. May be undefined if no group is active.\n     */\n    get onDidActiveGroupChange() {\n        return this.component.onDidActiveGroupChange;\n    }\n    /**\n     * Invoked when a group is added. May be called multiple times when moving groups.\n     */\n    get onDidAddGroup() {\n        return this.component.onDidAddGroup;\n    }\n    /**\n     * Invoked when a group is removed. May be called multiple times when moving groups.\n     */\n    get onDidRemoveGroup() {\n        return this.component.onDidRemoveGroup;\n    }\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange() {\n        return this.component.onDidActivePanelChange;\n    }\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel() {\n        return this.component.onDidAddPanel;\n    }\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel() {\n        return this.component.onDidRemovePanel;\n    }\n    get onDidMovePanel() {\n        return this.component.onDidMovePanel;\n    }\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON() {\n        return this.component.onDidLayoutFromJSON;\n    }\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange() {\n        return this.component.onDidLayoutChange;\n    }\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop() {\n        return this.component.onDidDrop;\n    }\n    /**\n     * Invoked when a Drag'n'Drop event occurs but before dockview handles it giving the user an opportunity to intecept and\n     * prevent the event from occuring using the standard `preventDefault()` syntax.\n     *\n     * Preventing certain events may causes unexpected behaviours, use carefully.\n     */\n    get onWillDrop() {\n        return this.component.onWillDrop;\n    }\n    /**\n     * Invoked before an overlay is shown indicating a drop target.\n     *\n     * Calling `event.preventDefault()` will prevent the overlay being shown and prevent\n     * the any subsequent drop event.\n     */\n    get onWillShowOverlay() {\n        return this.component.onWillShowOverlay;\n    }\n    /**\n     * Invoked before a group is dragged.\n     *\n     * Calling `event.nativeEvent.preventDefault()` will prevent the group drag starting.\n     *\n     */\n    get onWillDragGroup() {\n        return this.component.onWillDragGroup;\n    }\n    /**\n     * Invoked before a panel is dragged.\n     *\n     * Calling `event.nativeEvent.preventDefault()` will prevent the panel drag starting.\n     */\n    get onWillDragPanel() {\n        return this.component.onWillDragPanel;\n    }\n    get onUnhandledDragOverEvent() {\n        return this.component.onUnhandledDragOverEvent;\n    }\n    get onDidPopoutGroupSizeChange() {\n        return this.component.onDidPopoutGroupSizeChange;\n    }\n    get onDidPopoutGroupPositionChange() {\n        return this.component.onDidPopoutGroupPositionChange;\n    }\n    get onDidOpenPopoutWindowFail() {\n        return this.component.onDidOpenPopoutWindowFail;\n    }\n    /**\n     * All panel objects.\n     */\n    get panels() {\n        return this.component.panels;\n    }\n    /**\n     * All group objects.\n     */\n    get groups() {\n        return this.component.groups;\n    }\n    /**\n     *  Active panel object.\n     */\n    get activePanel() {\n        return this.component.activePanel;\n    }\n    /**\n     * Active group object.\n     */\n    get activeGroup() {\n        return this.component.activeGroup;\n    }\n    constructor(component) {\n        this.component = component;\n    }\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus() {\n        this.component.focus();\n    }\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id) {\n        return this.component.getGroupPanel(id);\n    }\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width, height, force = false) {\n        this.component.layout(width, height, force);\n    }\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel(options) {\n        return this.component.addPanel(options);\n    }\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel) {\n        this.component.removePanel(panel);\n    }\n    /**\n     * Add a group and return the created object.\n     */\n    addGroup(options) {\n        return this.component.addGroup(options);\n    }\n    /**\n     * Close all groups and panels.\n     */\n    closeAllGroups() {\n        return this.component.closeAllGroups();\n    }\n    /**\n     * Remove a group and any panels within the group.\n     */\n    removeGroup(group) {\n        this.component.removeGroup(group);\n    }\n    /**\n     * Get a group object given a `string` id. May return undefined.\n     */\n    getGroup(id) {\n        return this.component.getPanel(id);\n    }\n    /**\n     * Add a floating group\n     */\n    addFloatingGroup(item, options) {\n        return this.component.addFloatingGroup(item, options);\n    }\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data) {\n        this.component.fromJSON(data);\n    }\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON() {\n        return this.component.toJSON();\n    }\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear() {\n        this.component.clear();\n    }\n    /**\n     * Move the focus progmatically to the next panel or group.\n     */\n    moveToNext(options) {\n        this.component.moveToNext(options);\n    }\n    /**\n     * Move the focus progmatically to the previous panel or group.\n     */\n    moveToPrevious(options) {\n        this.component.moveToPrevious(options);\n    }\n    maximizeGroup(panel) {\n        this.component.maximizeGroup(panel.group);\n    }\n    hasMaximizedGroup() {\n        return this.component.hasMaximizedGroup();\n    }\n    exitMaximizedGroup() {\n        this.component.exitMaximizedGroup();\n    }\n    get onDidMaximizedGroupChange() {\n        return this.component.onDidMaximizedGroupChange;\n    }\n    /**\n     * Add a popout group in a new Window\n     */\n    addPopoutGroup(item, options) {\n        return this.component.addPopoutGroup(item, options);\n    }\n    updateOptions(options) {\n        this.component.updateOptions(options);\n    }\n    /**\n     * Release resources and teardown component. Do not call when using framework versions of dockview.\n     */\n    dispose() {\n        this.component.dispose();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}